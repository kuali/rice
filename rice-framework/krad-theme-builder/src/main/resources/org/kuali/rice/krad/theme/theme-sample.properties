#
# Copyright 2005-2017 The Kuali Foundation
#
# Licensed under the Educational Community License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.opensource.org/licenses/ecl2.php
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Example theme.properties file containing all possible configuration properties.
# Copy this file to the corresponding theme directory (must be in root) and name as 'theme.properties'

# Many of the properties allow an Ant pattern to be specified. The basics of Ant patterns are:

# a single star (*) matches zero or more characters within a path name
# a double star (**) matches zero or more characters across directory levels
# a question mark (?) matches exactly one character within a path name
# Examples: *.c, src/*.c, */*.c, **/*.c, src/ba?.c

# Any configured file names or paths (including those used in patterns) are case insensitive

# Name of the theme to inherit from, this should correspond to the theme directory.
# For example, if the theme directory is '/themes/bootstrap', the parent would be 'bootstrap'.
# All assets from the parent will be copied to the theme directory, except those excluded by 'parentExcludes',
# and those assets which already exist in the theme (same name and path)
parent=

# When a parent is set, one or more files to exclude from the asset copy. More than one file can be given
# using a comma delimiter. An exclude can be an exact file (name and path relative to the parent theme directory),
# or an Ant pattern
# ex. 'scripts/bootstrap.js,scripts/k**,stylesheets/**'
parentExcludes=

# One or more files to exclude from the final CSS list. This is relative to the 'stylesheets' directory of the
# theme, and should not contain the file extension. This is processed after all overlays. Ant patterns can
# be used as well. CSS files that come from a plugin directory can also be excluded from the final list by filtering
# based on the file base name
# ex. 'myTest,example*'
cssExcludes=

# One or more files to exclude from the final JS list. This is relative to the 'scripts' directory of the
# theme, and should not contain the file extension. This is processed after all overlays. Ant patterns can
# be used as well. JS files that come from a plugin directory can also be excluded from the final list by filtering
# based on the file base name
# ex. 'myScript,scriptA*'
jsExcludes=

# One or more script files to include when running in development mode. This is relative to the webroot and should
# include the extension. The files are included in order after the theme's production script files.
devJsIncludes=

# One or more plugin names that should be included with the theme. Plugins are named by their directory (for
# example, the plugin at '/plugins/jstree' has name 'jstree'). By default all plugins in the '/plugins' directory
# are included, and can be filtered using pluginExcludes
# ex. 'jquery,jqueryui,datatables,blockui'
pluginIncludes=

# One or more plugin names to exclude from the theme. Plugins are named by their directory (for
# example, the plugin at '/plugins/jstree' has name 'jstree'). By default all plugins in the '/plugins' directory
# are included
# ex. 'globalize,postmsg'
pluginExcludes=

# One or more files to exclude from the plugin directories that are included in the theme. File excludes should
# be relative to the plugin directory parent (most of the time this will be '/plugins'). Ant patterns may be used
# as well
# ex. 'fancybox/helpers/**,jstree/themes/**'
pluginFileExcludes=

# One or more mappings of directories to overlay (copy). Each mapping is delimited by a comma. Within each mapping
# the from directory is listed, then the to directory within parenthesis ('fromDir(toDir)'). Both are relative to
# themes directory, unless the path starts with '/', in which case it is taken from the web root. This configuration
# is useful because some plugins/scripts look for assets (such as images) in the plugin directory. When the script
# is minified, it is essentially moved, therefore those relative paths are broken. This can be used to copy the
# needed content to the theme directory
# ex. '/plugins/jstree/themes(scripts/themes),/plugins/tooltip/jquerybubblepopup-theme(scripts/jquerybubblepopup-theme)'
additionalOverlays=

# When the Less pre processor is used, provides the list of less files to compile. Ant patterns are allowed.
# By default all files in the theme's directory named 'stylesheets' and with .less extension are included,
# with the exception of those in the 'stylesheets/includes' directory.
# ex. 'bootstrap.less,**/less/*.less'
lessIncludes=

# When the Less pre processor is used, provides the list of less files to exclude from the compile process.
# Ant patterns are allowed.
# ex. 'reset.less,include*.less'
lessExcludes=

# The remaining configuration properties customize the order CSS and JS files are sourced. In development
# mode this is the order they are sourced in. When merging and minifying this is the order in which the
# contents are included

# There is a global ordering of the following: plugin assets, krad assets, theme specific assets

# One or more CSS files that should be ordered first. Ant patterns are allowed and the .css extension
# should not be included. Each file/pattern is tested against the list of all included CSS files, and matches
# are placed into the final list in that position. Note only the file base name (not including any path or
# extension) is tested (therefore it doesn't matter whether the file originally came from a plugin or theme
# directory). If this property is not specified then plugin assets will be first to load
# ex. 'reset,bootstrap'
cssLoadFirst=

# One or more CSS files that should be ordered last. The file/pattern given first will be last in the list,
# second file/pattern will be second to last, and so on. Ant patterns are allowed and the .css extension
# should not be included. Each file/pattern is tested against the list of all included CSS files, and matches
# are placed into the final list in that position. Note only the file base name (not including any path or
# extension) is tested (therefore it doesn't matter whether the file originally came from a plugin or theme directory).
# ex. 'override,colors'
cssLoadLast=

# Order that CSS files that are included from plugins should be loaded. These will load after any CSS files
# given in cssLoadFirst. Ant patterns are allowed and the .css extension should not be included. Each file/pattern
# is tested against the list of CSS files that come from the included plugin directories. Any matches are loaded
# in that position. Any plugin CSS files not matched will be loaded afterwards in no set order.
# ex. 'jquery-ui*,jquery.fancybox'
pluginCssLoadOrder=

# Order that CSS files that are present in the themes 'stylesheets' directory (or inherited from a parent's
# 'stylesheets' directory) should be loaded. These will load after plugin CSS files. Ant patterns are allowed
# and the .css extension should not be included. Each file/pattern is tested against the list of CSS files that
# come from the stylesheets directory. Any matches are loaded in that position. Any theme CSS files not matched
# will be loaded afterwards in no set order.
# ex. 'base,fonts'
themeCssLoadOrder

# One or more JS files that should be ordered first. Ant patterns are allowed and the .js extension
# should not be included. Each file/pattern is tested against the list of all included JS files, and matches
# are placed into the final list in that position. Note only the file base name (not including any path or
# extension) is tested (therefore it doesn't matter whether the file originally came from a plugin or theme
# directory). If this property is not specified then plugin assets will be first to load
# ex. 'jquery-1.8.3,jquery.validate'
jsLoadFirst=

# One or more JS files that should be ordered last. The file/pattern given first will be last in the list,
# second file/pattern will be second to last, and so on. Ant patterns are allowed and the .js extension
# should not be included. Each file/pattern is tested against the list of all included JS files, and matches
# are placed into the final list in that position. Note only the file base name (not including any path or
# extension) is tested (therefore it doesn't matter whether the file originally came from a plugin or theme directory).
# ex. 'jquery.easing-1.3.pack'
jsLoadLast=

# Order that JS files that are included from plugins should be loaded. These will load after any JS files
# given in jsLoadFirst. Ant patterns are allowed and the .js extension should not be included. Each file/pattern
# is tested against the list of JS files that come from the included plugin directories. Any matches are loaded
# in that position. Any plugin JS files not matched will be loaded afterwards in no set order.
# ex. 'jquery-ui*,jquery.fancybox'
pluginJsLoadOrder=

# Order that JS files that are present in the themes 'scripts' directory (or inherited from a parent's
# 'scripts' directory) should be loaded. These will load after plugin JS files. Ant patterns are allowed
# and the .js extension should not be included. Each file/pattern is tested against the list of JS files that
# come from the scripts directory. Any matches are loaded in that position. Any theme JS files not matched
# will be loaded afterwards in no set order.
# ex. 'helpers,global*'
themeJsLoadOrder=