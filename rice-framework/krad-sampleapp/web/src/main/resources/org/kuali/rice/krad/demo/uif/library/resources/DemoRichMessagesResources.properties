#
# Copyright 2005-2017 The Kuali Foundation
#
# Licensed under the Educational Community License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.opensource.org/licenses/ecl2.php
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

@cmp{Demo-RichMessagesView}#componentName=Rich Messages

@cmp{Demo-RichMessages-Example1}#headerText=Html
@cmp{Demo-RichMessages-Example1}#instructionalText=Html can be placed inline without the need to escape html tag characters

@cmp{Demo-RichMessages-Example2}#headerText=Comp. by Index
@cmp{Demo-RichMessages-Example2}#instructionalText=Components can be referenced by index they appear in the inlineComponents \
  property of the Message component

@cmp{Demo-RichMessages-Example3}#headerText=Comp by id
@cmp{Demo-RichMessages-Example3}#instructionalText=Components can be referenced by id.  Components referenced in this way \
  can even have their simple properties set/changed inline with the message!

@cmp{Demo-RichMessages-Example4}#headerText=Color
@cmp{Demo-RichMessages-Example4}#instructionalText=Easily add colored text inline

@cmp{Demo-RichMessages-Example5}#headerText=CSS
@cmp{Demo-RichMessages-Example5}#instructionalText=Easily wrap portions of text in spans with a css class

@cmp{Demo-RichMessages-Example6}#headerText=Combine
@cmp{Demo-RichMessages-Example6}#instructionalText=Combine and nest the rich message tag

@cmp{Demo-RichMessages-Example7}#headerText=In Labels
@cmp{Demo-RichMessages-Example7}#instructionalText=Rich message text works in labels and headers

@cmp{Demo-RichMessages-Example8}#headerText=W/ InputField
@cmp{Demo-RichMessages-Example8}#instructionalText=Rich messages work for the instructionalMessage and constraintMessage \
  text of input fields.  Any field that is backed by a Message object supports this functionality!

@cmp{Demo-RichMessages-Example9}#headerText=W/ SpringEL
@cmp{Demo-RichMessages-Example9}#instructionalText=Rich message content retrieved through a property by using SpringEL also works and \
  its rich message tags are processed

@cmp{Demo-RichMessages-Example10}#headerText=Images
@cmp{Demo-RichMessages-Example10}#instructionalText=There are multiple easy ways to define images inline with rich messages \
  functionality

@cmp{Demo-RichMessages-Example11}#headerText=Escape char
@cmp{Demo-RichMessages-Example11}#instructionalText=Use backslash \\ to escape \\[ and \\] if your message text contains them

@cmp{Demo-RichMessages-Example12}#headerText=Checkboxes/Radio
@cmp{Demo-RichMessages-Example12}#instructionalText=Checkboxes and Radio groups also support rich message content in their \
  options label text!

@cmp{Demo-RichMessages-Example13}#headerText=Link
@cmp{Demo-RichMessages-Example13}#instructionalText=Easily define an outside link

@cmp{Demo-RichMessages-Example14}#headerText=Action
@cmp{Demo-RichMessages-Example14}#instructionalText=Easily define the action component type inline.  This behaves the same \
  as using an Action component and allows you to call a controller method.

@cmp{Demo-RichMessagesView}#description=TODO
@cmp{Demo-RichMessagesView}#usage=TODO