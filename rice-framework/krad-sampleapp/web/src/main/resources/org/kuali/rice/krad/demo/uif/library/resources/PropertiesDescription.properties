#
# Copyright 2005-2017 The Kuali Foundation
#
# Licensed under the Educational Community License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.opensource.org/licenses/ecl2.php
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#Fri Nov 15 15:22:55 EST 2013
org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint=A ValidCharactersConstraint based on AlphaNumericValidationPattern.
org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint|lowerCase|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint|upperCase|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint=Pattern for matching alpha characters
org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint|lowerCase|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint|upperCase|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint=Pattern for matching any printable character
org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint|allowWhitespace|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint|omitNewline|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint=A class that implements the required accessor for label keys. This provides a convenient base class\n from which other constraints can be derived.\n\n Only BaseConstraints can have state validation.\n\n This class is a direct copy of one that was in Kuali Student.
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|applyClientSide|Boolean=If this is true, the constraint should be applied on the client side when the user interacts with\n a field - if this constraint can be interpreted for client side use. Default is true.
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|constraintStateOverrides|List=Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint\n when their state is matched during validation.\n Because of this, constraints added to this list MUST have their states defined.\n\n <p>ConstraintStateOverrides always take precedence over this\n constraint if they apply to the state being evaluated during validation.  These settings have no effect if\n there is no stateMapping represented on the entry/view being evaluated.\n </p>
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|messageComponentCode|String=A code within the namespace that identifies a component or group the constraint message is associated with\n\n <p>\n Used with the namespace and error key for retrieving the constraint text. If null,\n the default component code will be used\n </p>
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|messageKey|String=A key that is used to retrieve the constraint message text (used with the namespace and component\n code if specified)
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|messageNamespaceCode|String=Namespace code (often an application or module code) the constraint failure message is associated with\n\n <p>\n Used with the component code and error key for retrieving the constraint. If null,\n the default namespace code will be used\n </p>
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|states|List=A list of states to apply this constraint for, this will effect when a constraint\n is applied.\n\n <p>Each state this constraint is applied for needs to be declared with few additional options\:\n <ul>\n <li>if NO states are defined for this constraint, this constraint is applied for ALL states</li>\n <li>if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state\n and ALL following states</li>\n <li>if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for\n all\n states from state1 to state6 </li>\n </ul>\n These can be mixed and matched, as appropriate, though states using a + symbol should always be the last\n item of a list (as they imply this state and everything else after).</p>\n\n <p>Example state list may be\: ["state1", "state3>state5", "state6+"].  In this example, note that this\n constraint\n is never applied to "state2" (assuming these example states represent a state order by number)</p>
org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint|validationMessageParams|List=Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of\n the param
org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint=CaseConstraint is imposed only when a certain condition is met\n\n <p>For example, if the country attribute value is "USA",\n then a prerequisite constraint may be imposed that the 'State' attribute is non-null.</p>\n\n <p>\n This class is a direct copy of one that was in Kuali Student.</p>
org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint|caseSensitive|boolean=checks whether string comparison will be carried out in a case sensitive fashion
org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint|operator|String=specifies the kind of relationship to be checked between the actual value and the ones defined in the {@link\n \#getWhenConstraint()}
org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint|propertyName|String=gets the property name for the attribute to which the case constraint is applied to
org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint|whenConstraint|List=get the {@code WhenConstraint}'s defined by this case constraint
org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint=Pattern for matching any character in the given list (String)
org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint|validChars|String=
org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint=ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from\n the KualiConfigurationService
org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint|patternTypeKey|String=Message key used to identify the validation pattern
org.kuali.rice.krad.datadictionary.validation.constraint.DatePatternConstraint=DatePatternConstraint constrains a field to only allow dates which are part of the formats\n defined in the system. Constraining a field all these formats is often not appropriate for\n fields, and you may want to constrain the input to a subset of the allowed formats in the system.\n This can be done by setting the allowed formats to this subset (see BasicDatePatternConstraint\n bean for example)
org.kuali.rice.krad.datadictionary.validation.constraint.DatePatternConstraint|allowedFormats|List=
org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint=TODO delyea don't forget to fill this in.
org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint|allowNegative|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint|precision|int=
org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint|scale|int=
org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint=Validation pattern for matching floating point numbers, optionally matching negative numbers
org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint|allowNegative|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint=TODO Administrator don't forget to fill this in.
org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint|allowNegative|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint|omitZero|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint|onlyNegative|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint=Must occur constraints are constraints that indicate some range of acceptable valid results. So a must occur\n constraint\n might indicate that between 1 and 3 prequisite constraints must be valid. For example, on a person object, it might\n be\n that one of three fields must be filled in\:\n\n 1. username\n 2. email\n 3. phone number\n\n By imposing a must occur constraint on the person object iself, and setting three prequisite constraints below it,\n with a min of 1\n and a max of 3, this requirement can be enforced.\n\n A more complicated example might be that a US address is only valid if it provides either\:\n (a) a city and state, or\n (b) a postal code\n\n To enforce this, a single must occur constraint would have two children\: (1) a prequisite constraint on postal code,\n and (2) a must occur constraint\n with two child prequisite constraints, on city and state, respectively. By setting min\=1/max\=2 at the top must occur\n constraint,\n and min\=2/max\=2 at the leaf constraint, this requirement can be enforced.
org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint|max|Integer=
org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint|min|Integer=
org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint|mustOccurConstraints|List=
org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint|prerequisiteConstraints|List=
org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint=Pattern for matching numeric characters, difference between NumericPatternConstraint and IntegerPatternConstraint\n is that a numeric pattern constraint is for matching numeric characters and can be mixed with other characters\n by setting allow flags on, while integer is for only positive/negative numbers
org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint=Prerequisite constraints require that some other attribute be non-empty in order for the constraint to be valid.\n So, a 7-digit US phone number might have a prerequisite of an area code, or an address street2 might have a\n prerequisite\n that street1 is non-empty.
org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint|propertyName|String=
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint=A simple constraint stores 'basic' constraints for a field.  This constraint is meant to be used as a\n constraint for WhenConstraints in CaseConstraint, and is also used internally in InputField.
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|dataType|DataType=
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|exclusiveMin|String=Exclusive minimum value for this field
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|inclusiveMax|String=Inclusive max value for this field
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|maxLength|Integer=The maximum amount of characters this field's value can be
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|maxOccurs|Integer=The maximum amount of items in this field's list of values - not yet used/do not use
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|minLength|Integer=The minimum amount of characters this field's value has to be
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|minOccurs|Integer=The minimum amount of items in this fields list of values - not yet used/do not use
org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint|required|Boolean=If true the field is required
org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint=Pattern for matching any printable character
org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint|allowWhitespace|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint|omitNewline|boolean=
org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint=This is a constraint that limits attribute values to some subset of valid characters or to match a particular\n regular\n expression.\n\n For example\:\n - To limit to both upper and lower-case letters, value can be set to "[A-Za-z]*"\n - To limit to any character except carriage returns and line feeds, value can be set to "[^\\n\\r]*"
org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint|value|String=The Java based regex for valid characters\n This value should include the ^ and $ symbols if needed
org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersPatternConstraint=This abstract class extends from ValidCharactersConstraint. Its subclasses contain a regex that\n is built out with flags that can be turned off and on. All ValidCharactersPatternConstraints\n allow a certain set of characters to be repeated multiple times
org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersPatternConstraint|value|String=The Java based regex for valid characters\n This value should include the ^ and $ symbols if needed
org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint=
org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint|value|String=The Java based regex for valid characters\n This value should include the ^ and $ symbols if needed
org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint={@code WhenConstraint} is a child of a {@link CaseConstraint}\n\n <p>It provides a specific additional constraint that should be processed when\n the condition itself is true.</p>\n\n <p>So a case constraint on country, might have a when constraint with value\='USA', and another with value\='Canada'.\n Each of these\n {@code WhenConstraint}'s would define a constraint of their own that would only be processed when the country was\n USA, or when the country\n was Canada.</p>\n\n <p>A {@code WhenConstraint} either specifies an attribute path whose value it then provides or a constraint.\n The parent @{CaseConstraint} is defined on the field on which the constraints are desired to take effect.</p>
org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint|constraint|Constraint=The constraint to apply to the field when the {@code WhenConstraint} value/values match
org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint|valuePath|String=Path that can retrieve an attributes value
org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint|values|List=List of values to check for this constraint
org.kuali.rice.krad.uif.component.BindingInfo=Provides binding configuration for an DataBinding component (attribute or\n collection)\n\n <p>\n From the binding configuration the binding path is determined (if not\n manually set) and used to set the path in the UI or to get the value from the\n model\n </p>
org.kuali.rice.krad.uif.component.BindingInfo|bindByNamePrefix|String=Prefix that will be used to form the binding path from the component\n name. Typically used for nested collection properties
org.kuali.rice.krad.uif.component.BindingInfo|bindToForm|boolean=Indicates whether the component binds directly to the form (that is its\n bindingName gives a property available through the form), or whether is\n binds through a nested form object. If bindToForm is false, it is assumed\n the component binds to the object given by the form property whose path\n is configured by bindingObjectPath.
org.kuali.rice.krad.uif.component.BindingInfo|bindToMap|boolean=Indicates whether the parent object for the property that we are binding\n to is a Map. If true the binding path will be adjusted to use the map key\n syntax
org.kuali.rice.krad.uif.component.BindingInfo|bindingName|String=Gives the name of the property that the component binds to. The name can\n be nested but not the full path, just from the parent object or in the\n case of binding directly to the form from the form object\n\n <p>\n If blank this will be set from the name field of the component\n </p>
org.kuali.rice.krad.uif.component.BindingInfo|bindingObjectPath|String=For attribute fields that do not belong to the default form object (given\n by the view), this field specifies the path to the object (on the form)\n the attribute does belong to.\n\n <p>\n e.g. Say we have an attribute field with property name 'number', that\n belongs to the object given by the 'account' property on the form. The\n form object path would therefore be set to 'account'. If the property\n belonged to the object given by the 'document.header' property of the\n form, the binding object path would be set to 'document.header'. Note if\n the binding object path is not set for an attribute field (or any\n <code>DataBinding</code> component), the binding object path configured\n on the <code>View</code> will be used (unless bindToForm is set to true,\n where is assumed the property is directly available from the form).\n </p>
org.kuali.rice.krad.uif.component.BindingInfo|bindingPath|String=Path to the property on the model the component binds to. Uses standard\n dot notation for nested properties. If the binding path was manually set\n it will be returned as it is, otherwise the path will be formed by using\n the binding object path and the bind prefix\n\n <p>\n e.g. Property name 'foo' on a model would have binding path "foo", while\n property name 'name' of the nested model property 'account' would have\n binding path "account.name"\n </p>
org.kuali.rice.krad.uif.component.ComponentBase=Base implementation of <code>Component</code> which other component implementations should extend\n \n <p>\n Provides base component properties such as id and template. Also provides default implementation\n for the <code>ScriptEventSupport</code> and <code>Ordered</code> interfaces. By default no script\n events except the onDocumentReady are supported.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|additionalComponentsToRefresh|List=Returns a list of componentIds which will be also be refreshed when this component is refreshed\n\n <p>\n This will be a comma separated list of componentIds that need to be refreshed when a refresh\n condition has been set on this component.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|additionalCssClasses|List=Convenience property for adding css class names to the end of the list of cssClasses that may already exist on\n this Component (this is to avoid explicitly having to set list merge in the bean definition)
org.kuali.rice.krad.uif.component.ComponentBase|align|String=Horizontal alignment of the component within its container\n\n <p>\n All components belong to a <code>Container</code> and are placed using a\n <code>LayoutManager</code>. This property specifies how the component\n should be aligned horizontally within the container. During the finalize\n phase the CSS text-align style will be created for the align setting.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|colSpan|int=Number of places the component should take up horizontally in the\n container\n\n <p>\n All components belong to a {@code Container} and are placed using a\n {@code LayoutManager}. This property specifies how many places\n horizontally the component should take up within the container. This is\n only applicable for table based layout managers. Default is 1\n </p>\n\n TODO\: this should not be on component interface since it only applies if\n the layout manager supports it, need some sort of layoutOptions map for\n field level options that depend on the manager
org.kuali.rice.krad.uif.component.ComponentBase|componentModifiers|List={@code ComponentModifier} instances that should be invoked to\n initialize the component\n\n <p>\n These provide dynamic initialization behavior for the component and are\n configured through the components definition. Each initializer will get\n invoked by the initialize method.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|componentSecurity|ComponentSecurity=Security object that indicates what authorization (permissions) exist for the component
org.kuali.rice.krad.uif.component.ComponentBase|conditionalRefresh|String=When set if the condition is satisfied, the component will be refreshed.\n \n <p>\n The component MUST BE a container or field type. conditionalRefresh is defined in a limited\n Spring EL syntax. Only valid form property names, and, or, logical comparison operators\n (non-arithmetic), \#listContains, \#emptyList, and the matches clause are allowed. String and\n regex values must use single quotes ('), booleans must be either true or false, numbers must\n be a valid double either negative or positive.\n \n <p>\n DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known\n that the component will always be visible in all cases when a conditionalRefresh happens (ie\n conditionalRefresh has progressiveRender's condition anded with its own condition). <b>If a\n component should be refreshed every time it is shown, use the progressiveRenderAndRefresh\n option with this property instead.</b>\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|context|Map=Context map for the component\n\n <p>\n Any el statements configured for the components properties (e.g.\n title\="@{foo.property}") are evaluated using the el context map. This map\n will get populated with default objects like the model, view, and request\n from the {@code ViewHelperService}. Other components can push\n further objects into the context so that they are available for use with\n that component. For example, {@code Field} instances that are part\n of a collection line as receive the current line instance\n </p>\n\n <p>\n Context map also provides objects to methods that are invoked for\n {@code GeneratedField} instances\n </p>\n\n <p>\n The Map key gives the name of the variable that can be used within\n expressions, and the Map value gives the object instance for which\n expressions containing the variable should evaluate against\n </p>\n\n <p>\n NOTE\: Calling getContext().putAll() will skip updating any configured property replacers for the\n component. Instead you should call \#pushAllToContext\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|cssClasses|List=CSS style class(s) to be applied to the component\n\n <p>\n Declares style classes for the component. Multiple classes are specified\n with a space delimiter. This is used by the renderer to set the class\n attribute on the corresponding element. The class(s) declared must be\n available in the common style sheets or the style sheets specified for\n the view\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|dataAttributes|Map=Get the dataAttributes setup for this component - to be written to the html/jQuery data\n \n <p>\n The attributes that are complex objects (contain {}) they will be written through script. The\n attritubes that are simple (contain no objects) will be written directly to the html of the\n component using standard data-. Either way they can be access through .data() call in jQuery\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|disableSessionPersistence|boolean=Disables the storage of the component in session (when the framework determines it needs to be due to a\n refresh condition)\n\n <p>\n When the framework determines there is a condition on the component that requires it to keep around between\n posts, it will store the component instance in session. This flag can be set to disable this behavior (which\n would require custom application logic to support behavior such as refresh)\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|finalizeMethodAdditionalArguments|List=The List of Object instances that should be passed as arguments to the finalize method\n\n <p>\n These arguments are passed to the finalize method after the standard model and component\n arguments. They are passed in the order declared in the list\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|finalizeMethodInvoker|MethodInvokerConfig={@code MethodInvokerConfig} instance for the method that should be invoked\n for finalizing the component configuration\n\n <p>\n MethodInvoker can be configured to specify the class or object the method\n should be called on. For static method invocations, the targetClass\n property can be configured. For object invocations, that targetObject\n property can be configured\n </p>\n\n <p>\n If the component is selfRendered, the finalize method can return a string which\n will be set as the component's renderOutput. The selfRendered indicator will also\n be set to true on the component.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|finalizeMethodToCall|String=The name of the method that should be invoked for finalizing the component\n configuration (full method name, without parameters or return type)\n\n <p>\n Note the method can also be set with the finalizeMethodInvoker\n targetMethod property. If the method is on the configured\n {@code ViewHelperService}, only this property needs to be configured\n </p>\n\n <p>\n The model backing the view will be passed as the first argument method and then\n the {@code Component} instance as the second argument. If any additional method\n arguments are declared with the finalizeMethodAdditionalArguments, they will then\n be passed in the order declared in the list\n </p>\n\n <p>\n If the component is selfRendered, the finalize method can return a string which\n will be set as the component's renderOutput. The selfRendered indicator will also\n be set to true on the component.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|forceSessionPersistence|boolean=Indicates whether the component should be stored with the session view regardless of configuration\n\n <p>\n By default the framework nulls out any components that do not have a refresh condition or are needed for\n collection processing. This can be a problem if custom application code is written to refresh a component\n without setting the corresponding component flag. In this case this property can be set to true to force the\n framework to keep the component in session. Defaults to false\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|hidden|boolean=Indicates whether the component should be hidden in the UI\n\n <p>\n How the hidden data is maintained depends on the views persistence mode.\n If the mode is request, the corresponding data will be rendered to the UI\n but not visible. If the mode is session, the data will not be rendered to\n the UI but maintained server side.\n </p>\n\n <p>\n For a {@code Container} component, the hidden setting will apply to\n all contained components (making a section hidden makes all fields within\n the section hidden)\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|id|String=
org.kuali.rice.krad.uif.component.ComponentBase|methodToCallOnRefresh|String=Name of a method on the controller that should be invoked as part of the component refresh\n and disclosure process\n \n <p>\n During the component refresh or disclosure process it might be necessary to perform other\n operations, such as preparing data or executing a business process. This allows the\n configuration of a method on the underlying controller that should be called for the\n component refresh action. In this method, the necessary logic can be performed and then the\n base component update method invoked to carry out the component refresh.\n </p>\n \n <p>\n Controller method to invoke must accept the form, binding result, request, and response\n arguments\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|onBlurScript|String=Script that should be executed when the component's onBlur event is fired
org.kuali.rice.krad.uif.component.ComponentBase|onChangeScript|String=Script that should be executed when the component's onChange event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onClickScript|String=Script that should be executed when the component's onClick event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onCloseScript|String=Script that should be executed when the component's onClose event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onDblClickScript|String=Script that should be executed when the component's onDblClick event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onDocumentReadyScript|String=Script to be run when the document ready event is triggered
org.kuali.rice.krad.uif.component.ComponentBase|onFocusScript|String=Script that should be executed when the component's onFocus event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onKeyDownScript|String=Script that should be executed when the component's onKeyDown event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onKeyPressScript|String=Script that should be executed when the component's onKeyPress event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onKeyUpScript|String=Script that should be executed when the component's onKeyUp event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onLoadScript|String=Script that should be executed when the component's onLoad event is fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseDownScript|String=Script that should be executed when the component's onMouseDown event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseMoveScript|String=Script that should be executed when the component's onMouseMove event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseOutScript|String=Script that should be executed when the component's onMouseOut event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseOverScript|String=Script that should be executed when the component's onMouseOver event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseUpScript|String=Script that should be executed when the component's onMouseUp event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onSubmitScript|String=Script that should be executed when the component's onSubmit event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onUnloadScript|String=Script that should be executed when the component's onUnload event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|order|int=
org.kuali.rice.krad.uif.component.ComponentBase|postRenderContent|String=
org.kuali.rice.krad.uif.component.ComponentBase|preRenderContent|String=
org.kuali.rice.krad.uif.component.ComponentBase|progressiveRenderAndRefresh|boolean=If true, when the progressiveRender condition is satisfied, the component will always be\n retrieved from the server and shown(as opposed to being stored on the client, but hidden,\n after the first retrieval as is the case with the progressiveRenderViaAJAX option).\n \n <p>\n <b>By default, this is false, so components with progressive render capabilities will always\n be already within the client html and toggled to be hidden or visible.</b>\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|progressiveRenderViaAJAX|boolean=When progressiveRenderViaAJAX is true, this component will be retrieved from the server when\n it first satisfies its progressive render condition.\n \n <p>\n After the first retrieval, it is hidden/shown in the html by the js when its progressive\n condition result changes. <b>By default, this is false, so components with progressive render\n capabilities will always be already within the client html and toggled to be hidden or\n visible.</b>\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|progressiveRender|String=When set if the condition is satisfied, the component will be displayed. The component MUST\n BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.\n Only valid form property names, and, or, logical comparison operators (non-arithmetic),\n \#listContains, \#emptyList, matches clause are allowed. String and regex values must use\n single quotes ('), booleans must be either true or false, numbers must be a valid double,\n either negative or positive.\n \n <p>\n DO NOT use progressiveRender and a conditional refresh statement on the same component unless\n it is known that the component will always be visible in all cases when a conditional refresh\n happens (ie conditional refresh has progressiveRender's condition anded with its own\n condition).\n </p>\n \n <p>\n <b>If a component should be refreshed every time it is shown, use the\n progressiveRenderAndRefresh option with this property instead.</b>\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|propertyReplacers|List=gets a list of {@code PropertyReplacer} instances\n\n <p>They will be evaluated\n during the view lifecycle to conditionally set properties on the\n {@code Component} based on expression evaluations</p>
org.kuali.rice.krad.uif.component.ComponentBase|readOnly|boolean=Indicates whether the component can be edited\n\n <p>\n When readOnly the controls and widgets of {@code Field} components\n will not be rendered. If the Field has an underlying value it will be\n displayed readOnly to the user.\n </p>\n\n <p>\n For a {@code Container} component, the readOnly setting will apply\n to all contained components (making a section readOnly makes all fields\n within the section readOnly).\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|refreshTimer|int=Time in seconds that the component will be automatically refreshed\n \n <p>\n This will invoke the refresh process just like the conditionalRefresh and\n refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should\n also be specified\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|refreshWhenChangedPropertyNames|List=Specifies a property by name that when its value changes will automatically perform\n a refresh on this component\n\n <p>\n This can be a comma\n separated list of multiple properties that require this component to be\n refreshed when any of them change. <Br>DO NOT use with progressiveRender\n unless it is know that progressiveRender condition will always be\n satisfied before one of these fields can be changed.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|renderedHtmlOutput|String=Rendering output for the component that will be sent as part of the\n response (can contain static text and HTML)
org.kuali.rice.krad.uif.component.ComponentBase|render|boolean=Indicates whether the component should be rendered in the UI\n\n <p>\n If set to false, the corresponding component template will not be invoked\n (therefore nothing will be rendered to the UI).\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|required|Boolean=Indicates whether the component is required\n\n <p>\n At the general component level required means there is some action the\n user needs to take within the component. For example, within a section it\n might mean the fields within the section should be completed. At a field\n level, it means the field should be completed. This provides the ability\n for the renderers to indicate the required action.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|resetDataOnRefresh|boolean=Indicates whether data contained within the component should be reset (set to default) when the\n component is refreshed
org.kuali.rice.krad.uif.component.ComponentBase|retrieveViaAjax|boolean=When true, this component will render as a placeholder component instead of rendering normally because the\n content will be later retrieved through manually ajax retrieval calls in the js\n\n <p>This flag does not imply any automation, there must be a js call invoked for the content to be retrieved\n by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.\n This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in\n combination with the <b>showLightboxComponent</b> js function which will automatically retrieve the\n real content of a component through ajax if a placeholder component is detected.  This allows for the full\n content to only be retrieved when the lightbox is first opened.\n When this flag is set to true, the forceSessionPersistence\n flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call\n in the future.  This may also be useful for direct custom calls to <b>retrieveComponent</b> function,\n as well, which also relies on the placeholder being present.</p>
org.kuali.rice.krad.uif.component.ComponentBase|rowSpan|int=Number of places the component should take up vertically in the container\n\n <p>\n All components belong to a {@code Container} and are placed using a\n {@code LayoutManager}. This property specifies how many places\n vertically the component should take up within the container. This is\n only applicable for table based layout managers. Default is 1\n </p>\n\n TODO\: this should not be on component interface since it only applies if\n the layout manager supports it, need some sort of layoutOptions map for\n field level options that depend on the manager
org.kuali.rice.krad.uif.component.ComponentBase|selfRendered|boolean=Indicates whether the component contains its own render output (through\n the renderOutput property)\n\n <p>\n If self rendered is true, the corresponding template for the component\n will not be invoked and the renderOutput String will be written to the\n response as is.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|skipInTabOrder|boolean=Flag indicating that this component and its nested components must be skipped when keyboard\n tabbing.
org.kuali.rice.krad.uif.component.ComponentBase|style|String=CSS style string to be applied to the component\n\n <p>\n Any style override or additions can be specified with this attribute.\n This is used by the renderer to set the style attribute on the\n corresponding element.\n </p>\n\n <p>\n e.g. 'color\: \#000000;text-decoration\: underline;'\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|templateName|String=The name for which the template can be invoked by\n\n <p>\n Whether the template name is needed depends on the underlying rendering engine being used. In the example of\n Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is\n simply invoked to execute the template\n </p>\n\n <p>\n e.g. 'uif_text'\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|templateOptionsJSString|String=Builds a string from the underlying <code>Map</code> of template options that will export\n that options as a JavaScript Map for use in js and jQuery plugins
org.kuali.rice.krad.uif.component.ComponentBase|templateOptions|Map=The options that are passed through to the Component renderer\n\n <p>\n The Map key is the option name, with the Map value as the option value. See\n documentation on the particular widget render for available options.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|template|String=The path to the JSP file that should be called to render the component\n\n <p>\n The path should be relative to the web root. An attribute will be available to the component to use under the\n name given by the method {@code getComponentTypeName}. Based on the component type, additional attributes could\n be available for use. See the component documentation for more information on such attributes.\n </p>\n\n <p>\n e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|title|String=The component title\n\n <p>\n Depending on the component can be used in various ways. For example with a Container component the title is\n used to set the header text. For components like controls other other components that render an HTML element it\n is used to set the HTML title attribute.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|toolTip|Tooltip=The Tooltip widget that renders a tooltip with additional information about the element on\n specified trigger event
org.kuali.rice.krad.uif.component.ComponentBase|valign|String=Vertical alignment of the component within its container\n\n <p>\n All components belong to a <code>Container</code> and are placed using a\n <code>LayoutManager</code>. This property specifies how the component\n should be aligned vertically within the container. During the finalize\n phase the CSS vertical-align style will be created for the valign\n setting.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|width|String=Width the component should take up in the container\n\n <p>\n All components belong to a <code>Container</code> and are placed using a\n <code>LayoutManager</code>. This property specifies a width the component\n should take up in the Container. This is not applicable for all layout\n managers. During the finalize phase the CSS width style will be created\n for the width setting.\n </p>\n\n <p>\n e.g. '30%', '55px'\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity=Component security is used to flag permissions that exist in KIM for various component state (like edit and view)\n\n <p>\n In addition, properties such as additional role and permission details can be configured to use when\n checking the KIM permissions\n </p>\n\n <p>\n Security subclasses exist adding on flags apporiate for that component\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|additionalPermissionDetails|Map=Map of key value pairs that should be added as permission details when doing KIM permission checks for this\n component\n\n <p>\n Any details given here that will override details with the same key that were derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|additionalRoleQualifiers|Map=Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this\n component\n\n <p>\n Any qualifiers given here that will override qualifiers with the same key that were derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|componentAttribute|String=Component code that should be sent as permission detail when doing a permission check on this field\n\n <p>\n When the component code is a detail for a permission check, this property can be configured to override the\n component code derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|editAuthz|Boolean=Indicates whether the component has edit authorization and KIM should be consulted
org.kuali.rice.krad.uif.component.ComponentSecurity|idAttribute|String=Id that should be sent as permission detail when doing a permission check on this field\n\n <p>\n By default they system will send the component id as a permission detail, this property can be configured to\n send a different id for the permission check\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|namespaceAttribute|String=Namespace code that should be sent as permission detail when doing a permission check on this field\n\n <p>\n When the namespace code is a detail for a permission check, this property can be configured to override the\n namespace derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|viewAuthz|Boolean=Indicates whether the component has view authorization and KIM should be consulted
org.kuali.rice.krad.uif.component.MethodInvokerConfig=Extends <code>MethodInvoker</code> to add properties for specifying\n a method for invocation within the UIF
org.kuali.rice.krad.uif.component.MethodInvokerConfig|argumentTypes|Class=Declared argument types for the method to be invoked, if not set the types will\n be retrieved based on the target class and target name
org.kuali.rice.krad.uif.component.MethodInvokerConfig|staticMethod|String=Set a fully qualified static method name to invoke,\n e.g. "example.MyExampleClass.myExampleMethod".\n Convenient alternative to specifying targetClass and targetMethod.
org.kuali.rice.krad.uif.component.PropertyReplacer=Configuration for replacing a property value based on a condition\n\n <p>\n A <code>Component</code> may be configured with one or more <code>PropertyReplacer</code> instances. Each defines\n a condition to evaluate during the apply model phase, and if that condition succeeds the property on the component\n given by {@link \#getPropertyName()}, will be replaced with the value given by {@link \#getReplacement()}. Conditions\n are defined using an expression language and may reference any variables available in the component's context.\n </p>\n\n <p>\n Property replacers can be used to change out an entire Component or List/Map of Components. For example, based on a\n condition you might want to display a <code>TextControl</code> or <code>RadioControl</code> for an\n <code>InputField</code>. You can define the field with a text control, then include a property replacer as\n follows\:\n <pre>\n <bean parent\="PropertyReplacer" p\:propertyName\="control"\n p\:condition\="field1 eq '10985'" p\:replacement-ref\="RadioControl"/>\n\n </pre>\n\n Note <code>Component</code> contains a <code>List</code> or property replacers which will be evaluated in the order\n contained within the list. So in the above example if we wanted to now add a further condition which sets the\n control\n to a checkbox, we would just add another property replacer bean.\n <pre>\n   <property name\="propertyReplacers">\n <list>\n <bean parent\="PropertyReplacer" p\:propertyName\="control"\n p\:condition\="field1 eq '10985'" p\:replacement-ref\="RadioControl"/>\n <bean parent\="PropertyReplacer" p\:propertyName\="control"\n p\:condition\="field1 eq '11456'" p\:replacement-ref\="CheckboxControl"/>\n     </list>\n   </property>\n </pre>\n\n Property replacers may be used to substitute primitive properties as well, such as Strings\n </p>
org.kuali.rice.krad.uif.component.PropertyReplacer|condition|String=Gives the expression that should be evaluated to determine whether or not\n the property replacement should be made\n\n <p>\n Expression follows SPEL and may access any model data along with any variables\n available in the context for the Component. The expression should evaluate to\n a boolean. If the resulting boolean is true, the object given by {@link \#getReplacement()}\n will be set as the value for the associated property on the component. If the resulting\n boolean is false, no action will take place\n </p>\n\n <p>\n Note the value does not need to contain the expression placeholder @{}\n </p>
org.kuali.rice.krad.uif.component.PropertyReplacer|propertyName|String=Name of the property on the Component the property replacer is associated with that\n will be set when the condition for the replacer succeeds\n\n <p>\n Note the property name must be readable/writable on the component. The property name may\n be nested, and include Map or List references.\n </p>
org.kuali.rice.krad.uif.component.PropertyReplacer|replacement|Object=Gives the Object that should be used to set the property value if the replacers condition\n evaluates to true\n\n <p>\n Note the configured Object must be valid for the type given by the property on the Component. Standard\n property editors will be used for setting the property value\n </p>
org.kuali.rice.krad.uif.container.AccordionGroup=Accordion group class used to stack groups by there header titles in an accordion layout
org.kuali.rice.krad.uif.container.AccordionGroup|accordionWidget|Accordion=Gets the widget which contains any configuration for the accordion widget component used to render\n this AccordionGroup
org.kuali.rice.krad.uif.container.ActiveCollectionFilter=Collection filter that removes inactive lines from a collection whose line types\n implement the <code>Inactivatable</code> interface
org.kuali.rice.krad.uif.container.CollectionGroup=Group that holds a collection of objects and configuration for presenting the\n collection in the UI. Supports functionality such as add line, line actions,\n and nested collections.\n\n <p>\n Note the standard header/footer can be used to give a header to the\n collection as a whole, or to provide actions that apply to the entire\n collection\n </p>\n\n <p>\n For binding purposes the binding path of each row field is indexed. The name\n property inherited from <code>ComponentBase</code> is used as the collection\n name. The collectionObjectClass property is used to lookup attributes from\n the data dictionary.\n </p>
org.kuali.rice.krad.uif.container.CollectionGroupSecurity=Collection Group security is used to flag that permissions exist for the associated {@link CollectionGroup}\n in KIM and should be checked to determine the associated group, line, and field state. In particular this adds\n the edit line and view line flags\n\n <p>\n In addition, properties such as additional role and permission details can be configured to use when\n checking the KIM permissions\n </p>
org.kuali.rice.krad.uif.container.CollectionGroupSecurity|editLineAuthz|boolean=Indicates whether the collection group line has edit authorization and KIM should be consulted
org.kuali.rice.krad.uif.container.CollectionGroupSecurity|viewLineAuthz|boolean=Indicates whether the collection group line has view authorization and KIM should be consulted
org.kuali.rice.krad.uif.container.CollectionGroup|activeCollectionFilter|CollectionFilter=Collection filter instance for filtering the collection data when the\n showInactive flag is set to false
org.kuali.rice.krad.uif.container.CollectionGroup|addBlankLineAction|Action=The add blank line {@link Action} field rendered when renderAddBlankLineButton is true
org.kuali.rice.krad.uif.container.CollectionGroup|addItemCssClass|String=The css style class that will be added on the add item group or row
org.kuali.rice.krad.uif.container.CollectionGroup|addLineActions|List=Component fields that should be rendered for the add line.\n\n <p>This is generally the add action (button) but can be configured to contain additional\n components\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|addLineBindingInfo|BindingInfo=<code>BindingInfo</code> instance for the add line property used to\n determine the full binding path. If add line name given\n {@link \#getAddLabel} then it is set as the binding name on the\n binding info. Add line label and binding info are not required, in which\n case the framework will manage the new add line instances through a\n generic map (model must extend UifFormBase)
org.kuali.rice.krad.uif.container.CollectionGroup|addLineItems|List=List of <code>Component</code> instances that should be rendered for the\n collection add line (if enabled). If not set, the default group's items\n list will be used
org.kuali.rice.krad.uif.container.CollectionGroup|addLineLabel|Message=<code>Message</code> instance for the add line label
org.kuali.rice.krad.uif.container.CollectionGroup|addLinePlacement|String=Indicates the add line placement\n\n <p>\n Valid values are 'TOP' or 'BOTTOM'. The default is 'TOP'. When the value is 'BOTTOM' the blank line will be\n added\n to the end of the collection.\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|addLinePropertyName|String=Name of the property that contains an instance for the add line. If set\n this is used with the binding info to create the path to the add line.\n Can be left blank in which case the framework will manage the add line\n instance in a generic map.
org.kuali.rice.krad.uif.container.CollectionGroup|addViaLightBoxAction|Action=The {@link Action} that will be displayed that will open the add line group in a lightbox
org.kuali.rice.krad.uif.container.CollectionGroup|addViaLightBox|boolean=Indicates that a add action should be rendered and that the add group be displayed in a lightbox
org.kuali.rice.krad.uif.container.CollectionGroup|bindingInfo|BindingInfo=Determines the binding path for the collection. Used to get the\n collection value from the model in addition to setting the binding path\n for the collection attributes
org.kuali.rice.krad.uif.container.CollectionGroup|collectionGroupBuilder|CollectionGroupBuilder=<code>CollectionGroupBuilder</code> instance that will build the\n components dynamically for the collection instance
org.kuali.rice.krad.uif.container.CollectionGroup|collectionLookup|QuickFinder=Instance of the <code>QuickFinder</code> widget that configures a multi-value lookup for the collection\n\n <p>\n If the collection lookup is enabled (by the render property of the quick finder), {@link\n \#getCollectionObjectClass()} will be used as the data object class for the lookup (if not set). Field\n conversions need to be set as usual and will be applied for each line returned\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|collectionObjectClass|Class=Object class the collection maintains. Used to get dictionary information\n in addition to creating new instances for the collection when necessary
org.kuali.rice.krad.uif.container.CollectionGroup|displayCollectionSize|int=The number of records to display for a collection
org.kuali.rice.krad.uif.container.CollectionGroup|filters|List=List of {@link CollectionFilter} instances that should be invoked to filter the collection before\n displaying
org.kuali.rice.krad.uif.container.CollectionGroup|highlightAddItem|boolean=Indicates whether the add item group or row should be styled with the \#addItemCssClass
org.kuali.rice.krad.uif.container.CollectionGroup|highlightNewItems|boolean=Indicates whether new items should be styled with the \#newItemsCssClass
org.kuali.rice.krad.uif.container.CollectionGroup|includeLineSelectionField|boolean=Indicates whether lines of the collection group should be selected by rendering a\n field for each line that will allow selection\n\n <p>\n For example, having the select field enabled could allow selecting multiple lines from a search\n to return (multi-value lookup)\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|lineActions|List=Action fields that should be rendered for each collection line. Example\n line action is the delete action
org.kuali.rice.krad.uif.container.CollectionGroup|lineSelectPropertyName|String=When {@link \#isIncludeLineSelectionField()} is true, gives the name of the property the select field\n should bind to\n\n <p>\n Note if no prefix is given in the property name, such as 'form.', it is assumed the property is\n contained on the collection line. In this case the binding path to the collection line will be\n appended. In other cases, it is assumed the property is a list or set of String that will hold the\n selected identifier strings\n </p>\n\n <p>\n This property is not required. If not the set the framework will use a property contained on\n <code>UifFormBase</code>\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|newItemsCssClass|String=The css style class that will be added on new items
org.kuali.rice.krad.uif.container.CollectionGroup|propertyName|String=Name of the property (relative to the parent object) the component binds\n to
org.kuali.rice.krad.uif.container.CollectionGroup|renderAddBlankLineButton|boolean=Indicates that a button will be rendered that allows the user to add blank lines to the collection\n\n <p>\n The button will be added separately from the collection items. The default add line wil not be rendered. The\n action of the button will call the controller, add the blank line to the collection and do a component refresh.\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|renderAddLine|boolean=Indicates whether an add line should be rendered for the collection
org.kuali.rice.krad.uif.container.CollectionGroup|renderInactiveToggleButton|boolean=
org.kuali.rice.krad.uif.container.CollectionGroup|renderLineActions|boolean=Indicates whether the action column for the collection should be rendered
org.kuali.rice.krad.uif.container.CollectionGroup|renderSaveLineActions|boolean=Indicates whether the save line actions should be rendered
org.kuali.rice.krad.uif.container.CollectionGroup|showInactiveLines|boolean=Indicates whether inactive collections lines should be displayed\n\n <p>\n Setting only applies when the collection line type implements the\n <code>Inactivatable</code> interface. If true and showInactive is\n set to false, the collection will be filtered to remove any items\n whose active status returns false\n </p>
org.kuali.rice.krad.uif.container.CollectionGroup|subCollections|List=List of <code>CollectionGroup</code> instances that are sub-collections\n of the collection represented by this collection group
org.kuali.rice.krad.uif.container.CollectionGroup|totalColumns|List=
org.kuali.rice.krad.uif.container.CollectionGroup|useServerPaging|boolean=Gets useServerPaging, the flag that indicates whether server side paging is enabled.  Defaults to false.
org.kuali.rice.krad.uif.container.DialogGroup=Special type of <code>Group</code> that presents a the content for a modal dialog\n\n <p>\n This type of group will be hidden when the main view is displayed. It will be used as\n content inside the LightBox widget when the modal dialog is displayed.\n For convenience, this group contains a standard set of components for commonly used modal dialogs\n <ul>\n <li>a prompt to display in the lightbox</li>\n <li>an optional explanation <code>InputField</code> for holding the user's textual response</li>\n <li>a set of response options for the user to choose from</li>\n </ul>\n\n <p>\n The DialogGroup may also serve as a base class for more complex dialogs.\n The default settings for this DialogGroup is to display a prompt message\n with two buttons labeled OK and Cancel.\n The optional explanation <code>TextAreaControl</code> is hidden by default.\n </p>\n\n <p>\n The prompt text, number of user options and their corresponding label are configurable.\n The <code>InputField</code> for the explanation is <code>TextAreaControl</code> by default.\n It may be configured to other types of InputFields.\n The Component for ResponseInputField is a <code>HorizontalCheckboxGroup</code> by default.\n JQuery styling is then used to style the checkboxes as buttons. The ResponseInputField may\n be configured to other <code>InputField</code> types.\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|availableResponses|List=Gets the choices provided for user response.\n\n <p>\n A List of KeyValue pairs for each of the choices provided on this dialog.\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|displayExplanation|boolean=determines if the explanation InputField is to be displayed in this dialog\n\n <p>\n False by default.\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|explanation|InputField=Retrieves the explanation InputField used to gather user input text from the dialog\n\n <p>\n By default, the control for this input is configured as a TextAreaControl. It may be configured for\n other types of input fields.\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|onDialogResponseScript|String=Script that will be invoked when the response event is thrown\n\n <p>\n The dialog group will throw a custom event type 'dialogresponse.uif' when a change occurs for the response\n input field (for example one of the response options is selected). Script given here will bind to that\n event as a handler\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|onShowDialogScript|String=Script that will get invoked when the dialog group is shown\n\n <p>\n Initially a dialog group will either be hidden in the DOM or not present at all (if retrieved via Ajax).\n When the dialog is triggered and shown, the 'showdialog.uif' event will be thrown and this script will\n be executed\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|promptText|String=Returns the text to be displayed as the prompt or main message in this simple dialog
org.kuali.rice.krad.uif.container.DialogGroup|prompt|MessageField=Retrieves the Message element for this dialog
org.kuali.rice.krad.uif.container.DialogGroup|responseInputField|InputField=Retrieves the InputField containing the choices displayed in this dialog\n\n <p>\n By default, this InputField is configured to be a HorizontalCheckboxControl.\n Styling is then used to make the checkboxes appear to be buttons.\n The values of the availableResponses List are used as labels for the "buttons".\n </p>
org.kuali.rice.krad.uif.container.DialogGroup|reverseButtonOrder|boolean=Determines the positioning order of the choices displayed on this dialog\n\n <p>\n Some page designers like the positive choice on the left and the negative choice on the right.\n Others, prefer just the opposite. This allows the order to easily be switched.\n </p>
org.kuali.rice.krad.uif.container.ELCollectionFilter=Collection filter that evaluates a configured el expression against each line
org.kuali.rice.krad.uif.container.ELCollectionFilter|expression|String=Expression that will be evaluated for each line to determine whether the line should be filtered\n\n <p>\n If expression passes, the line will remain in the collection, otherwise be filtered out. The expression given\n should evaluate to a boolean\n </p>
org.kuali.rice.krad.uif.container.Group=Container that holds a list of <code>Field</code> or other <code>Group</code>\n instances\n\n <p>\n Groups can exist at different levels of the <code>View</code>, providing\n conceptual groupings such as the page, section, and group. In addition, other\n group types can be created to add behavior like collection support\n </p>\n\n <p>\n <code>Group</code> implementation has properties for defaulting the binding\n information (such as the parent object path and a binding prefix) for the\n fields it contains. During the phase these properties (if given) are set on\n the fields contained in the <code>Group</code> that implement\n <code>DataBinding</code>, unless they have already been set on the field.\n </p>
org.kuali.rice.krad.uif.container.Group|disclosure|Disclosure=Disclosure widget that provides collapse/expand functionality for the\n group
org.kuali.rice.krad.uif.container.Group|fieldBindByNamePrefix|String=Binding prefix string to set on each of the groups <code>DataField</code> instances\n\n <p>\n As opposed to setting the bindingPrefix on each attribute field instance,\n it can be set here for the group. During initialize the string will then\n be set on each attribute field instance if the bindingPrefix is blank and\n not a form field\n </p>
org.kuali.rice.krad.uif.container.Group|fieldBindingObjectPath|String=Object binding path to set on each of the group's\n <code>InputField</code> instances\n\n <p>\n When the attributes of the group belong to a object whose path is\n different from the default then this property can be given to set each of\n the attributes instead of setting the model path on each one. The object\n path can be overridden at the attribute level. The object path is set to\n the fieldBindingObjectPath during the initialize phase.\n </p>
org.kuali.rice.krad.uif.container.Group|items|List=
org.kuali.rice.krad.uif.container.Group|scrollpane|Scrollpane=Scrollpane widget that provides scrolling functionality for the\n group
org.kuali.rice.krad.uif.container.LightTable=LightTable is a light-weight collection table implementation that supports a subset of features,\n Current known supported features are\:\n\n <ul>\n <li>DataField</li>\n <li>InputField with TextControl, CheckboxControl, or single SelectControl</li>\n <li>MessageField</li>\n <li>LinkField</li>\n <li>ActionField</li>\n <li>ImageField</li>\n <li>most RichTable options</li>\n <li>FieldGroup containing only Actions, Image, Messages, or Links</li>\n <li>SpringEL for String properties on supported components only</li>\n <li>SpringEL specifically for the render property</li>\n </ul>\n\n Other features are not guaranteed to work, but may work at your own risk.  The intent of this table is to be a\n light-weight alternative to the fully featured table already available in KRAD and it is more suited to displaying\n large sets of simple data to the user.
org.kuali.rice.krad.uif.container.LightTable|bindingInfo|BindingInfo=The bindingInfo for this collection table, containg the property path and other options
org.kuali.rice.krad.uif.container.LightTable|conditionalRowCssClasses|Map=The row css classes for the rows of this layout\n\n <p>To set a css class on all rows, use "all" as a key.  To set a\n class for even rows, use "even" as a key, for odd rows, use "odd".\n Use a one-based index to target a specific row by index.  SpringEL can be\n used as a key and the expression will be evaluated; if evaluated to true, the\n class(es) specified will be applied.</p>
org.kuali.rice.krad.uif.container.LightTable|currentColumnValue|String=
org.kuali.rice.krad.uif.container.LightTable|propertyName|String=The propertyName of the list backing this collection
org.kuali.rice.krad.uif.container.LightTable|richTable|RichTable=The richTable widget definition for this table for setting dataTable javascript options
org.kuali.rice.krad.uif.container.LinkGroup=Special <code>Group</code> that presents a grouping on links, which can\n also include nested groupings of links\n\n <p>\n Generally this group outputs a list of <code>LinkField</code> instances, however\n it can be configured to place separates between the fields and also delimiters\n for the grouping\n </p>
org.kuali.rice.krad.uif.container.LinkGroup|emptyLinkGroupString|String=String that will be outputted when the list backing the\n link group is empty
org.kuali.rice.krad.uif.container.LinkGroup|groupBeginDelimiter|String=String that will be rendered before the group of links are rendered\n\n <p>\n If the list of links is empty, the start delimiter will not be\n rendered but instead the \#emptyLinkGroupString will be outputted\n </p>\n\n e.g. '['
org.kuali.rice.krad.uif.container.LinkGroup|groupEndDelimiter|String=String that will be rendered after the group of links are rendered\n\n <p>\n If the list of links is empty, the end delimiter will not be\n rendered but instead the \#emptyLinkGroupString will be outputted\n </p>\n\n e.g. ']'
org.kuali.rice.krad.uif.container.LinkGroup|linkSeparator|String=String that will be rendered between each rendered link\n\n e.g. '|'
org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter=Collection filter for maintenance groups that removes inactive lines if certain\n conditions are met
org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter|oldBindingObjectPath|String=Gives the binding path to the old data object for comparison, used to\n get the active status of the old object
org.kuali.rice.krad.uif.container.NavigationGroup=Special <code>Group</code> that renders a navigation section\n\n <p>\n Only supports <code>Action</code> instances within the container. These\n are used to provide the items (or individual links) within the navigation.\n The navigationType determines how the navigation will be rendered (menu,\n tabs, dropdown, ...)\n </p>
org.kuali.rice.krad.uif.container.NavigationGroup|navigationType|String=Type of navigation that should be rendered. For example a menu or tab\n navigation. Used by the rendering script to choose an appropriate plug-in
org.kuali.rice.krad.uif.container.NodePrototype=
org.kuali.rice.krad.uif.container.NodePrototype|dataGroupPrototype|Group=
org.kuali.rice.krad.uif.container.NodePrototype|labelPrototype|Message=
org.kuali.rice.krad.uif.container.PageGroup=A PageGroup represents a page of a View.\n\n <p>\n PageGroups should only be used with a View component.  The contain the main content that will be seen by the\n user using the View.  Like all other groups, PageGroup can contain items, headers and footers.  Pages also\n have their own BreadcrumbItem.\n </p>
org.kuali.rice.krad.uif.container.PageGroup|autoFocus|boolean=When this is true, the first field of the kualiForm will be focused by\n default, unless the parameter focusId is set on the form (by an\n actionField), then that field will be focused instead. When this setting\n if false, no field will be focused.
org.kuali.rice.krad.uif.container.PageGroup|breadcrumbItem|BreadcrumbItem=The breadcrumbItem for this page.  This is the item that (generally) appears last in the breadcrumb list.\n\n <p>\n If a label is not explicitly defined, the label is retrieved from the headerText of the PageGroup's header.\n If this is also not defined, the breadcrumbItem is NOT rendered.  The url properties do not need to be provided\n for this breadcrumbItem because it is automatically determined based on the this PageGroup's pageId, viewId,\n and controllerMapping retrieved from the initial controller request.\n </p>
org.kuali.rice.krad.uif.container.PageGroup|breadcrumbOptions|PageBreadcrumbOptions=The breadcrumbOptions specific to this page.\n\n <p>\n Important note\: breadcrumbOptions for preViewBreadcrumbs, prePageBreadcrumbs, and\n breadcrumbOverrides are inherited from the View if not explicitly set from the PageGroup level's\n breadcrumbOptions\n (if they contain a value at the view level and the property is null at the page level - default behavior).\n Explicitly providing an empty list or setting these properties at the PageGroup level will\n override this inheritance.\n </p>
org.kuali.rice.krad.uif.container.PageGroup|stickyFooter|boolean=When true, this page's footer will become sticky (fixed) at the bottom of the window
org.kuali.rice.krad.uif.container.SidebarNavigationGroup=A navigation group which renders a menu with items, that is shown at the side of the page with collapse functionality\n\n <p>Items of this menu should only be of {@link org.kuali.rice.krad.uif.element.Header}, {@link Action}, and\n {@link ToggleMenu} types.  Actions and ToggleMenus must have icons to render correctly when using the collapse\n functionality, but will inherit the defaultItemIconClass if their iconClass properties are not set.</p>
org.kuali.rice.krad.uif.container.SidebarNavigationGroup|closedToggleIconClass|String=Icon class to use to render a closed icon for sub menus (the {@link ToggleMenu} items) that exist\n in this navigation menu
org.kuali.rice.krad.uif.container.SidebarNavigationGroup|defaultItemIconClass|String=The default css class to use for the icons of the items which exist in this navigation menu if they are not set\n on the items themselves (icons are required by {@link Action} and {@link ToggleMenu} items in this menu)
org.kuali.rice.krad.uif.container.SidebarNavigationGroup|openedToggleIconClass|String=Icon class to use to render a opened icon for sub menus (the {@link ToggleMenu} items) that exist\n in this navigation menu
org.kuali.rice.krad.uif.container.SidebarNavigationGroup|renderCollapse|boolean=When true, render the collapse icon (an icon that the user can click to close/open the sidebar navigation)
org.kuali.rice.krad.uif.container.TabGroup=A group that presents its child Groups as tabs.  Items in this group's item list must be Groups\n themselves.
org.kuali.rice.krad.uif.container.TabGroup|tabsWidget|Tabs=Gets the widget which contains any configuration for the tab widget component used to render\n this TabGroup
org.kuali.rice.krad.uif.container.TreeGroup=Group component that is backed by a <code>Tree</code> data structure and typically\n rendered as a tree in the user interface
org.kuali.rice.krad.uif.container.TreeGroup|bindingInfo|BindingInfo=
org.kuali.rice.krad.uif.container.TreeGroup|defaultNodePrototype|NodePrototype=
org.kuali.rice.krad.uif.container.TreeGroup|nodePrototypeMap|Map=
org.kuali.rice.krad.uif.container.TreeGroup|propertyName|String=
org.kuali.rice.krad.uif.container.TreeGroup|treeGroups|Tree=
org.kuali.rice.krad.uif.container.TreeGroup|tree|Tree=
org.kuali.rice.krad.uif.control.CheckboxControl=Represents a HTML Checkbox control. Typically used for boolean attributes (where the\n value is either on/off, true/false)
org.kuali.rice.krad.uif.control.CheckboxControl|checkboxLabel|String=Returns the label text for this checkbox
org.kuali.rice.krad.uif.control.CheckboxControl|inlineComponents|List=Gets the inlineComponents used by index in the checkboxLabel that has rich message component index tags
org.kuali.rice.krad.uif.control.CheckboxControl|richLabelMessage|Message=Gets the Message that represents the rich message content of the label if labelText is using rich message tags.\n <b>DO NOT set this\n property directly unless you need full control over the message structure.</b>
org.kuali.rice.krad.uif.control.CheckboxControl|value|String=The value that will be submitted when the checkbox control is checked\n\n <p>\n Value can be left blank, in which case the checkbox will submit a boolean value that\n will populate a boolean property. In cases where the checkbox needs to submit another value (for\n instance possibly in the checkbox group) the value can be set which will override the default.\n </p>
org.kuali.rice.krad.uif.control.CheckboxGroupControl=Represents a group of HTML checkbox controls. Provides preset options for the\n user to choose by a series of checkbox controls. Only or more options can be\n select
org.kuali.rice.krad.uif.control.CheckboxGroupControl|delimiter|String=Delimiter string to be rendered between the checkbox group options\n\n <p>\n defaults to none.\n </p>
org.kuali.rice.krad.uif.control.CheckboxGroupControl|fieldsetClasses|List=Get fieldsetClasses which are the classes that will be applied to this component's fieldset when generated
org.kuali.rice.krad.uif.control.ControlBase=Base class for all <code>Control</code> implementations
org.kuali.rice.krad.uif.control.ControlBase|disabledReason|String=If the control is disabled, gives a reason for why which will be displayed as a tooltip\n on the control
org.kuali.rice.krad.uif.control.ControlBase|disabledWhenChangedPropertyNames|List=Gets the property names of fields that when changed, will disable this component
org.kuali.rice.krad.uif.control.ControlBase|disabled|boolean=Indicates whether the control is disabled (doesn't allow input)
org.kuali.rice.krad.uif.control.ControlBase|enabledWhenChangedPropertyNames|List=Gets the property names of fields that when changed, will enable this component
org.kuali.rice.krad.uif.control.ControlBase|evaluateDisabledOnKeyUp|boolean=Evaluate the disable condition on controls which disable it on each key up event
org.kuali.rice.krad.uif.control.ControlBase|tabIndex|int=Unique index of the control within the tab order\n\n <p>\n Tab index provides a way to set the order users will tab through the\n controls. The control with index 1 will receive focus when the page is\n rendered. Tabing from the field will then take the user to the control\n with index 2, then index 3, and so on.\n </p>
org.kuali.rice.krad.uif.control.FileControl=Represents a HTML File control, generally rendered as an input control with\n type 'file'. Allows user to upload a file to the application
org.kuali.rice.krad.uif.control.FileControl|size|int=Retrieves the configured size for the control, which reflects the display width in characters for\n the control within the UI
org.kuali.rice.krad.uif.control.GroupControl=Represents a group control, which is a special control to handle\n the input of a KIM Group by group name
org.kuali.rice.krad.uif.control.GroupControl|groupIdPropertyName|String=The name of the property on the parent object that holds the group id
org.kuali.rice.krad.uif.control.GroupControl|namespaceCodePropertyName|String=The name of the property on the parent object that holds the group namespace
org.kuali.rice.krad.uif.control.HiddenControl=Represents a HTML Hidden control, generally rendered as an input control of\n type 'hidden'. This is used to hold a value that the user will not see but\n will be posted back with the form
org.kuali.rice.krad.uif.control.OptionListControl=OptionListControl is used for listing out options from an option finder or options list.  This control can show all\n items in the options or it can show only the selected options (if backed by a propertyName).  One use case for this\n control is to use it in combination with UifKeyValueLocation to provide a list of locations retrieved through a\n KeyValuesFinder.
org.kuali.rice.krad.uif.control.OptionListControl|itemCssClass|String=The item css class to add to each li element of the list
org.kuali.rice.krad.uif.control.OptionListControl|selectedItemCssClass|String=The css class to add to each item of the list which matches a value in the property
org.kuali.rice.krad.uif.control.OptionListControl|showOnlySelected|boolean=When true, only show the "selected" options (items which match a value in the property of the field).  Otherwise,\n show all options.
org.kuali.rice.krad.uif.control.PasswordControl=Represents a HTML password text control, rendered as a input field of type\n 'password'. This can receive and display a mask for a single value.
org.kuali.rice.krad.uif.control.PasswordControl|maxLength|Integer=Maximum number of characters that can be inputted\n\n <p>If not set on control, max length of field will be used</p>
org.kuali.rice.krad.uif.control.PasswordControl|minLength|Integer=Minimum number of characters that can be inputted\n\n <p>If not set on control, min length of field will be used</p>
org.kuali.rice.krad.uif.control.PasswordControl|size|int=
org.kuali.rice.krad.uif.control.PasswordControl|watermarkText|String=Gets the watermark text for this PasswordControl.\n\n <p>\n A watermark typically appears as light gray text within the Password input element whenever the\n element is empty and does not have focus. This provides a hint to the user as to what the input\n is used for, or the type of input that is required.\n </p>
org.kuali.rice.krad.uif.control.RadioGroupControl=Represents a group of HTML Radio controls. Provides preset options for the\n user to choose by a series of radio controls. Only one option can be selected
org.kuali.rice.krad.uif.control.RadioGroupControl|delimiter|String=Delimiter string to be rendered between the radio group options, defaults\n to none
org.kuali.rice.krad.uif.control.RadioGroupControl|fieldsetClasses|List=Get fieldsetClasses which are the classes that will be applied to this component's fieldset when generated
org.kuali.rice.krad.uif.control.SelectControl=Represents a HTML Select control. Provides preset options for the User to\n choose from by a drop down
org.kuali.rice.krad.uif.control.SelectControl|multiple|boolean=Indicates whether multiple values can be selected. Defaults to false\n <p>\n If multiple is set to true, the underlying property must be of Array type\n </p>
org.kuali.rice.krad.uif.control.SelectControl|size|int=Vertical size of the control. This determines how many options can be\n seen without using the control scoll bar. Defaults to 1
org.kuali.rice.krad.uif.control.SpinnerControl=Text control that as decorated with a spinner widget (allowing the control value to be modified using the\n spinner)
org.kuali.rice.krad.uif.control.SpinnerControl|spinner|Spinner=Spinner widget that should decorate the control
org.kuali.rice.krad.uif.control.TextAreaControl=Represents a HTML TextArea control. Generally used for values that are very\n large (such as a description)
org.kuali.rice.krad.uif.control.TextAreaControl|cols|int=Number of columns the control should span (vertical length)
org.kuali.rice.krad.uif.control.TextAreaControl|maxLength|Integer=Maximum number of characters that can be inputted\n\n <p>If not set on control, max length of field will be used</p>
org.kuali.rice.krad.uif.control.TextAreaControl|minLength|Integer=Minimum number of characters that can be inputted\n\n <p>If not set on control, min length of field will be used</p>
org.kuali.rice.krad.uif.control.TextAreaControl|rows|int=Number of rows the control should span (horizontal length)
org.kuali.rice.krad.uif.control.TextAreaControl|textExpand|boolean=If set to true, this control will have a button which can be clicked to expand the text area through\n a popup window so the user has more space to type and see the data they are entering in this text field
org.kuali.rice.krad.uif.control.TextAreaControl|watermarkText|String=
org.kuali.rice.krad.uif.control.TextControl=Represents a HTML Text control, generally rendered as a input field of type\n 'text'. This can display and receive a single value
org.kuali.rice.krad.uif.control.TextControl|datePicker|DatePicker=Renders a calendar that can be used to select a date value for the text\n control. The <code>Calendar</code> instance contains configuration such\n as the date format string
org.kuali.rice.krad.uif.control.TextControl|maxLength|Integer=Maximum number of characters that can be inputted\n\n <p>If not set on control, max length of field will be used</p>
org.kuali.rice.krad.uif.control.TextControl|minLength|Integer=Minimum number of characters that can be inputted\n\n <p>If not set on control, min length of field will be used</p>
org.kuali.rice.krad.uif.control.TextControl|size|int=Retrieves the configured size for the control, which reflects the display width in characters for\n the control within the UI
org.kuali.rice.krad.uif.control.TextControl|textExpand|boolean=If set to true, this control will have a button which can be clicked to expand the text area through\n a popup window so the user has more space to type and see the data they are entering in this text field.
org.kuali.rice.krad.uif.control.TextControl|watermarkText|String=Gets the watermark text for this TextControl.\n\n <p>\n A watermark typically appears as light gray text within the text input element whenever the\n element is empty and does not have focus. This provides a hint to the user as to what the input\n is used for, or the type of input that is required.\n </p>
org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase=
org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase|addBlankOption|boolean=Indicates whether a blank option should be included as a valid option
org.kuali.rice.krad.uif.control.UserControl=Represents a user control, which is a special control to handle the input of a Person
org.kuali.rice.krad.uif.control.UserControl|personNamePropertyName|String=The name of the property on the parent object that holds the person name
org.kuali.rice.krad.uif.control.UserControl|personObjectPropertyName|String=The name of the property on the parent object that holds the person object
org.kuali.rice.krad.uif.control.UserControl|principalIdPropertyName|String=The name of the property on the parent object that holds the principal id
org.kuali.rice.krad.uif.element.Action=Field that presents an action that can be taken on the UI such as submitting\n the form or invoking a script
org.kuali.rice.krad.uif.element.ActionSecurity=Action field security adds the take action flags to the standard component security
org.kuali.rice.krad.uif.element.ActionSecurity|performActionAuthz|boolean=Indicates whether the action field has take action authorization and KIM should be consulted
org.kuali.rice.krad.uif.element.ActionSecurity|performLineActionAuthz|boolean=Indicates whether the line action field has take action authorization and KIM should be consulted
org.kuali.rice.krad.uif.element.Action|actionEvent|String=Name of the event that will be set when the action is invoked\n\n <p>\n Action events can be looked at by the view or components in order to render differently depending on\n the action requested.\n </p>
org.kuali.rice.krad.uif.element.Action|actionIconPlacement|String=
org.kuali.rice.krad.uif.element.Action|actionImagePlacement|String=
org.kuali.rice.krad.uif.element.Action|actionImage|Image=Image to use for the action\n\n <p>\n When the action image component is set (and render is true) the image will be\n used to present the action as opposed to the default (input submit). For\n action link templates the image is used for the link instead of the\n action link text\n </p>
org.kuali.rice.krad.uif.element.Action|actionLabel|String=Label text for the action\n\n <p>\n The label text is used by the template renderers to give a human readable\n label for the action. For buttons this generally is the button text,\n while for an action link it would be the links displayed text\n </p>
org.kuali.rice.krad.uif.element.Action|actionParameters|Map=Parameters that should be sent when the action is invoked\n\n <p>\n Action renderer will decide how the parameters are sent for the action\n (via script generated hiddens, or script parameters, ...)\n </p>\n\n <p>\n Can be set by other components such as the <code>CollectionGroup</code>\n to provide the context the action is in (such as the collection name and\n line the action applies to)\n </p>
org.kuali.rice.krad.uif.element.Action|actionScript|String=Client side javascript to be executed when this actionField is clicked\n\n <p>\n This overrides the default action for this Action so the method\n called must explicitly submit, navigate, etc. through js, if necessary.\n In addition, this js occurs AFTER onClickScripts set on this field, it\n will be the last script executed by the click event. Sidenote\: This js is\n always called after hidden actionParameters and methodToCall methods are\n written by the js to the html form.\n </p>
org.kuali.rice.krad.uif.element.Action|actionUrl|UrlInfo=Url to open when the action item is selected\n\n <p>\n This makes the action behave like a standard link. Instead of posting the form, the configured URL will\n simply be opened (using window.open). For using standard post actions these does not need to be configured.\n </p>
org.kuali.rice.krad.uif.element.Action|additionalSubmitData|Map=Map of additional data that will be posted when the action is invoked\n\n <p>\n Each entry in this map will be sent as a request parameter when the action is chosen. Note this in\n addition to the form data that is sent. For example, suppose the model contained a property named\n number and a boolean named showActive, we can send values for this properties by adding the following\n entries to this map\:\n {'number'\:'a13', 'showActive', 'true'}\n </p>\n\n <p>\n The additionalSubmitData map is different from the actionParameters map. All name/value pairs given as\n actionParameters populated the form map actionParameters. While name/value pair given in additionalSubmitData\n populate different form (model) properties\n </p>
org.kuali.rice.krad.uif.element.Action|ajaxReturnType|String=Gets the return type for the ajax call\n\n <p>\n The ajax return type indicates how the response content will be handled in the client. Typical\n examples include updating a component, the page, or doing a redirect.\n </p>
org.kuali.rice.krad.uif.element.Action|ajaxSubmit|boolean=When this property is set to true it will submit the form using Ajax instead of the browser submit. Will default\n to updating the page contents
org.kuali.rice.krad.uif.element.Action|clearDirtyOnAction|boolean=True to make this action clear the dirty flag before submitting\n\n <p>This will clear both the dirtyForm flag on the form and the count of fields considered dirty on the\n client-side.  This will only be performed if this action is a request based action.</p>
org.kuali.rice.krad.uif.element.Action|dirtyOnAction|boolean=When true, this action will mark the form dirty by incrementing the dirty field count, but if this action\n refreshes the entire view this will be lost (most actions only refresh the page)\n\n <p>This will increase count of fields considered dirty on the\n client-side by 1.  This will only be performed if this action is a request based action.</p>
org.kuali.rice.krad.uif.element.Action|disableBlocking|boolean=Indicates whether blocking for the action should be disabled\n\n <p>\n By default when an action is invoked part of the page or the entire window is blocked until\n the action completes. If this property is set to true the blocking will not be displayed.\n </p>\n\n <p>\n Currently if an action returns a file download, this property should be set to true. If not, the blocking\n will never get unblocked (because the page does not get notification a file was downloaded)\n </p>
org.kuali.rice.krad.uif.element.Action|disabledReason|String=If the action field is disabled, gives a reason for why which will be displayed as a tooltip\n on the action field (button)
org.kuali.rice.krad.uif.element.Action|disabledWhenChangedPropertyNames|List=Gets the property names of fields that when changed, will disable this component
org.kuali.rice.krad.uif.element.Action|disabled|boolean=Indicates whether the action (input or button) is disabled (doesn't allow interaction)
org.kuali.rice.krad.uif.element.Action|displayResponseInLightBox|boolean=Indicates if the action response should be displayed in a lightbox
org.kuali.rice.krad.uif.element.Action|enabledWhenChangedPropertyNames|List=Gets the property names of fields that when changed, will enable this component
org.kuali.rice.krad.uif.element.Action|errorCallback|String=Gets the script which will be invoked when the action fails due to problems in the ajax call or\n the return of an incident report\n\n <p>\n The errorCallback can carry out custom logic after a failed ajax submission. The\n value can contain one or more script statements. In addition, the response contents can be accessed\n through the variable 'responseContents'\n </p>\n\n <p>\n Examples 'handleFailedUpdate(responseContents);'\n </p>\n\n <p>\n The errorCallback may only be specified when {@link \#isAjaxSubmit()} is true\n </p>
org.kuali.rice.krad.uif.element.Action|evaluateDisabledOnKeyUp|boolean=Evaluate the disable condition on controls which disable it on each key up event
org.kuali.rice.krad.uif.element.Action|focusOnIdAfterSubmit|String=The element to place focus on in the new page after the new page\n is retrieved.\n\n <p>The following are allowed\:\n <ul>\n <li>A valid element id</li>\n <li>"FIRST" will focus on the first visible input element on the form</li>\n <li>"SELF" will result in this Action being focused (action bean defaults to "SELF")</li>\n <li>"LINE_FIRST" will result in the first input of the collection line to be focused (if available)</li>\n <li>"NEXT_INPUT" will result in the next available input that exists after this Action to be focused\n (only if this action still exists on the page)</li>\n </ul>\n </p>
org.kuali.rice.krad.uif.element.Action|iconClass|String=The css class (some which exist in bootstrap css) to use to render an icon for this action
org.kuali.rice.krad.uif.element.Action|jumpToIdAfterSubmit|String=
org.kuali.rice.krad.uif.element.Action|jumpToNameAfterSubmit|String=The name to jump to in the next page, the element with this name will be\n jumped to automatically when the new page is retrieved after a submit.\n Passing in nothing for both jumpToIdAfterSubmit and jumpToNameAfterSubmit\n will result in this Action being jumped to by default if it is\n present on the new page. WARNING\: jumpToIdAfterSubmit always takes\n precedence over jumpToNameAfterSubmit, if set.
org.kuali.rice.krad.uif.element.Action|loadingMessageText|String=Gets the loading message used by action's blockUI
org.kuali.rice.krad.uif.element.Action|methodToCall|String=Name of the method that should be called when the action is selected\n\n <p>\n For a server side call (clientSideCall is false), gives the name of the\n method in the mapped controller that should be invoked when the action is\n selected. For client side calls gives the name of the script function\n that should be invoked when the action is selected\n </p>
org.kuali.rice.krad.uif.element.Action|navigateToPageId|String=For an <code>Action</code> that is part of a\n <code>NavigationGroup</code>, the navigate to page id can be set to\n configure the page that should be navigated to when the action is\n selected\n\n <p>\n Support exists in the <code>UifControllerBase</code> for handling\n navigation between pages\n </p>
org.kuali.rice.krad.uif.element.Action|performClientSideValidation|boolean=Indicates whether the form data should be validated on the client side\n\n return true if validation should occur, false otherwise
org.kuali.rice.krad.uif.element.Action|performDirtyValidation|boolean=
org.kuali.rice.krad.uif.element.Action|preSubmitCall|String=Gets the script which needs to be invoked before the form is submitted\n\n <p>\n The preSubmitCall can carry out custom logic for the action before the submit occurs. The value should\n be given as one or more lines of script and should return a boolean. If false is returned from the call,\n the submit is not carried out. Furthermore, the preSubmitCall can refer to the request object through the\n variable 'kradRequest' or 'this'. This gives full access over the request for doing such things as\n adding additional data\n </p>\n\n <p>\n Examples 'return doFunction(kradRequest);', 'var valid\=true;return valid;'\n </p>\n\n <p>\n The preSubmit call will be invoked both for ajax and non-ajax submits\n </p>
org.kuali.rice.krad.uif.element.Action|refreshId|String=Id for the component that should be refreshed after the action completes\n\n <p>\n Either refresh id or refresh property name can be set to configure the component that should\n be refreshed after the action completes. If both are blank, the page will be refreshed\n </p>
org.kuali.rice.krad.uif.element.Action|refreshPropertyName|String=Property name for the {@link org.kuali.rice.krad.uif.field.DataField} that should be refreshed after the action\n completes\n\n <p>\n Either refresh id or refresh property name can be set to configure the component that should\n be refreshed after the action completes. If both are blank, the page will be refreshed\n </p>\n\n <p>\n Property name will be adjusted to use the default binding path unless it contains the form prefix\n </p>
org.kuali.rice.krad.uif.element.Action|renderInnerTextSpan|boolean=When true, a span will be rendered around the actionLabel text
org.kuali.rice.krad.uif.element.Action|successCallback|String=Gets the script which will be invoked on a successful ajax call\n\n <p>\n The successCallback can carry out custom logic after a successful ajax submission has been made. The\n value can contain one or more script statements. In addition, the response contents can be accessed\n through the variable 'responseContents'\n </p>\n\n <p>\n Examples 'handleSuccessfulUpdate(responseContents);'\n </p>\n\n <p>\n The successCallback may only be specified when {@link \#isAjaxSubmit()} is true\n </p>
org.kuali.rice.krad.uif.element.ContentElementBase=
org.kuali.rice.krad.uif.element.DataTable=Content element that renders a table using the {@link RichTable} widget configured with an Ajax (or Javascript)\n data source\n\n <p>\n Note this is different from the table layout manager in that it does not render nested components. The data is\n provided directly to the rich table widget which will create the table rows (unlike the table layout which creates\n the table from components then invokes the table plugin to decorate). Therefore this component just creates a table\n element tag and invokes the rich table script\n </p>\n\n <p>\n Nested HTML can be given through the rich table data. However generally this will be read-only data with possibly\n some inquiry links\n </p>
org.kuali.rice.krad.uif.element.DataTable|ajaxSource|String=Specifies a URL for acquiring the table data with ajax\n \n <p>\n When the ajax source URL is specified the rich table plugin will retrieve the data by\n invoking the URL and building the table rows from the result. This is different from the\n standard use of the rich table plugin with uses progressive enhancement to decorate a table\n that has already been rendereed\n </p>
org.kuali.rice.krad.uif.element.DataTable|hiddenColumns|Set=Holds propertyNames for the ones meant to be hidden since columns are visible by default\n \n <p>\n Duplicate entries are ignored and the order of entries is not significant\n </p>
org.kuali.rice.krad.uif.element.DataTable|richTable|RichTable=Widget that will render the data table client side
org.kuali.rice.krad.uif.element.DataTable|sortableColumns|Set=Holds the propertyNames for columns that are to be sorted\n \n <p>\n Duplicate entries are ignored and the order of entries is not significant\n </p>
org.kuali.rice.krad.uif.element.FieldValidationMessages=ValidationMessages for logic and options specific to groups
org.kuali.rice.krad.uif.element.FieldValidationMessages|showIcons|boolean=If true, display dynamic icons next to fields which have messages.  Otherwise, do not render these icons.
org.kuali.rice.krad.uif.element.FieldValidationMessages|useTooltip|boolean=When true, use the tooltip on fields to display their relevant messages.  When false, these messages\n will appear directly below the control.
org.kuali.rice.krad.uif.element.GroupValidationMessages=ValidationMessages for logic and options specific to groups
org.kuali.rice.krad.uif.element.GroupValidationMessages|collapseAdditionalFieldLinkMessages|boolean=When collapseAdditionalFieldLinkMessages is set to true, the messages generated on field links will be\n summarized to limit the space they take up with an appendage similar to [+n message type] appended for\n additional\n messages that are omitted.  When this flag is false, all messages will be part of the link separated by\n a comma.
org.kuali.rice.krad.uif.element.GroupValidationMessages|displayFieldLabelWithMessages|boolean=If true, the error messages will display the an InputField's title\n alongside the error, warning, and info messages related to it. This\n setting has no effect on messages which do not relate directly to a\n single InputField.
org.kuali.rice.krad.uif.element.GroupValidationMessages|displayHeaderMessageSummary|boolean=If true, the header message summary will display (this is the message count message appended to section\n headers).
org.kuali.rice.krad.uif.element.Header=Content element that renders a header element and optionally a <code>Group</code> to\n present along with the header text\n\n <p>\n Generally the group is used to display content to the right of the header,\n such as links for the group or other information\n </p>
org.kuali.rice.krad.uif.element.Header|headerLevel|String=HTML header level (h1 ... h6) that should be applied to the header text
org.kuali.rice.krad.uif.element.Header|headerTagCssClasses|List=Style classes that should be applied to the header text (h tag)\n\n <p>\n Note the style class given here applies to only the header text. The\n style class property inherited from the <code>Component</code> interface\n can be used to set the class for the whole field div (which could\n include a nested <code>Group</code>)\n </p>
org.kuali.rice.krad.uif.element.Header|headerTagStyle|String=Style that should be applied to the header h tag\n\n <p>\n Note the style given here applies to only the header text. The style\n property inherited from the <code>Component</code> interface can be used\n to set the style for the whole header div (which could include a nested\n <code>Group</code>)\n </p>
org.kuali.rice.krad.uif.element.Header|headerText|String=Text that should be displayed on the header
org.kuali.rice.krad.uif.element.Header|inlineComponents|List=Gets the inlineComponents used by index in a Header that has rich message component index tags in its headerText
org.kuali.rice.krad.uif.element.Header|items|List=List of <code>Component</code> instances contained in the lower header group\n\n <p>\n Convenience method for configuration to get the items List from the\n lower header group\n </p>
org.kuali.rice.krad.uif.element.Header|lowerGroup|Group=Nested group instance that can be used to render contents below the header text\n\n <p>\n The header group is useful for adding content such as links or actions that is presented with the header\n </p>
org.kuali.rice.krad.uif.element.Header|richHeaderMessage|Message=Gets the Message that represents the rich message content of the header if headerText is using rich message\n tags.\n <b>DO NOT set this\n property directly unless you need full control over the message structure.</b>
org.kuali.rice.krad.uif.element.Header|rightGroup|Group=Nested group instance that can be used to render contents to the right of the header text\n\n <p>\n The header group is useful for adding content such as links or actions that is presented with the header\n </p>
org.kuali.rice.krad.uif.element.Header|upperGroup|Group=Nested group instance that can be used to render contents above the header text\n\n <p>\n The header group is useful for adding content such as links or actions that is presented with the header\n </p>
org.kuali.rice.krad.uif.element.Icon=Element that presents an Icon
org.kuali.rice.krad.uif.element.Icon|iconClass|String=Icon Class for the action\n\n <p>\n Bootstrap Icon Class to be rendered on this Action\n </p>
org.kuali.rice.krad.uif.element.Iframe=Content element that encloses an iframe
org.kuali.rice.krad.uif.element.Iframe|frameborder|String=The IFrame's frame border
org.kuali.rice.krad.uif.element.Iframe|height|String=The IFrame's height
org.kuali.rice.krad.uif.element.Iframe|source|String=The IFrame's source
org.kuali.rice.krad.uif.element.Image=Content element that renders a HTML <code>&lt;IMG&gt;</code> tag
org.kuali.rice.krad.uif.element.Image|altText|String=Provides alternate information for the image element\n\n <p>The altText property specifies an alternate text for an image. It is displayed by the browser\n if the image cannot be displayed.  This is especially important for accessibility, because screen\n readers can't understand images, but rather will read aloud the alternative text assigned to them.\n <br>\n Some best practices\:\n <ul>\n <li>spacer images, bullets, and icons should have the altText set to null or the empty string. This\n will prevent screen readers from announcing it.</li>\n <li>Make the altText message as short and succinct as possible</li>\n <li>Describe the content of the image and nothing more</li>\n </ul>\n </p>
org.kuali.rice.krad.uif.element.Image|captionHeaderPlacementAboveImage|boolean=Specifies whether the image caption is to be displayed above or below the image
org.kuali.rice.krad.uif.element.Image|captionHeaderText|String=Retrieves the caption text for this image\n\n <p>\n The caption text is a headline for the picture. It may be displayed either above or below the picture.\n </p>
org.kuali.rice.krad.uif.element.Image|captionHeader|Header=Retrieves the {@link Header} component used to display the caption for this image
org.kuali.rice.krad.uif.element.Image|cutlineMessage|Message=Gets the {@link Message} component used to display the cutline.\n\n <p>\n Wrapping the cutline text with a Message component allows styling of the cutline text.\n </p>
org.kuali.rice.krad.uif.element.Image|cutlineText|String=Retrieves the cutline text for this image\n\n <p>\n The cutline text give more detailed information about the picture. Generally it describes\n the who, what, where, when of this image.\n </p>
org.kuali.rice.krad.uif.element.Image|height|String=Returns the height style attribute of this image\n\n <p>\n The default unit of measure is pixels.<br>\n It is good practice to specify both the height and width attributes for an image.\n If these attributes are set, the space required for the image is reserved when the page is loaded.\n However, without these attributes, the browser does not know the size of the image. The effect will\n be that the page layout will change while the images load.\n </p>
org.kuali.rice.krad.uif.element.Image|source|String=returns the URL of this image
org.kuali.rice.krad.uif.element.Image|width|String=Returns the width style attribute of the image\n\n <p>\n The default unit of measure is pixels.<br>\n It is good practice to specify both the height and width attributes for an image.\n If these attributes are set, the space required for the image is reserved when the page is loaded.\n However, without these attributes, the browser does not know the size of the image. The effect will\n be that the page layout will change while the images load.\n <p>
org.kuali.rice.krad.uif.element.Label=Content element that renders a label\n\n <p>\n Contains options for adding a colon to the label along with a required message\n </p>
org.kuali.rice.krad.uif.element.Label|inlineComponents|List=Gets the inlineComponents used by index in a Label that has rich message component index tags in its labelText
org.kuali.rice.krad.uif.element.Label|labelForComponentId|String=Indicates the id for the component the label applies to\n <p>\n Used for setting the labelFor attribute of the corresponding HTML\n element. Note this gets set automatically by the framework during the\n initialize phase\n </p>
org.kuali.rice.krad.uif.element.Label|labelText|String=Text that will display as the label
org.kuali.rice.krad.uif.element.Label|renderColon|boolean=Indicates whether a colon should be rendered after the label text,\n generally used when the label appears to the left of the field's control\n or value
org.kuali.rice.krad.uif.element.Label|requiredMessagePlacement|UifConstants.Position=Indicates where the required message field should be placed in relation\n to the label field, valid options are 'LEFT' and 'RIGHT'
org.kuali.rice.krad.uif.element.Label|requiredMessage|Message=<code>Message</code> instance that will display a required indicator\n\n <p>\n To indicate a field must have a value (required input) the required\n message field can be set to display an indicator or message along with\n the label. The message field also dictates the styling of the required\n message\n </p>
org.kuali.rice.krad.uif.element.Label|richLabelMessage|Message=Gets the Message that represents the rich message content of the label if labelText is using rich message tags.\n <b>DO NOT set this\n property directly unless you need full control over the message structure.</b>
org.kuali.rice.krad.uif.element.Link=Content element that renders a link
org.kuali.rice.krad.uif.element.Link|href|String=Returns the href text
org.kuali.rice.krad.uif.element.Link|iconClass|String=Icon Class for the link\n\n <p>\n Bootstrap Icon Class to be rendered on this Link\n </p>
org.kuali.rice.krad.uif.element.Link|lightBox|LightBox=Returns the <code>LightBox</code> used to open the link in
org.kuali.rice.krad.uif.element.Link|linkIconPlacement|String=Set to LEFT, RIGHT to position image at that location within the button. When set to blank/null/ICON_ONLY, the icon\n itself will be the Action, if no value is set the default is ALWAYS LEFT, you must explicitly set\n blank/null/ICON_ONLY to use ONLY the image as the Action.
org.kuali.rice.krad.uif.element.Link|linkText|String=Returns the label of the link
org.kuali.rice.krad.uif.element.Link|target|String=Returns the target that will be used to specify where to open the href
org.kuali.rice.krad.uif.element.Message=Encapsulates a text message to be displayed\n\n <p>\n The <code>Message</code> is used to display static text in the user\n interface\n </p>
org.kuali.rice.krad.uif.element.Message|generateSpan|boolean=If true, generate the span around this message (default).  When false, skip span generation for this\n message - this has the additional effect the css classes/style classes will be lost for this message.
org.kuali.rice.krad.uif.element.Message|inlineComponents|List=The inlineComponents are a list of components in order by index.\n\n <p>inlineComponents is only used when the message is using rich message functionality.  A message\n with [0] will reference component at index 0 of this list and insert it at that place in the message,\n and likewise [1] will reference item 1, etc.  If the index referenced is out of bounds (or list doesnt exist),\n an error will be thrown during message parse.</p>
org.kuali.rice.krad.uif.element.Message|messageText|String=Text that makes up the message that will be displayed.\n\n <p>If special characters [] are detected the message inserts special content at that location.\n The types of features supported are (note that &lt;&gt; are not part of the content below,\n they specify placeholders)\:\n <ul>\n <li>[id\=&lt;component id&gt;] - insert component with id specified at that location in the message</li>\n <li>[n] - insert component at index n from the inlineComponent list</li>\n <li>[&lt;html tag&gt;][/&lt;html tag&gt;] - insert html content directly into the message content at that\n location,\n without the need to escape the &lt;&gt; characters in xml</li>\n <li>[color\=&lt;html color code/name&gt;][/color] - wrap content in color tags to make text that color\n in the message</li>\n <li>[css\=&lt;css classes&gt;][/css] - apply css classes specified to the wrapped content - same as wrapping\n the content in span with class property set</li>\n </ul>\n If the [] characters are needed in message text, they need to be declared with an escape character\: \\\\[ \\\\]\n </p>
org.kuali.rice.krad.uif.element.Message|parseComponents|boolean=Indicates if the inline components must be parsed for rich messages
org.kuali.rice.krad.uif.element.PageValidationMessages=ValidationMessages for logic and options specific to pages\n TODO this class is currently a placeholder for possible future functionality (ex. flatValidationMessages)
org.kuali.rice.krad.uif.element.PageValidationMessages|showPageSummaryHeader|boolean=If true, shows the page summary header (message count header message in the message block).  Otherwise, this\n header is not rendered.
org.kuali.rice.krad.uif.element.Space=Content element that renders a non-breaking space HTML <code>&amp;nbsp;</code> tag
org.kuali.rice.krad.uif.element.ToggleMenu=Renders a toggle menu (aka sub menu, dropdown menu) of items.\n\n <p>The toggle menu component can be used to build context menus or full application menus. Essentially the\n component is configured by first setting the text that will appear as a link (optionally with a caret). When the\n user clicks the link, the items ({@link \#getMenuItems()} will be presented.</p>
org.kuali.rice.krad.uif.element.ToggleMenu|iconClass|String=Css class for an icon that will appear to the left of the toggleText
org.kuali.rice.krad.uif.element.ToggleMenu|menuGroup|Group=Group instance that is rendered when the toggle menu is toggled.\n\n <p>Note in most cases this group will be a simple list group. The component allows for the list group\n to be initialized in a base bean, then child beans can simply define the item using\n {@link ToggleMenu\#getMenuItems()}</p>
org.kuali.rice.krad.uif.element.ToggleMenu|menuItems|List=List of components that should be rendered for the toggle menu\n\n <p>\n Items for the menu are configured through this list. The order of the items within the list is\n the order they will appear in the toggle menu\n </p>
org.kuali.rice.krad.uif.element.ToggleMenu|renderToggleButton|boolean=Indicates whether a caret button should be rendered to the right of the toggle text (if present)
org.kuali.rice.krad.uif.element.ToggleMenu|renderedInList|boolean=
org.kuali.rice.krad.uif.element.ToggleMenu|toggleCaretClass|String=Css class to use when rendering a caret icon which will appear to the right of the toggleText
org.kuali.rice.krad.uif.element.ToggleMenu|toggleMessage|Message={@code Message} component that is associated with the toggle menu toggle text, can be used to adjust styling\n and so forth
org.kuali.rice.krad.uif.element.ToggleMenu|toggleText|String=Text to display as the toggle menu toggle link\n\n <p>\n This text will appear as a link for the user to click on, which then will bring up the toggle menu menu. This\n property is a shortcut for {@link \#getToggleMessage().setMessageText()}. This text is not required, in which\n case only the caret will render\n </p>
org.kuali.rice.krad.uif.element.ValidationMessages=Field that displays error, warning, and info messages for the keys that are\n matched. By default, an ValidationMessages will match on id and bindingPath (if this\n ValidationMessages is for an InputField), but can be set to match on\n additionalKeys and nested components keys (of the its parentComponent).\n\n In addition, there are a variety of options which can be toggled to effect\n the display of these messages during both client and server side validation\n display. See documentation on each get method for more details on the effect\n of each option.
org.kuali.rice.krad.uif.element.ValidationMessages|additionalKeysToMatch|List=AdditionalKeysToMatch is an additional list of keys outside of the\n default keys that will be matched when messages are returned after a form\n is submitted. These keys are only used for displaying messages generated\n by the server and have no effect on client side validation error display.
org.kuali.rice.krad.uif.element.ValidationMessages|displayMessages|boolean=<p>If true, error, warning, and info messages will be displayed (provided\n they are also set to display). Otherwise, no messages for this\n ValidationMessages container will be displayed (including ones set to display).\n This is a global display on/off switch for all messages.</p>\n\n <p>Other areas of the screen react to\n a display flag being turned off at a certain level, if display is off for a field, the next\n level up will display that fields full message text, and if display is off at a section the\n next section up will display those messages nested in a sublist.</p>
org.kuali.rice.krad.uif.element.ValidationMessages|errors|List=The list of error messages found for the keys that were matched on this\n ValidationMessages This is generated and cannot be set
org.kuali.rice.krad.uif.element.ValidationMessages|infos|List=The list of info messages found for the keys that were matched on this\n ValidationMessages This is generated and cannot be set
org.kuali.rice.krad.uif.element.ValidationMessages|warnings|List=The list of warning messages found for the keys that were matched on this\n ValidationMessages This is generated and cannot be set
org.kuali.rice.krad.uif.element.ViewHeader=The ViewHeader component represents the header for the view\n\n <p>This header has support for a "Unified" header in\n which both the page title and view title appear in its content.  An "area title" and "metadata" can also be set\n to provide context. </p>
org.kuali.rice.krad.uif.element.ViewHeader|areaTitleMessage|Message=Message object backing areaTitleText
org.kuali.rice.krad.uif.element.ViewHeader|areaTitleText|String=Represents the area in which this view and page exist (conceptially in the site);\n this title appears above the view title.
org.kuali.rice.krad.uif.element.ViewHeader|metadataMessage|Message=The metadataMessage represents any relevant metadata about the view (last saved, etc).\n This message will appear in the bottom right of the ViewHeader container.
org.kuali.rice.krad.uif.element.ViewHeader|metadataText|String=The metadataText represents any relevant metadata about the view (last saved, etc).\n This message will appear in the bottom right of the ViewHeader container.
org.kuali.rice.krad.uif.element.ViewHeader|sticky|boolean=If true, this ViewHeader will be sticky (fixed to top of window, stays at top during scrolling)
org.kuali.rice.krad.uif.element.ViewHeader|supportTitleMessage|Message=The supportTitleMessage represents the sub-area of this view that supports what the page is displaying, this is\n the Message component\n\n <p>This title appears below the view title and will be automatically set to the page title if not messageText is\n not set.</p>
org.kuali.rice.krad.uif.element.ViewHeader|supportTitleText|String=The supportTitleText represents the sub-area of this view that explains what the page is displaying; this is\n the text used in supportTitleMessage\n\n <p>This title appears below the view title and will be automatically set to the page title if not set.</p>
org.kuali.rice.krad.uif.field.ActionField=Field that encloses an @{link org.kuali.rice.krad.uif.element.Action} element
org.kuali.rice.krad.uif.field.ActionField|actionEvent|String=Name of the event that will be set when the action is invoked\n\n <p>\n Action events can be looked at by the view or components in order to render differently depending on\n the action requested.\n </p>
org.kuali.rice.krad.uif.field.ActionField|actionImagePlacement|String=
org.kuali.rice.krad.uif.field.ActionField|actionImage|Image=Image to use for the action\n\n <p>\n When the action image component is set (and render is true) the image will be\n used to present the action as opposed to the default (input submit). For\n action link templates the image is used for the link instead of the\n action link text\n </p>
org.kuali.rice.krad.uif.field.ActionField|actionLabel|String=Label text for the action\n\n <p>\n The label text is used by the template renderers to give a human readable\n label for the action. For buttons this generally is the button text,\n while for an action link it would be the links displayed text\n </p>
org.kuali.rice.krad.uif.field.ActionField|actionParameters|Map=Parameters that should be sent when the action is invoked\n\n <p>\n Action renderer will decide how the parameters are sent for the action\n (via script generated hiddens, or script parameters, ...)\n </p>\n\n <p>\n Can be set by other components such as the <code>CollectionGroup</code>\n to provide the context the action is in (such as the collection name and\n line the action applies to)\n </p>
org.kuali.rice.krad.uif.field.ActionField|actionScript|String=Client side javascript to be executed when this actionField is clicked\n\n <p>\n This overrides the default action for this Action so the method\n called must explicitly submit, navigate, etc. through js, if necessary.\n In addition, this js occurs AFTER onClickScripts set on this field, it\n will be the last script executed by the click event. Sidenote\: This js is\n always called after hidden actionParameters and methodToCall methods are\n written by the js to the html form.\n </p>
org.kuali.rice.krad.uif.field.ActionField|action|Action=Nested action component
org.kuali.rice.krad.uif.field.ActionField|additionalSubmitData|Map=Map of additional data that will be posted when the action is invoked\n\n <p>\n Each entry in this map will be sent as a request parameter when the action is chosen. Note this in\n addition to the form data that is sent. For example, suppose the model contained a property named\n number and a boolean named showActive, we can send values for this properties by adding the following\n entries to this map\:\n {'number'\:'a13', 'showActive', 'true'}\n </p>\n\n <p>\n The additionalSubmitData map is different from the actionParameters map. All name/value pairs given as\n actionParameters populated the form map actionParameters. While name/value pair given in additionalSubmitData\n populate different form (model) properties\n </p>
org.kuali.rice.krad.uif.field.ActionField|ajaxSubmit|boolean=When this property is set to true it will submit the form using Ajax instead of the browser submit. Will default\n to updating the page contents
org.kuali.rice.krad.uif.field.ActionField|disableBlocking|boolean=Indicates whether blocking for the action should be disabled\n\n <p>\n By default when an action is invoked part of the page or the entire window is blocked until\n the action completes. If this property is set to true the blocking will not be displayed.\n </p>\n\n <p>\n Currently if an action returns a file download, this property should be set to true. If not, the blocking\n will never get unblocked (because the page does not get notification a file was downloaded)\n </p>
org.kuali.rice.krad.uif.field.ActionField|disabledReason|String=If the action field is disabled, gives a reason for why which will be displayed as a tooltip\n on the action field (button)
org.kuali.rice.krad.uif.field.ActionField|disabled|boolean=Indicates whether the action (input or button) is disabled (doesn't allow interaction)
org.kuali.rice.krad.uif.field.ActionField|errorCallback|String=Gets the script which will be invoked when the action fails due to problems in the ajax call or\n the return of an incident report\n\n <p>\n The errorCallback can carry out custom logic after a failed ajax submission. The\n value can contain one or more script statements. In addition, the response contents can be accessed\n through the variable 'responseContents'\n </p>\n\n <p>\n Examples 'handleFailedUpdate(responseContents);'\n </p>\n\n <p>\n The errorCallback may only be specified when {@link \#isAjaxSubmit()} is true\n </p>
org.kuali.rice.krad.uif.field.ActionField|focusOnIdAfterSubmit|String=The element to place focus on in the new page after the new page\n is retrieved.\n\n <p>The following are allowed\:\n <ul>\n <li>A valid element id</li>\n <li>"FIRST" will focus on the first visible input element on the form</li>\n <li>"SELF" will result in this Action being focused (action bean defaults to "SELF")</li>\n <li>"LINE_FIRST" will result in the first input of the collection line to be focused (if available)</li>\n <li>"NEXT_INPUT" will result in the next available input that exists after this Action to be focused\n (only if this action still exists on the page)</li>\n </ul>\n </p>
org.kuali.rice.krad.uif.field.ActionField|jumpToIdAfterSubmit|String=
org.kuali.rice.krad.uif.field.ActionField|jumpToNameAfterSubmit|String=The name to jump to in the next page, the element with this name will be\n jumped to automatically when the new page is retrieved after a submit.\n Passing in nothing for both jumpToIdAfterSubmit and jumpToNameAfterSubmit\n will result in this Action being jumped to by default if it is\n present on the new page. WARNING\: jumpToIdAfterSubmit always takes\n precedence over jumpToNameAfterSubmit, if set.
org.kuali.rice.krad.uif.field.ActionField|methodToCall|String=Name of the method that should be called when the action is selected\n\n <p>\n For a server side call (clientSideCall is false), gives the name of the\n method in the mapped controller that should be invoked when the action is\n selected. For client side calls gives the name of the script function\n that should be invoked when the action is selected\n </p>
org.kuali.rice.krad.uif.field.ActionField|navigateToPageId|String=For an <code>Action</code> that is part of a\n <code>NavigationGroup</code>, the navigate to page id can be set to\n configure the page that should be navigated to when the action is\n selected\n\n <p>\n Support exists in the <code>UifControllerBase</code> for handling\n navigation between pages\n </p>
org.kuali.rice.krad.uif.field.ActionField|performClientSideValidation|boolean=Indicates whether the form data should be validated on the client side\n\n return true if validation should occur, false otherwise
org.kuali.rice.krad.uif.field.ActionField|performDirtyValidation|boolean=
org.kuali.rice.krad.uif.field.ActionField|preSubmitCall|String=Gets the script which needs to be invoked before the form is submitted\n\n <p>\n The preSubmitCall can carry out custom logic for the action before the submit occurs. The value should\n be given as one or more lines of script and should return a boolean. If false is returned from the call,\n the submit is not carried out. Furthermore, the preSubmitCall can refer to the request object through the\n variable 'kradRequest' or 'this'. This gives full access over the request for doing such things as\n adding additional data\n </p>\n\n <p>\n Examples 'return doFunction(kradRequest);', 'var valid\=true;return valid;'\n </p>\n\n <p>\n The preSubmit call will be invoked both for ajax and non-ajax submits\n </p>
org.kuali.rice.krad.uif.field.ActionField|refreshId|String=Id for the component that should be refreshed after the action completes\n\n <p>\n Either refresh id or refresh property name can be set to configure the component that should\n be refreshed after the action completes. If both are blank, the page will be refreshed\n </p>
org.kuali.rice.krad.uif.field.ActionField|successCallback|String=Gets the script which will be invoked on a successful ajax call\n\n <p>\n The successCallback can carry out custom logic after a successful ajax submission has been made. The\n value can contain one or more script statements. In addition, the response contents can be accessed\n through the variable 'responseContents'\n </p>\n\n <p>\n Examples 'handleSuccessfulUpdate(responseContents);'\n </p>\n\n <p>\n The successCallback may only be specified when {@link \#isAjaxSubmit()} is true\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery=Holds configuration for executing a dynamic query on an <code>InputField</code> to\n pull data for updating the UI\n\n <p>\n There are two types of query types that can be configured and executed. The first is provided\n completely by the framework using the <code>LookupService</code> and will perform a query\n against the configured dataObjectClassName using the query parameters and return field mapping.\n The second type will invoke a method that will perform the query. This can be configured using the\n queryMethodToCall (if the method is on the view helper service), or using the queryMethodInvoker if\n the method is on another class or object.\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|additionalCriteria|Map=Fixed criteria that will be appended to the dynamic criteria generated\n for the query. Map key gives name of the property the criteria should\n apply to, and the map value is the value (literal) for the criteria. Standard\n lookup wildcards are allowed
org.kuali.rice.krad.uif.field.AttributeQuery|dataObjectClassName|String=Class name for the data object the query should be performed against
org.kuali.rice.krad.uif.field.AttributeQuery|queryFieldMapping|Map=Configures the query parameters by mapping fields in the view\n to properties on the data object class for the query\n\n <p>\n Each map entry configures one parameter for the query, where\n the map key is the field name to pull the value from, and the\n map value is the property name on the object the parameter should\n populate.\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|queryMethodArgumentFieldList|List=List of field names that should be passed as arguments to the query method\n\n <p>\n Each entry in the list maps to a method parameter, in the other contained within\n the list. The value for the field within the view will be pulled and passed\n to the query method as an argument\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|queryMethodInvokerConfig|MethodInvokerConfig=Configures the query method target class/object and method name\n\n <p>\n When the query method is not contained on the <code>ViewHelperService</code>, this\n can be configured for declaring the target class/object and method. The target class\n can be set in which case a new instance will be created and the given method invoked.\n Alternatively, the target object instance for the invocation can be given. Or finally\n a static method can be configured\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|queryMethodToCall|String=Configures the name of the method that should be invoked to perform\n the query\n\n <p>\n Should contain only the method name (no parameters or return type). If only\n the query method name is configured it is assumed to be on the <code>ViewHelperService</code>\n for the contained view.\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|renderNotFoundMessage|boolean=Indicates whether a message should be added to the query result\n object and displayed when the query return object is null
org.kuali.rice.krad.uif.field.AttributeQuery|returnFieldMapping|Map=Maps properties from the result object of the query to\n fields in the view\n\n <p>\n Each map entry configures one return mapping, where the map\n key is the field name for the field to populate, and the map\n values is the name of the property on the result object to\n pull the value from\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|returnMessageStyleClasses|String=CSS Style classes that should be applied to the return message.\n Multiple style classes should be delimited by a space
org.kuali.rice.krad.uif.field.AttributeQuery|returnMessageText|String=Message text to display along with the query result
org.kuali.rice.krad.uif.field.AttributeQuery|sortPropertyNames|List=List of property names to sort the query results by. The sort\n will be performed on each property in the order they are contained\n within the list. Each property must be a valid property of the\n return query object (the data object in case of the general query)
org.kuali.rice.krad.uif.field.DataField=Field that renders data from the application, such as the value of a data object property
org.kuali.rice.krad.uif.field.DataFieldSecurity=Data field security adds attribute security to the standard component security\n\n <p>\n The {@link AttributeSecurity} can be configured for the field to indicate there is security at the data layer\n (configured by component (class) and property). If the field is backed by a data dictionary\n {@link org.kuali.rice.krad.datadictionary.AttributeDefinition} the attribute security can be configured there and\n will be picked up and inserted into the field security\n </p>
org.kuali.rice.krad.uif.field.DataFieldSecurity|attributeSecurity|AttributeSecurity=Attribute security instance configured or picked up for the field
org.kuali.rice.krad.uif.field.DataField|addHiddenWhenReadOnly|boolean=Indicates the field should be read-only but also a hidden should be generated for the field\n\n <p>\n Useful for when a value is just displayed but is needed by script\n </p>
org.kuali.rice.krad.uif.field.DataField|additionalHiddenPropertyNames|List=Allows specifying hidden property names without having to specify as a\n field in the group config (that might impact layout)
org.kuali.rice.krad.uif.field.DataField|applyMask|boolean=Indicates whether the value for the field should be masked (or partially masked) on display\n\n <p>\n If set to true, the field value will be masked by applying the configured {@link \#getMaskFormatter()}\n </p>\n\n <p>\n If a KIM permission exists that should be checked to determine whether the value should be masked or not,\n this value should not be set but instead the mask or partialMask property on {@link \#getComponentSecurity()}\n should be set to true. This indicates there is a mask permission that should be consulted. If the user\n does not have the permission, this flag will be set to true by the framework and the value masked using\n the mask formatter configured on the security object\n </p>
org.kuali.rice.krad.uif.field.DataField|bindingInfo|BindingInfo=Returns the <code>BindingInfo</code> instance that is configured for the\n component
org.kuali.rice.krad.uif.field.DataField|defaultValueFinderClass|Class=Gives Class that should be invoked to produce the default value for the\n field
org.kuali.rice.krad.uif.field.DataField|defaultValues|Object=Array of default values for the model property the field points to\n\n <p>\n When a new <code>View</code> instance is requested, the corresponding\n model will be newly created. During this initialization process the value\n for the model property will be set to the given default values (if set)\n </p>
org.kuali.rice.krad.uif.field.DataField|defaultValue|String=Default value for the model property the field points to\n\n <p>\n When a new <code>View</code> instance is requested, the corresponding\n model will be newly created. During this initialization process the value\n for the model property will be set to the given default value, if it was null.\n This will only work on properties which can be determined to be null.\n Therefore a String property with an empty string value will\n not be ovewritten with the defaultValue set here.\n </p>\n\n <p>\n In addition, int, boolean, and other primitive types\n will not use this default value because they inherently have a value in Java (0 for int, false for boolean, etc).\n To use such types either using a primitive wrapper type (Integer, Boolean, etc) so an unset variable can\n be determined to be null, or explicitly set the default value on the form/object itself for these types and\n not through this property.\n </p>
org.kuali.rice.krad.uif.field.DataField|dictionaryAttributeName|String=Name of the attribute within the data dictionary the attribute field is\n associated with\n\n <p>\n During the initialize phase for the <code>View</code>, properties for\n attribute fields are defaulted from a corresponding\n <code>AttributeDefinition</code> in the data dictionary. Based on the\n propertyName and parent object class the framework attempts will\n determine the attribute definition that is associated with the field and\n set this property. However this property can also be set in the fields\n configuration to use another dictionary attribute.\n </p>\n\n <p>\n The attribute name is used along with the dictionary object entry to find\n the <code>AttributeDefinition</code>\n </p>
org.kuali.rice.krad.uif.field.DataField|dictionaryObjectEntry|String=Object entry name in the data dictionary the associated attribute is\n apart of\n\n <p>\n During the initialize phase for the <code>View</code>, properties for\n attribute fields are defaulted from a corresponding\n <code>AttributeDefinition</code> in the data dictionary. Based on the\n parent object class the framework will determine the object entry for the\n associated attribute. However the object entry can be set in the field's\n configuration to use another object entry for the attribute\n </p>\n\n <p>\n The attribute name is used along with the dictionary object entry to find\n the <code>AttributeDefinition</code>\n </p>
org.kuali.rice.krad.uif.field.DataField|escapeHtmlInPropertyValue|boolean=Returns true if HTML escape allowed for this field
org.kuali.rice.krad.uif.field.DataField|helpSummary|String=Summary help text for the field
org.kuali.rice.krad.uif.field.DataField|help|Help=Help configuration object for the datafield\n\n <p>\n External help information can be configured for the datafield. The\n <code>Help</code> object can the configuration for rendering a link to\n that help information.\n </p>
org.kuali.rice.krad.uif.field.DataField|inquiry|Inquiry=Inquiry widget for the field\n\n <p>\n The inquiry widget will render a link for the field value when read-only\n that points to the associated inquiry view for the field. The inquiry can\n be configured to point to a certain <code>InquiryView</code>, or the\n framework will attempt to associate the field with a inquiry based on its\n metadata (in particular its relationships in the model)\n </p>
org.kuali.rice.krad.uif.field.DataField|maskFormatter|MaskFormatter=MaskFormatter instance that will be used to mask the field value when {@link \#isApplyMask()} is true\n\n <p>\n Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter\n configured on {@link \#getComponentSecurity()} will be used instead of this mask formatter\n </p>
org.kuali.rice.krad.uif.field.DataField|propertyEditor|PropertyEditor=Performs formatting of the field value for display and then converting the value back to its\n expected type from a string\n\n <p>\n Note property editors exist and are already registered for the basic Java types and the\n common Kuali types such as [@link KualiDecimal}. Registration with this property is only\n needed for custom property editors\n </p>
org.kuali.rice.krad.uif.field.DataField|propertyNamesForAdditionalDisplay|List=List of property names whose values should be displayed read-only under this field\n\n <p>\n In the attribute field template for each information property name given its values is\n outputted read-only. Informational property values can also be updated dynamically with\n the use of field attribute query\n </p>\n\n <p>\n Simple property names can be given if the property has the same binding parent as this\n field, in which case the binding path will be adjusted by the framework. If the property\n names starts with org.kuali.rice.krad.uif.UifConstants\#NO_BIND_ADJUST_PREFIX, no binding\n prefix will be added.\n </p>
org.kuali.rice.krad.uif.field.DataField|propertyName|String=Name of the property (relative to the parent object) the component binds\n to
org.kuali.rice.krad.uif.field.DataField|readOnlyDisplayReplacementPropertyName|String=Returns the alternate display attribute name to be displayed when the field is readonly.
org.kuali.rice.krad.uif.field.DataField|readOnlyDisplayReplacement|String=Returns the alternate display value
org.kuali.rice.krad.uif.field.DataField|readOnlyDisplaySuffixPropertyName|String=Returns the additional display attribute name to be displayed when the field is readonly
org.kuali.rice.krad.uif.field.DataField|readOnlyDisplaySuffix|String=Returns the additional display value.
org.kuali.rice.krad.uif.field.FieldBase=Base class for <code>Field</code> implementations\n\n <p>\n Sets the component type name so that all field templates have a fixed\n contract\n </p>\n\n <p>\n Holds a nested <code>Label</code> with configuration for rendering the\n label and configuration on label placement.\n </p>
org.kuali.rice.krad.uif.field.FieldBase|fieldLabel|Label=Label text for the field\n\n <p>\n The label is generally used to identify the field in the user interface\n </p>
org.kuali.rice.krad.uif.field.FieldBase|labelColSpan|int=Label column span for the field
org.kuali.rice.krad.uif.field.FieldBase|labelPlacement|UifConstants.Position=Indicates where the label is placed in relation to the field (valid options are\n LEFT, RIGHT, BOTTOM, and TOP
org.kuali.rice.krad.uif.field.FieldBase|labelRendered|boolean=Indicates whether the contained <code>Label</code> has been rendered\n as part of another field and thus should not be rendered with the\n attribute
org.kuali.rice.krad.uif.field.FieldBase|labelStyleClasses|List=Label style classes for the field
org.kuali.rice.krad.uif.field.FieldBase|label|String=Label text for the field\n\n <p>\n The label is generally used to identify the field in the user interface\n </p>
org.kuali.rice.krad.uif.field.FieldBase|shortLabel|String=Short label for the field\n\n <p>\n For areas of the user interface that have limited area (such as table\n headers), the short label can be used to identify the field\n </p>
org.kuali.rice.krad.uif.field.FieldGroup=Field that contains a nested <code>Group</code>. Can be used to group\n together fields by providing a group without header and footer, or simply to\n nest full groups. The items getter/setter provided is for convenience and\n will set the items <code>List</code> in the nested <code>Group</code>
org.kuali.rice.krad.uif.field.FieldGroup|group|Group=<code>Group</code> instance that is contained within in the field
org.kuali.rice.krad.uif.field.FieldGroup|items|List=List of <code>Component</code> instances contained in the nested group\n\n <p>\n Convenience method for configuration to get the items List from the\n field's nested group\n </p>
org.kuali.rice.krad.uif.field.FieldSecurity=Field security adds the edit in line and view in line flags to the standard component security\n\n <p>\n These flags are only applicable when the field is part of a collection group. They indicate there is security\n on the field within the collection line\n </p>
org.kuali.rice.krad.uif.field.FieldSecurity|editInLineAuthz|Boolean=Indicates whether the field has edit in line authorization and KIM should be consulted
org.kuali.rice.krad.uif.field.FieldSecurity|viewInLineAuthz|Boolean=Indicates whether the field has view in line unmask authorization and KIM should be consulted
org.kuali.rice.krad.uif.field.GenericField=Field whose output is produced by invoking a method or template and has no\n properties (generic)
org.kuali.rice.krad.uif.field.ImageField=Field that wraps an image content element.\n\n <p>\n Puts a <code>&lt;DIV&gt;</code> tag around an image element. This allows for labeling, styling, etc.\n </p>
org.kuali.rice.krad.uif.field.ImageField|altText|String=Provides alternate information for the image element\n\n <p>The altText property specifies an alternate text for an image. It is displayed by the browser\n if the image cannot be displayed.  This is especially important for accessibility, because screen\n readers can't understand images, but rather will read aloud the alternative text assigned to them.\n </p>
org.kuali.rice.krad.uif.field.ImageField|captionHeaderAboveImage|boolean=Gets boolen of whether the caption header is above the image
org.kuali.rice.krad.uif.field.ImageField|captionHeaderText|String=Gets the caption header text
org.kuali.rice.krad.uif.field.ImageField|captionHeader|Header=Gets the caption header
org.kuali.rice.krad.uif.field.ImageField|cutlineText|String=Gets the cutline text
org.kuali.rice.krad.uif.field.ImageField|cutline|Message=Gets the cutline
org.kuali.rice.krad.uif.field.ImageField|height|String=Gets the height of the image
org.kuali.rice.krad.uif.field.ImageField|image|Image=Retrieves the {@link Image} element wrapped by this field
org.kuali.rice.krad.uif.field.ImageField|source|String=Retrieves the URL the image wrapped by this field
org.kuali.rice.krad.uif.field.ImageField|width|String=Gets the width of the image
org.kuali.rice.krad.uif.field.InputField=Field that encapsulates data input/output captured by an attribute within the\n application\n\n <p>\n The {@code InputField} provides the majority of the data input/output\n for the screen. Through these fields the model can be displayed and updated.\n For data input, the field contains a {@link Control} instance will\n render an HTML control element(s). The input field also contains a\n {@link Label}, summary, and widgets such as a quickfinder (for\n looking up values) and inquiry (for getting more information on the value).\n {@code InputField} instances can have associated messages (errors)\n due to invalid input or business rule failures. Security can also be\n configured to restrict who may view the fields valnue.\n </p>
org.kuali.rice.krad.uif.field.InputField|attributeQuery|AttributeQuery=Attribute query instance configured for this field to dynamically pull information back for\n updates other fields or providing messages\n\n <p>\n If field attribute query is not null, associated event script will be generated to trigger the\n query from the UI. This will invoke the {@code AttributeQueryService} to\n execute the query and return an instance of {@code AttributeQueryResult} that is then\n read by the script to update the UI. Typically used to update informational property values or\n other field values\n </p>
org.kuali.rice.krad.uif.field.InputField|caseConstraint|CaseConstraint=The {@code CaseConstraint} that applies to this {@code InputField}
org.kuali.rice.krad.uif.field.InputField|constraintMessage|Message=Message field that displays constraint text\n\n <p>\n This message field can be configured to for adjusting how the constrain text will display. Generally\n the styleClasses property will be of most interest\n </p>
org.kuali.rice.krad.uif.field.InputField|constraintText|String=Text that display a restriction on the value a field can hold\n\n <p>\n For example when the value must be a valid format (phone number, email), certain length, min/max value and\n so on this text can be used to indicate the constraint to the user. Generally displays with the control so\n it is visible when the user tabs to the field\n </p>
org.kuali.rice.krad.uif.field.InputField|control|Control={@code Control} instance that should be used to input data for the\n field\n\n <p>\n When the field is editable, the control will be rendered so the user can\n input a value(s). Controls typically are part of a Form and render\n standard HTML control elements such as text input, select, and checkbox\n </p>
org.kuali.rice.krad.uif.field.InputField|dataType|DataType=Gets the DataType of this InputField, note that DataType set to be date\n when this field is using a date picker with a TextControl and has not otherwise been\n explicitly set.
org.kuali.rice.krad.uif.field.InputField|dependencyConstraints|List=List of {@code PrerequisiteConstraint} that apply to this {@code InputField}
org.kuali.rice.krad.uif.field.InputField|exclusiveMin|String=The exclusive minimum value for numeric or date field.\n\n <p>\n The exclusiveMin element determines the minimum allowable value for data\n entry editing purposes. This constrain is supported for numeric and\n date fields and to be used in conjunction with the appropriate\n {@link ValidCharactersConstraint}.\n\n For numeric constraint the value can be an integer or decimal such as -.001 or 99.\n </p>
org.kuali.rice.krad.uif.field.InputField|inclusiveMax|String=The inclusive maximum value for numeric or date field.\n\n <p>\n The inclusiveMax element determines the maximum allowable value for data\n entry editing purposes. This constrain is supported for numeric and\n date fields and to be used in conjunction with the appropriate\n {@link ValidCharactersConstraint}.\n\n For numeric constraint the value can be an integer or decimal such as -.001 or 99.\n </p>
org.kuali.rice.krad.uif.field.InputField|instructionalMessage|Message=Message field that displays instructional text\n\n <p>\n This message field can be configured to for adjusting how the instructional text will display. Generally\n the styleClasses property will be of most interest\n </p>
org.kuali.rice.krad.uif.field.InputField|instructionalText|String=Instructional text that display an explanation of the field usage\n\n <p>\n Text explaining how to use the field, including things like what values should be selected\n in certain cases and so on (instructions)\n </p>
org.kuali.rice.krad.uif.field.InputField|maxLength|Integer=Maximum number of characters the input field value is allowed to have\n\n <p>\n The maximum length determines the maximum allowable length of the value\n for data entry editing purposes.  The maximum length is inclusive and can\n be smaller or longer than the actual control size.  The constraint\n is enforced on all data types (e.g. a numeric data type needs to meet the\n maximum length constraint in which digits and symbols are counted).\n </p>
org.kuali.rice.krad.uif.field.InputField|minLength|Integer=Minimum number of characters the input field value needs to be\n\n <p>\n The minimum length determines the minimum required length of the value for\n data entry editing purposes.  The minimum length is inclusive. The constraint\n is enforced on all data types (e.g. a numeric data type needs to meet the\n minimum length requirement in which digits and symbols are counted).\n </p>
org.kuali.rice.krad.uif.field.InputField|mustOccurConstraints|List=List of {@code MustOccurConstraint} that apply to this {@code InputField}
org.kuali.rice.krad.uif.field.InputField|optionsFinderClass|Class=Get the class of the optionsFinder being used by this InputField
org.kuali.rice.krad.uif.field.InputField|optionsFinder|KeyValuesFinder=Instance of {@code KeyValuesFinder} that should be invoked to\n provide a List of values the field can have. Generally used to provide\n the options for a multi-value control or to validate the submitted field\n value
org.kuali.rice.krad.uif.field.InputField|quickfinder|QuickFinder=Lookup finder widget for the field\n\n <p>\n The quickfinder widget places a small icon next to the field that allows\n the user to bring up a search screen for finding valid field values. The\n {@code Widget} instance can be configured to point to a certain\n {@code LookupView}, or the framework will attempt to associate the\n field with a lookup based on its metadata (in particular its\n relationships in the model)\n </p>
org.kuali.rice.krad.uif.field.InputField|required|Boolean=
org.kuali.rice.krad.uif.field.InputField|simpleConstraint|SimpleConstraint=Simple constraints for the input field\n\n <p>\n A simple constraint which store the values for constraints such as required,\n min/max length, and min/max value.\n </p>
org.kuali.rice.krad.uif.field.InputField|suggest|Suggest=Suggest box widget for the input field\n\n <p>\n If enabled (by render flag), as the user inputs data into the\n fields control a dynamic query is performed to provide the user\n suggestions on values which they can then select\n </p>\n\n <p>\n Note the Suggest widget is only valid when using a standard TextControl\n </p>
org.kuali.rice.krad.uif.field.InputField|uppercaseValue|boolean=Perform uppercase flag for this field to force input to uppercase.\n\n <p>\n It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'\n which will automatically change any text input into the field to uppercase.\n </p>
org.kuali.rice.krad.uif.field.InputField|validCharactersConstraint|ValidCharactersConstraint=The {@code ValidCharactersConstraint} that applies to this {@code InputField}
org.kuali.rice.krad.uif.field.InputField|validationMessages|ValidationMessages=Field that contains the messages (errors) for the input field. The\n {@code ValidationMessages} holds configuration on associated messages along\n with information on rendering the messages in the user interface
org.kuali.rice.krad.uif.field.InputField|widgetInputOnly|boolean=Indicates indicates whether the field can only be updated through a widget\n\n widgetInputOnly behaves similar to ReadOnly with the exception that the value of the input field\n can be changed via the associated widget (e.g. spinner, date picker, quickfinder, etc).
org.kuali.rice.krad.uif.field.LinkField=Field that encloses a link element
org.kuali.rice.krad.uif.field.LinkField|href|String=Returns the href text of the <code>Link</code> field.
org.kuali.rice.krad.uif.field.LinkField|lightBox|LightBox=Returns the <code>LightBox</code> used to open the link in
org.kuali.rice.krad.uif.field.LinkField|linkText|String=Returns the label of the <code>Link</code> field that will be used to render the label of the link.
org.kuali.rice.krad.uif.field.LinkField|link|Link=Returns the <code>Link</code> field.
org.kuali.rice.krad.uif.field.LinkField|target|String=Returns the target of the <code>Link</code> field that will be used to specify where to open the href.
org.kuali.rice.krad.uif.field.MessageField=Field wrapper for a Message\n\n <p>\n The <code>Message</code> is used to display static text in the user\n interface\n </p>
org.kuali.rice.krad.uif.field.MessageField|message|Message=Nested {@link org.kuali.rice.krad.uif.element.Message} component wrapped in the field
org.kuali.rice.krad.uif.field.RemoteFieldsHolder=A placeholder in the configuration for a <code>Container</code> list of items that will be invoked to\n retrieve a list of {@link RemotableAttributeField} instances which will then be inserted into the containers\n list at the position of the holder\n\n <p>\n Since remotable fields are dynamic by nature, the individual fields cannot be configured initially with the\n container. Further more the properties for the field are constructed with code. This gives the ability to specify\n where that list of fields should be placed, along with configured on how to retrieve the remote fields.\n </p>\n\n <p>\n The fetching properties are used to configure what method to invoke that will return the list of remotable fields.\n Specifying the {@link \#getFetchingMethodToCall()} only assumes the method is on the view helper service for the\n contained view. For invoking other classes, such as services or static classes, use {@link\n \#getFetchingMethodInvoker()}\n </p>\n\n <p>\n The list of remotable fields should bind to a Map property on the model. The {@link \#getPropertyName()} and\n {@link \#getBindingInfo()} properties specify the path to this property. The property names configured on the\n returned fields are assumed to be keys in that above configured map, with the corresponding map value giving the\n actual model value for the remote field.\n </p>\n\n <p>\n e.g. configuration\n {@code\n <property name\="items">\n <list>\n <bean parent\="RemoteFieldsHolder" p\:propertyName\="remoteFieldValuesMap"\n p\:fetchingMethodToCall\="retrieveRemoteFields"/>\n ...\n }\n\n This example will invoke a method named 'retrieveRemoteFields' on the view helper service, which should return\n a list of {@link RemotableAttributeField} instances. The view, model instance, and parent container will be sent\n to the method as arguments.\n\n The returned fields will be translated to {@link InputField} instances that bind to a map property named\n 'remoteFieldValuesMap' on the model.\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|bindingInfo|BindingInfo=Can be used to for more complex binding paths\n\n <p>\n Generally not necessary to set on a field level, any default object path or binding prefixes set\n on the view or container will be inherited\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|fetchingMethodInvoker|MethodInvokerConfig=Configuration for the method to invoke for retrieving the list of remotable fields\n\n <p>\n Through the method invoker config, a service or static class can be configured along with the\n method name that will be invoked. The method name must accept the view, model object, and parent\n container as arguments, and return a list of {@link RemotableAttributeField} instances.\n </p>\n\n <p>\n Note the {@link org.kuali.rice.krad.uif.component.MethodInvokerConfig\#getTargetMethod()} property can\n be configured, or the {@link \#getFetchingMethodToCall()}. In the case of both configurations, the target\n method on the method invoker config will be used\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|fetchingMethodToCall|String=Name of the method to invoke for retrieving the list of remotable fields\n\n <p>\n When only the fetching method to call is configured it is assumed to be a valid method on the view\n helper service for the containing view. The method name must accept the view, model object, and parent\n container as arguments, and return a list of {@link RemotableAttributeField} instances.\n </p>\n\n <p>\n For invoking the method on classes other than the view helper service, see {@link \#getFetchingMethodInvoker()}\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|propertyName|String=Path to the Map property that the translated fields bind to\n\n <p>\n It is assumed this property points to a Map where the property names on the returned remotable fields\n are keys in that map, with the corresponding map value giving the model value for the field\n </p>
org.kuali.rice.krad.uif.field.SpaceField=Field that produces only a space\n\n <p>\n Can be used to aid in the layout of other fields, for instance in a grid. For\n example in a totals row generally the rows that are not totaled are blank in\n the total row.\n </p>
org.kuali.rice.krad.uif.layout.BoxLayoutManager=Layout manager that organizes components in a single row (horizontal) or\n column (vertical)\n\n <p>\n Although a table based template could be used, setup is done to also support\n a CSS based template. The items in the <code>Container</code> instance are\n rendered sequentially wrapping each one with a span element. The padding\n property can be configured to space the elements as needed. To achieve a\n vertical orientation, the span style is set to block. Additional styling can\n be set for the items by using the itemSpanStyle property.\n </p>
org.kuali.rice.krad.uif.layout.BoxLayoutManager|itemStyleClasses|List=List of style classes that should be applied to each span that wraps the item in the layout
org.kuali.rice.krad.uif.layout.BoxLayoutManager|itemStyle|String=Used by the render to set the style on the span element that wraps the\n item. By using a wrapping span the items can be aligned based on the\n orientation and given the correct padding
org.kuali.rice.krad.uif.layout.BoxLayoutManager|orientation|UifConstants.Orientation=Indicates whether the components should be rendered in a horizontal or\n vertical column
org.kuali.rice.krad.uif.layout.BoxLayoutManager|padding|String=Amount of separation between each item\n\n <p>\n For horizontal orientation, this will be the right padding for each item.\n For vertical, it will be the bottom padding for each item. The value can\n be a fixed length (like px) or percentage\n </p>
org.kuali.rice.krad.uif.layout.CssGridLabelColumnLayoutManager=A Css Grid Layout which only takes fields as its content and separates out the field's labels into\n separate columns\n\n <p>This layout does not use the container's items' colspan property to influence column size.</p>
org.kuali.rice.krad.uif.layout.CssGridLabelColumnLayoutManager|labelColumnCssClass|String=The css class to use on the label column's div "cells"
org.kuali.rice.krad.uif.layout.CssGridLabelColumnLayoutManager|numberOfLabelColumns|int=The number of label columns used in this layout\n\n <p>\n The only supported values for this property are 1-3 which translates to 2-6 columns per a\n row.  This property defines how many of the total columns are label columns.\n </p>
org.kuali.rice.krad.uif.layout.CssGridLayoutManager=Css Grid Layout manager is a layout manager which creates div "rows" and "cells" to replicate a\n table look by using div elements for its items.\n\n <p>\n Items are added into rows based on their colSpan\n setting, while each row has a max size of 12 columns. By default, if colSpan is not set on an\n item, that item will take a full row.\n </p>
org.kuali.rice.krad.uif.layout.CssGridLayoutManagerBase=Css Grid Layout managers are a layout managers which creates div "rows" and "cells" to replicate a\n table look by using div elements for its items.
org.kuali.rice.krad.uif.layout.CssGridLayoutManagerBase|conditionalRowCssClasses|Map=The row css classes for the rows of this layout\n\n <p>\n To set a css class on all rows, use "all" as a key. To set a class for even rows, use "even"\n as a key, for odd rows, use "odd". Use a one-based index to target a specific row by index.\n </p>
org.kuali.rice.krad.uif.layout.CssGridLayoutManagerBase|rowLayoutCssClass|String=The layout css class used by the framework to represent the row as a row visually (currently\n using a bootstrap class), which should not be manually reset in most situations
org.kuali.rice.krad.uif.layout.CssGridLayoutManager|defaultItemSize|int=The default cell colSpan to use for this layout (max setting, and the bean default, is 12)
org.kuali.rice.krad.uif.layout.GridLayoutManager=Layout manager that organizes its components in a table based grid\n\n <p>\n Items are laid out from left to right (with each item taking up one column)\n until the configured number of columns is reached. If the item count is\n greater than the number of columns, a new row will be created to render the\n remaining items (and so on until all items are placed). Labels for the fields\n can be pulled out (default) and rendered as a separate column. The manager\n also supports the column span and row span options for the field items. If\n not specified the default is 1.\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|applyAlternatingRowStyles|boolean=Indicates whether alternating row styles should be applied\n\n <p>\n Indicator to layout manager templates to apply alternating row styles.\n See the configured template for the actual style classes used\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|applyDefaultCellWidths|boolean=Indicates whether the manager should default the cell widths\n\n <p>\n If true, the manager will set the cell width by equally dividing by the\n number of columns\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|numberOfColumns|int=Indicates the number of columns that should make up one row of data\n\n <p>\n If the item count is greater than the number of columns, a new row will\n be created to render the remaining items (and so on until all items are\n placed).\n </p>\n\n <p>\n Note this does not include any generated columns by the layout manager,\n so the final column count could be greater (if label fields are\n separate).\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|renderAlternatingHeaderColumns|boolean=Indicates whether header columns (th for tables) should be rendered for\n every other item (alternating)\n\n <p>\n If true the first cell of each row will be rendered as an header, with\n every other cell in the row as a header\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|renderFirstRowHeader|boolean=Indicates whether the first row of items rendered should all be rendered as table header (th) cells\n\n <p>\n Generally when using a grid layout all the cells will be tds or alternating th/td (with the label in the\n th cell). However in some cases it might be desired to display the labels in one row as table header cells (th)\n followed by a row with the corresponding fields in td cells. When this is enabled this type of layout is\n possible\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|renderRowFirstCellHeader|boolean=Indicates whether the first cell of each row should be rendered as a header cell (th)\n\n <p>\n When this flag is turned on, the first cell for each row will be rendered as a header cell. If\n {@link \#isRenderAlternatingHeaderColumns()} is false, the remaining cells for the row will be rendered\n as data cells, else they will alternate between cell headers\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|rowCssClasses|List=The list of styles for each row\n\n <p>\n Each entry in the list gives the style for the row with the same index. This style will be added the the <tr>\n tag\n when the table rows are rendered in the grid.tag. This is used to store the styles for newly added lines and\n other special cases like the add item row.\n </p>
org.kuali.rice.krad.uif.layout.GridLayoutManager|suppressLineWrapping|boolean=Indicates whether the number of columns for the table data should match\n the number of fields given in the container's items list (so that each\n field takes up one column without wrapping), this overrides the configured\n numberOfColumns\n\n <p>\n If set to true during the initialize phase the number of columns will be\n set to the size of the container's field list, if false the configured\n number of columns is used\n </p>
org.kuali.rice.krad.uif.layout.ListLayoutManager=List layout manager is a layout manager for group types to output their items as either ordered or\n unordered lists.
org.kuali.rice.krad.uif.layout.ListLayoutManager|orderedList|boolean=If true, this list layout is an ordered list (ol).  Otherwise, the the layout is an unordered list (ul).
org.kuali.rice.krad.uif.layout.StackedLayoutManager=Layout manager that works with {@code CollectionGroup} containers and\n renders the collection lines in a vertical row\n\n <p>\n For each line of the collection, a {@code Group} instance is created.\n The group header contains a label for the line (summary information), the\n group fields are the collection line fields, and the group footer contains\n the line actions. All the groups are rendered using the\n {@code BoxLayoutManager} with vertical orientation.\n </p>\n\n <p>\n Modify the lineGroupPrototype to change header/footer styles or any other\n customization for the line groups\n </p>
org.kuali.rice.krad.uif.layout.StackedLayoutManager|addLineGroup|Group=Group instance that will be used for the add line\n\n <p>\n Add line fields and actions configured on the\n {@code CollectionGroup} will be set onto the add line group (if add\n line is enabled). If the add line group is not configured, a new instance\n of the line group prototype will be used for the add line.\n </p>
org.kuali.rice.krad.uif.layout.StackedLayoutManager|lineGroupPrototype|Group=Group instance that is used as a prototype for creating the collection\n line groups. For each line a copy of the prototype is made and then\n adjusted as necessary
org.kuali.rice.krad.uif.layout.StackedLayoutManager|selectFieldPrototype|Field=Field instance that serves as a prototype for creating the select field on each line when\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#isIncludeLineSelectionField()} is true\n\n <p>\n This prototype can be used to set the control used for the select field (generally will be a checkbox control)\n in addition to styling and other setting. The binding path will be formed with using the\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getLineSelectPropertyName()} or if not set the\n framework\n will use {@link org.kuali.rice.krad.web.form.UifFormBase\#getSelectedCollectionLines()}\n </p>
org.kuali.rice.krad.uif.layout.StackedLayoutManager|stackedGroups|List=Final {@code List} of Groups to render for the collection
org.kuali.rice.krad.uif.layout.StackedLayoutManager|subCollectionFieldGroupPrototype|FieldGroup=Field group instance that is used as a prototype for creating the\n sub-collection field groups. For each sub-collection a copy of the\n prototype is made and the list will be passed to the layout manager\n buildLine method
org.kuali.rice.krad.uif.layout.StackedLayoutManager|summaryFields|List=List of attribute names from the collection line class that should be\n used to build the line summary. To build the summary the value for each\n attribute is retrieved from the line instance. All the values are then\n placed together with a separator.
org.kuali.rice.krad.uif.layout.StackedLayoutManager|summaryTitle|String=Text to appears in the header for each collection lines Group. Used in\n conjunction with {@link \#getSummaryFields()} to build up the final header\n text
org.kuali.rice.krad.uif.layout.StackedLayoutManager|wrapperGroup|Group=Group that will 'wrap' the generated collection lines so that they have a different layout from the general\n stacked layout\n\n <p>\n By default (when the wrapper group is null), each collection line will become a group and the groups are\n rendered one after another. If the wrapper group is configured, the generated groups will be inserted as the\n items for the wrapper group, and the layout manager configured for the wrapper group will determine how they\n are rendered. For example, the layout manager could be a grid layout configured for three columns, which would\n layout the first three lines horizontally then break to a new row.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager=Layout manager that works with {@code CollectionGroup} components and renders the collection as a\n Table\n\n <p>\n Based on the fields defined, the {@code TableLayoutManager} will dynamically create instances of\n the fields for each collection row. In addition, the manager can create standard fields like the\n action and sequence fields for each row. The manager supports options inherited from the\n {@code GridLayoutManager} such as rowSpan, colSpan, and cell width settings.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|actionColumnIndex|int=Indicates the index of the action column
org.kuali.rice.krad.uif.layout.TableLayoutManager|actionColumnPlacement|String=Indicates the actions column placement\n\n <p>\n Valid values are 'LEFT', 'RIGHT' or any valid number. The default is 'RIGHT' or '-1'. The\n column placement index takes all displayed columns, including sequence and selection columns,\n into account.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|actionFieldPrototype|FieldGroup={@code FieldGroup} instance to serve as a prototype for the actions column. For each\n collection line this instance is copied and adjusted as necessary. Note the actual actions\n for the group come from the collection groups actions List\n (org.kuali.rice.krad.uif.container.CollectionGroup.getActions()). The FieldGroup prototype is\n useful for setting styling of the actions column and for the layout of the action fields.\n Note also the label associated with the prototype is used for the action column header
org.kuali.rice.krad.uif.layout.TableLayoutManager|addLineGroup|Group=When {@link \#isSeparateAddLine()} is true, this group will be used to render the add line\n\n <p>\n This group can be used to configure how the add line will be rendered. For example the layout\n manager configured on the group will be used to rendered the add line fields. If the header\n (title) is not set on the group, it will be set from\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getAddLabel()}. In addition,\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getAddLineActions()} will be added\n to the group footer items.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|columnCalculations|List=Gets the column calculations. This is a list of ColumnCalcuationInfo that when set provides\n calculations to be performed on the columns they specify. These calculations appear in the\n table's footer. This feature is only available when using richTable functionality.
org.kuali.rice.krad.uif.layout.TableLayoutManager|conditionalRowCssClasses|Map=The row css classes for the rows of this layout\n\n <p>\n To set a css class on all rows, use "all" as a key. To set a class for even rows, use "even"\n as a key, for odd rows, use "odd". Use a one-based index to target a specific row by index.\n SpringEL can be used as a key and the expression will be evaluated; if evaluated to true, the\n class(es) specified will be applied.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|generateAutoSequence|boolean=Indicates whether the sequence field should be generated with the current line number\n\n <p>\n If set to true the sequence field prototype will be changed to a message field (if not\n already a message field) and the text will be set to the current line number\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupTotalLabelPrototype|Label=The groupTotal label to use when renderOnlyLeftTotalLabels is TRUE. This label will appear in\n the left most column.
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupingPrefix|String=Get the groupingPrefix. The groupingPrefix is used to prefix the generated title (not used\n when groupingTitle is set directly) when using groupingPropertyNames.
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupingPropertyNames|List=Gets the list of property names to use for grouping.\n\n <p>\n When this property is set, grouping for this collection will be enabled and the lines of the\n collection will be grouped by the propertyName(s) supplied. Supplying multiple property names\n will cause the grouping to be on multiple fields and ordered alphabetically on\n "propetyValue1, propertyValue2" (this is also how the group title will display for each\n group). The property names supplied must be relative to the line, so \#lp SHOULD NOT be used\n (it is assumed automatically).\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupingTitle|String=Get the groupingTitle. The groupingTitle MUST contain a SpringEL expression to uniquely\n identify a group's line (ie it cannot be a static string because each group must be\n identified by some value). <b>This overrides groupingPropertyNames(if set) because it\n provides full control of grouping value used by the collection. SpringEL defined here must\n use \#lp if referencing values of the line.</b>
org.kuali.rice.krad.uif.layout.TableLayoutManager|headerLabelPrototype|Label={@code Label} instance to use as a prototype for creating the tables header fields. For each\n header field the prototype will be copied and adjusted as necessary
org.kuali.rice.krad.uif.layout.TableLayoutManager|hiddenColumns|Set=Holds propertyNames for the ones meant to be hidden since columns are visible by default\n \n <p>\n Duplicate entries are ignored and the order of entries is not significant\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|numberOfDataColumns|int=
org.kuali.rice.krad.uif.layout.TableLayoutManager|pageTotalLabel|Label=The pageTotal label to use when renderOnlyLeftTotalLabels is TRUE for total. This label will\n appear in the left most column.
org.kuali.rice.krad.uif.layout.TableLayoutManager|renderOnlyLeftTotalLabels|boolean=When true, labels for the totals fields will only appear in the left most column. Showing of\n the totals is controlled by the settings on the TableLayoutManager itself when this property\n is true.
org.kuali.rice.krad.uif.layout.TableLayoutManager|renderSequenceField|boolean=Indicates whether the sequence field should be rendered for the collection
org.kuali.rice.krad.uif.layout.TableLayoutManager|repeatHeader|boolean=Indicates whether the header should be repeated before each collection row. If false the\n header is only rendered at the beginning of the table
org.kuali.rice.krad.uif.layout.TableLayoutManager|richTable|RichTable=Widget associated with the table to add functionality such as sorting, paging, and export
org.kuali.rice.krad.uif.layout.TableLayoutManager|rowDetailsGroup|Group=The row details info group to use when using a TableLayoutManager with the a richTable.\n\n <p>\n This group will be displayed when the user clicks the "Details" link/image on a row. This\n allows extra/long data to be hidden in table rows and then revealed during interaction with\n the table without the need to leave the page. Allows for any group content.\n </p>\n\n <p>\n Does not currently work with javascript required content.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|selectFieldPrototype|Field=Field instance that serves as a prototype for creating the select field on each line when\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#isIncludeLineSelectionField()} is\n true\n\n <p>\n This prototype can be used to set the control used for the select field (generally will be a\n checkbox control) in addition to styling and other setting. The binding path will be formed\n with using the\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getLineSelectPropertyName()} or if\n not set the framework will use\n {@link org.kuali.rice.krad.web.form.UifFormBase\#getSelectedCollectionLines()}\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|separateAddLine|boolean=Indicates whether the add line should be rendered in a separate group, or as part of the\n table (first line)\n\n <p>\n When separate add line is enabled, the fields for the add line will be placed in the\n {@link \#getAddLineGroup()}. This group can be used to configure the add line presentation. In\n addition to the fields, the header on the group (unless already set) will be set to\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getAddLabel()} and the add line\n actions will be placed into the group's footer.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|sequenceFieldPrototype|Field={@code Field} instance to serve as a prototype for the sequence field. For each collection\n line this instance is copied and adjusted as necessary
org.kuali.rice.krad.uif.layout.TableLayoutManager|sequencePropertyName|String=Attribute name to use as sequence value. For each collection line the value of this field on\n the line will be retrieved and used as the sequence value
org.kuali.rice.krad.uif.layout.TableLayoutManager|showGroupTotal|boolean=Gets showGroupTotal. showGroupTotal shows/calculates the total field for each grouping when\n true (and only when the table actually has grouping turned on), otherwise it is not rendered. <br/>\n <b>Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the\n ColumnConfigurationInfo setting. Otherwise, the ColumnConfigurationInfo setting takes\n precedence.</b>
org.kuali.rice.krad.uif.layout.TableLayoutManager|showPageTotal|boolean=Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not\n rendered. <br/>\n <b>Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the\n ColumnConfigurationInfo setting. Otherwise, the ColumnConfigurationInfo setting takes\n precedence.</b>
org.kuali.rice.krad.uif.layout.TableLayoutManager|showTotal|boolean=Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not\n rendered. <br/>\n <b>Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the\n ColumnConfigurationInfo setting. Otherwise, the ColumnConfigurationInfo setting takes\n precedence.</b>
org.kuali.rice.krad.uif.layout.TableLayoutManager|sortableColumns|Set=Holds the propertyNames for columns that are to be sorted\n \n <p>\n Duplicate entries are ignored and the order of entries is not significant\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|subCollectionFieldGroupPrototype|FieldGroup=Field group instance that is used as a prototype for creating the\n sub-collection field groups. For each sub-collection a copy of the\n prototype is made and the list will be passed to the layout manager\n buildLine method
org.kuali.rice.krad.uif.layout.TableLayoutManager|totalLabel|Label=The total label to use when renderOnlyLeftTotalLabels is TRUE for total. This label will\n appear in the left most column.
org.kuali.rice.krad.uif.layout.TableLayoutManager|useShortLabels|boolean=Indicates whether the short label for the collection field should be used as the table header\n or the regular label
org.kuali.rice.krad.uif.modifier.ComparableInfo=Provides configuration for comparing an object with another object\n\n <p>\n Used with a comparison view (such as in maintenance documents edit mode)\n where two objects with the same properties are compared. This class\n configures the object paths for the objects that will be compared, and has\n additional configuration for the generated comparison group\n </p>\n\n <p>\n All comparison objects must have the same fields and collection rows\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|bindingObjectPath|String=Returns the path (from the form) for the object to compare to\n\n <p>\n When a comparison view is rendered, a group will be rendered for each\n comparison object using the fields defined on the view. This gives the\n path to one of the comparison objects\n </p>\n\n <p>\n e.g. For maintenance documents the compare object paths would be\n document.newMaintainableObject.businessObject and\n document.oldMaintainableObject.businessObject\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|compareToForValueChange|boolean=Indicates whether this comparable group's field values should be compared\n to when highlighting changes of values between comparables (versions)
org.kuali.rice.krad.uif.modifier.ComparableInfo|headerText|String=Text that should display on the header for the compare group\n\n <p>\n In the comparison view each compare group can be labeled, this gives the\n text that should be used for that label. For example in the maintenance\n view the compare record is labeled 'Old' to indicate it is the old\n version of the record\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|highlightValueChange|boolean=Indicates whether the fields in this comparable group should be\n highlighted if their values defer from the comparable group marked for\n comparison
org.kuali.rice.krad.uif.modifier.ComparableInfo|idSuffix|String=Specifies an id suffix to use for the generated comparison fields\n\n <p>\n For the given string, all components created for the comparison group\n will contain the string on their id. This can be helpful for scripting.\n If not given, the items will receive a default id suffix\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|order|int=Sets the order value that will be used to determine where the compare\n group should be placed in relation to the other compare groups\n\n <p>\n For example if the compare groups are being rendered from left to right\n in columns, a lower order value would be placed to the left of a compare\n group with a higher order value\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|readOnly|boolean=Indicates whether the compare group should be read-only
org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier=Generates <code>Field</code> instances to produce a comparison view among\n objects of the same type\n\n <p>\n Modifier is initialized with a List of <code>ComparableInfo</code> instances.\n For each comparable info, a copy of the configured group field is made and\n adjusted to the binding object path for the comparable. The comparison fields\n are ordered based on the configured order property of the comparable. In\n addition, a <code>HeaderField<code> can be generated to label each group\n of comparison fields.\n </p>
org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier|comparables|List=List of <code>ComparableInfo</code> instances the compare fields should\n be generated for\n\n <p>\n For each comparable, a copy of the fields configured for the\n <code>Group</code> will be created for the comparison view\n </p>
org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier|defaultOrderSequence|int=Indicates the starting integer sequence value to use for\n <code>ComparableInfo</code> instances that do not have the order property\n set
org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier|generateCompareHeaders|boolean=Indicates whether a <code>HeaderField</code> should be created for each\n group of comparison fields\n\n <p>\n If set to true, for each group of comparison fields a header field will\n be created using the headerFieldPrototype configured on the modifier with\n the headerText property of the comparable\n </p>
org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier|headerFieldPrototype|Header=Prototype instance to use for creating the <code>HeaderField</code> for\n each group of comparison fields (if generateCompareHeaders is true)
org.kuali.rice.krad.uif.modifier.ComponentConvertModifier=For a given <code>Component</code> instance converts all component properties\n of a certain type to instances of another configured <code>Component</code>.\n The conversion is performed recursively down all the component children\n\n <p>\n Some example uses of this are converting all checkbox controls to radio group\n controls within a group and replacement of a widget with another\n </p>
org.kuali.rice.krad.uif.modifier.ComponentConvertModifier|componentReplacementPrototype|Component=Prototype for the component replacement\n\n <p>\n Each time the type to replace if found a new instance of the component\n prototype will be created and set as the new property value\n </p>
org.kuali.rice.krad.uif.modifier.ComponentConvertModifier|componentTypeToReplace|Class=Type of component that should be replaced with an instance of the\n component prototype
org.kuali.rice.krad.uif.modifier.LabelSeparateModifier=Pulls <code>Label</code> instances out of a contained field so they will\n be placed separately in the <code>LayoutManager</code>
org.kuali.rice.krad.uif.util.BreadcrumbItem=BreadcrumbItem represents a single item in the breadcrumb list that is generated by the breadcrumbs widget
org.kuali.rice.krad.uif.util.BreadcrumbItem|label|String=The label for this breadcrumbItem.  The label is the textual content that will be displayed for the breadcrumb.
org.kuali.rice.krad.uif.util.BreadcrumbItem|renderAsLink|boolean=If true, the breadcrumbItem will render as a link, otherwise it will render as a span (not-clickable).\n By default, the last BreadcrumbItem in the list will ALWAYS render as span regardless of this property's value.
org.kuali.rice.krad.uif.util.BreadcrumbItem|siblingBreadcrumbComponent|Component=Set the breadcrumb component for this breadcrumbs sibling content/navigation.  This content will appear in\n a pop-up menu.
org.kuali.rice.krad.uif.util.BreadcrumbItem|url|UrlInfo=The url used for the breadcrumb link represented by this item
org.kuali.rice.krad.uif.util.BreadcrumbOptions=BreadcrumbOptions represents the options for the current view breadcrumbs that are displayed.\n\n <p>\n This class allows\n for complete override of all breadcrumbs, and ability to add breadcrumbs before the view and page breadcrumb items.\n Important note\: breadcrumbOptions for preViewBreadcrumbs, prePageBreadcrumbs, and\n breadcrumbOverrides are inherited from the View if not explicitly set from the PageGroup level's breadcrumbOptions\n (if they contain a value at the view level and the property is null at the page level - default behavior).\n Explicitly providing an empty list or setting these properties at the PageGroup level will\n override this inheritance.\n </p>
org.kuali.rice.krad.uif.util.BreadcrumbOptions|breadcrumbOverrides|List=The breadcrumbOverrides are a complete override for all breadcrumbs shown expect for parent location/path\n breadcrumbs.\n\n <p>\n The BreadcrumbItems set in this list will be used instead of any View, PageGroup, preViewBreadcrumbs, or\n prePageBreadcrumbs BreadcrumbItems already set.  Each item can be customized fully.  If\n parent location/path breadcrumbs should also not be shown, set renderParentLocations to false.\n All other render options set in BreadcrumbOptions will be ignored/not apply as a result of setting this override\n list.\n </p>
org.kuali.rice.krad.uif.util.BreadcrumbOptions|homewardPathBreadcrumbs|List=The homewardPathBreadcrumbs represent the path to "Home" location, these appear before anything else - including\n parentLocation/path based breadcrumbs.
org.kuali.rice.krad.uif.util.BreadcrumbOptions|prePageBreadcrumbs|List=The prePageBreadcrumbs list represents BreadcrumbItems that will be shown before the PageGroup's BreadcrumbItem,\n but after the View's BreadcrumbItem.
org.kuali.rice.krad.uif.util.BreadcrumbOptions|preViewBreadcrumbs|List=The preViewBreadcrumbs list represents BreadcrumbItems that will be shown before the View's BreadcrumbItem,\n but after any parent location breadcrumbs/path based breadcrumbs (if in use)
org.kuali.rice.krad.uif.util.ColumnCalculationInfo=ColumnCalculationInfo is used to specify which columns and what types of calculations are performed on those columns\n of table collection.  This functionality can only be used when the dataTables plugin is being used\n (richTable.render\="true" for TableLayoutManager)
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|calculateOnKeyUp|boolean=If true, the column is calculated when the user enters a character on each key up.  There is a small delay\n built in to prevent calculations from being fired for each key stroke.
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|calculationFunctionExtraData|String=This specifies extra data to be sent to the calculation function.  This can be any valid javascript value\n (number, string, JSON - for passing multiple settings, etc).\n <br/>\n <b>The function specified by calculationFunctionName MUST take a second parameter when using this option.</b>
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|calculationFunctionName|String=Gets the js calculationFunctionName.  This is the name of the js function to use in column calculations.\n\n <p>\n <b>This must be ONLY the function by name (no parenthesis or params)</b><br/>\n The actual js function declaration MUST take in an array of values as its first parameter.  The values passed in\n will be all the relavant values for the calculation.  Optionally, the function can also take a second parameter\n which can be specified by calculationFunctionExtraData.  This parameter can take any valid javascript value\n (integer, string, JSON object, etc).  In either case, the values parameter MUST be the first parameter.\n </p>
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|columnNumber|Integer=Gets the column number.  This should not be set through configuration as it is overridden by the\n propertyName's caclculated column number.  <b>Do not set through xml configuration</b>
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|groupTotalFieldPrototype|MessageField=Gets the groupTotalFieldPrototype.  This field is copied and holds the groupTotal for the column\n and specifies its label. This SHOULD NOT BE SET except by the base bean (in MOST cases).
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|pageTotalField|MessageField=Gets the pageTotalField.  This field is the field which holds the pageTotal for the column\n and specifies its label. This SHOULD NOT BE SET except by the base bean (in MOST cases).
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|propertyName|String=Get the propertyName of the field to do calculations.  This field MUST exist as one of the fields\n of the collection.  <b>This property must be set or an exception will be thrown.</b>
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|recalculateTotalClientSide|boolean=When set to false, calculations will not be fired for the totalField client-side.  This ONLY effects the\n totalField.  If page and group totals are still shown, they will (and can only) be calculated client-side.\n\n <p>\n To use this particular feature\: set this to false, and use springEL in the totalField's message.messageText\n to get a pre-calculated total from a field on the form.  This will be refreshed when the table is refreshed,\n but will not be updated by client-side interactions - used for complex or special calculation mechanisms\n that may require server only information.\n </p>
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|showGroupTotal|boolean=Gets showGroupTotal. showGroupTotal shows/calculates the total field for each grouping when true (and only\n when the table actually has grouping turned on), otherwise it is not rendered.
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|showPageTotal|boolean=Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not rendered.
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|showTotal|boolean=Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not rendered.
org.kuali.rice.krad.uif.util.ColumnCalculationInfo|totalField|MessageField=Gets the totalField.  This field is the field which holds the total for the column and specifies its label.\n This SHOULD NOT BE SET except by the base bean (in MOST cases).
org.kuali.rice.krad.uif.util.PageBreadcrumbOptions=BreadcrumbOptions specific to page.  Render options are only available at the page level.
org.kuali.rice.krad.uif.util.PageBreadcrumbOptions|renderHomewardPathBreadcrumbs|boolean=If true, render the homewardPathBreadcrumbs (if any are set), otherwise do not render them
org.kuali.rice.krad.uif.util.PageBreadcrumbOptions|renderParentLocations|boolean=If true, render the parent location breadcrumbs.  These BreadcrumbItems are automatically generated based on the\n view's parentLocation property settings by traversing parent views/pages or based on a history path.
org.kuali.rice.krad.uif.util.PageBreadcrumbOptions|renderPrePageBreadcrumbs|boolean=If true, render the prePageBreadcrumbs (if any are set), otherwise do not render them
org.kuali.rice.krad.uif.util.PageBreadcrumbOptions|renderPreViewBreadcrumbs|boolean=If true, render the preViewBreadcrumbs (if any are set), otherwise do not render them
org.kuali.rice.krad.uif.util.PageBreadcrumbOptions|renderViewBreadcrumb|boolean=Whether or not to render the view breadcrumb at this level
org.kuali.rice.krad.uif.util.ParentLocation=ParentLocation is used to provide automatic generation/determination of Views/Pages that occur before the current\n View.  Essentially, this class provides a way to determine a conceptual hierarchy of view/page locations.\n This information is used internally to generate BreadcrumbItems that can appear before the View's breadcrumbs.
org.kuali.rice.krad.uif.util.ParentLocation|pageBreadcrumbItem|BreadcrumbItem=The pageBreadcrumbItem to use for the parent location view breadcrumb.  Url should NOT be set here because\n parentPageUrl is ALWAYS set into this breadcrumbItem, regardless of value.
org.kuali.rice.krad.uif.util.ParentLocation|parentPageLabel|String=The parentPageLabel is the text used for breadcrumbItem label of the parent page.\n\n <p>\n If not set, the the label is determined\n by looking at the parent PageGroup's breadcrumbItem and then its headerText.  This retrieval can only happen\n if the parentViewUrl is set.\n If the parent PageGroup's retrieved value\n contain expressions, those expressions must be able to be evaluated in the current context (ie, the properties\n they reference must also exist on the current form at the same location) or an exception will be thrown.\n </p>
org.kuali.rice.krad.uif.util.ParentLocation|parentPageUrl|UrlInfo=The parentPageUrl representing a page url that is the parent of this View.  In order for automated label\n determination to work for the page breadcrumbItem, the viewId and controllerMapping must match with the\n parentViewUrl.\n\n <p>\n This url can explicitly set an href or can set a pageId.  The parentViewUrl MUST be set before this option can\n be set.  If the needed behavior is such that the parent view breadcrumbItem should not be shown and only this\n item should be shown, set 'parentLocation.viewBreadcrumbItem.render' to false.\n </p>
org.kuali.rice.krad.uif.util.ParentLocation|parentViewLabel|String=The parentViewLabel is the text used for breadcrumbItem label of the parent view.\n\n <p>\n If not set, the the label is determined\n by looking at the parent View's breadcrumbItem and then its headerText.  If the parent view's retrieved value\n contain expressions, those expressions must be able to be evaluated in the current context (ie, the properties\n they reference must also exist on the current form at the same location) or an exception will be thrown.\n </p>
org.kuali.rice.krad.uif.util.ParentLocation|parentViewUrl|UrlInfo=The parentViewUrl representing the url that is the parent of this View.\n\n <p>\n This url can explicitly set an href\n or can set a controller and viewId.  Parent view traversal is only performed if the controller and viewId\n properties are set and NOT the explicit href (this affects if breadcrumbs are generated in a recursive chain).\n </p>
org.kuali.rice.krad.uif.util.ParentLocation|viewBreadcrumbItem|BreadcrumbItem=The viewBreadcrumbItem to use for the parent location view breadcrumb.  Url should NOT be set here because\n parentViewUrl is ALWAYS set into this breadcrumbItem, regardless of value.
org.kuali.rice.krad.uif.util.UifKeyValue=KRAD version of KeyValue to enable use in schema
org.kuali.rice.krad.uif.util.UifKeyValueLocation=KeyValue that has an additional location property that takes a Url object.  When this is used with a dropdown or\n an optionList control, those options become navigation controls.
org.kuali.rice.krad.uif.util.UifKeyValueLocation|location|UrlInfo=Get the url object representing the location
org.kuali.rice.krad.uif.util.UifKeyValue|key|String=
org.kuali.rice.krad.uif.util.UifKeyValue|value|String=
org.kuali.rice.krad.uif.util.UrlInfo=This object represents a url in the Krad framework.  The url can be set explicitly to a specific href or a\n controller\n plus a viewId can be provided (at very minimum).  By default, the krad base bean config points the baseUrl property\n to 'krad.url' configuration property and the methodToCall to 'start', but these can be reset to any value as needed.\n\n <p>\n If href is not set, the generated value of href is constructed (in general) as follows\:<br/>\n baseUrl + /controllerMapping + ? + methodToCall param + viewId param + other parameters\n <br/>\n with any necessary tokens to construct a valid url.  If baseUrl is not provided, the url is not valid and a\n blank string is returned.\n </p>
org.kuali.rice.krad.uif.util.UrlInfo|baseUrl|String=The base url value (the value that comes before other properties).  Default base bean value is set to use\n 'krad.url' of the configuration properties.
org.kuali.rice.krad.uif.util.UrlInfo|controllerMapping|String=The controllerMapping for the url (string that represents the controllerMapping path appended to baseUrl)
org.kuali.rice.krad.uif.util.UrlInfo|formKey|String=FormKey representing the key of the form data to retrieve
org.kuali.rice.krad.uif.util.UrlInfo|href|String=Get the href value for this url object.  This is the main call to this url object as it provides the full href\n value represented by this object.\n\n <p>\n If href has NOT been explicitly set to a value, the href is generated by\n constructing pieces of the url set through the properties of this url object.\n The generated value of href is constructed (in general) as follows\:<br/>\n baseUrl + /controllerMapping + ? + methodToCall param + viewId param + other parameters\n <br/>\n with any necessary tokens to construct a valid url.  If baseUrl is not provided, the url is not valid and a\n blank string is returned.\n </p>
org.kuali.rice.krad.uif.util.UrlInfo|methodToCall|String=MethodToCall representing the methodToCall on the controller (default base bean value is 'start')
org.kuali.rice.krad.uif.util.UrlInfo|pageId|String=PageId representing the page of the view to retrieve by id
org.kuali.rice.krad.uif.util.UrlInfo|requestParameters|Map=Map of key value pairs that will be appended to the request parameters to pass in any custom data
org.kuali.rice.krad.uif.util.UrlInfo|viewId|String=ViewId representing the view by id to retrieve
org.kuali.rice.krad.uif.util.UrlInfo|viewType|String=The viewType representing the View's base type
org.kuali.rice.krad.uif.view.DocumentView=View type for KRAD documents\n\n <p>\n Provides commons configuration and default behavior applicable to documents\n in the KRAD module.\n </p>
org.kuali.rice.krad.uif.view.DocumentView|allowsNoteAttachments|boolean=Gets boolean that indicates if the document view allows note attachments
org.kuali.rice.krad.uif.view.DocumentView|allowsNoteFYI|boolean=Gets boolean that indicates if the document view allows note FYI
org.kuali.rice.krad.uif.view.DocumentView|attachmentTypesValuesFinderClass|Class=Gets attachment types values finder classs
org.kuali.rice.krad.uif.view.DocumentView|displayTopicFieldInNotes|boolean=Gets boolean that indicates if the document view displays the topic field in notes
org.kuali.rice.krad.uif.view.DocumentView|documentClass|Class=Gets the document class
org.kuali.rice.krad.uif.view.FormView=Provides configuration for {@link View} instances that render an HTML form.
org.kuali.rice.krad.uif.view.FormView|formPostUrl|String=Specifies the URL the view's form should post to\n\n <p>\n Any valid form post URL (full or relative) can be specified. If left\n empty, the form will be posted to the same URL of the preceding request\n URL.\n </p>
org.kuali.rice.krad.uif.view.FormView|renderForm|boolean=Indicates whether a Form element should be rendered for the View. This is\n necessary for pages that need to submit data back to the server. Note\n that even if a page is read-only, a form element is generally needed for\n the navigation. Defaults to true
org.kuali.rice.krad.uif.view.FormView|validateClientSide|boolean=Indicates whether to perform on-the-fly validation on the client using js\n during user data entry. Defaults to true
org.kuali.rice.krad.uif.view.FormView|validateServerSide|boolean=Indicates whether to perform the validate model phase of the view\n lifecycle. This phase will validate the model against configured\n dictionary validations and report errors. Defaults to true
org.kuali.rice.krad.uif.view.HistoryEntry=A simple object that keeps track of various HistoryInformation\n\n TODO a variety of these settings are not used in the current implementation of breadcrumbs\n and history, they may be removed later if they prove unuseful in future changes
org.kuali.rice.krad.uif.view.HistoryEntry|formKey|String=
org.kuali.rice.krad.uif.view.HistoryEntry|pageId|String=The pageId of the page on the view
org.kuali.rice.krad.uif.view.HistoryEntry|title|String=The title of the view
org.kuali.rice.krad.uif.view.HistoryEntry|url|String=The url of this HistoryEntry
org.kuali.rice.krad.uif.view.HistoryEntry|viewId|String=The viewId of the view
org.kuali.rice.krad.uif.view.InquiryView=Type of <code>View</code> that provides a read-only display of a record of\n data (object instance)\n\n <p>\n The <code>InquiryView</code> provides the interface for the Inquiry\n framework. It works with the <code>Inquirable</code> service and inquiry\n controller. The view does render a form to support the configuration of\n actions to perform operations on the data.\n </p>\n\n <p>\n Inquiry views are primarily configured by the object class they are\n associated with. This provides the default dictionary information for the\n fields. If more than one inquiry view is needed for the same object class,\n the view name can be used to further identify an unique view\n </p>
org.kuali.rice.krad.uif.view.InquiryView|dataObjectClassName|Class=Class name for the object the inquiry applies to\n\n <p>\n The object class name is used to pick up a dictionary entry which will\n feed the attribute field definitions and other configuration. In addition\n it is used to configure the <code>Inquirable</code> which will carry out\n the inquiry action\n </p>
org.kuali.rice.krad.uif.view.MaintenanceDocumentView=View type for Maintenance documents\n\n <p>\n Supports primary display for a new maintenance record, in which case the\n fields are display for populating the new record, and an edit maintenance\n record, which is a comparison view with the old record read-only on the left\n side and the new record (changed record) on the right side\n </p>\n\n <p>\n The <code>MaintenanceDocumentView</code> provides the interface for the maintenance\n framework. It works with the <code>Maintainable</code> service and\n maintenance controller.\n </p>\n\n <p>\n Maintenance views are primarily configured by the object class they are\n associated with. This provides the default dictionary information for the\n fields. If more than one maintenance view is needed for the same object\n class, the view name can be used to further identify an unique view\n </p>
org.kuali.rice.krad.uif.view.MaintenanceDocumentView|dataObjectClassName|Class=Class name for the object the maintenance document applies to\n\n <p>\n The object class name is used to pick up a dictionary entry which will\n feed the attribute field definitions and other configuration. In addition\n it is used to configure the <code>Maintainable</code> which will carry\n out the maintenance action\n </p>
org.kuali.rice.krad.uif.view.MaintenanceDocumentView|maintenanceAction|String=Indicates what maintenance action (new, edit, copy) was\n requested
org.kuali.rice.krad.uif.view.MaintenanceDocumentView|oldObjectBindingPath|String=Gives the binding path to the old object (record being edited) to display\n for comparison
org.kuali.rice.krad.uif.view.View=Root of the component tree which encompasses a set of related\n <code>GroupContainer</code> instances tied together with a common page layout\n and navigation.\n\n <p>\n The <code>View</code> component ties together all the components and\n configuration of the User Interface for a piece of functionality. In Rice\n applications the view is typically associated with a <code>Document</code>\n instance.\n </p>\n\n <p>\n The view template lays out the common header, footer, and navigation for the\n related pages. In addition the view renders the HTML head element bringing in\n common script files and style sheets, along with optionally rendering a form\n element for pages that need to post data back to the server.\n </p>\n\n <p>\n Configuration of UIF features such as model validation is also done through\n the <code>View</code>\n </p>
org.kuali.rice.krad.uif.view.ViewAuthorizerBase=Implementation of {@link ViewAuthorizer} that verifies authorization with KIM permission checks\n\n <p>\n Each permission goes through one of the isAuthorized methods provided by\n {@link org.kuali.rice.krad.bo.DataObjectAuthorizer}, these in turn call {@link \#addPermissionDetails(Object, java.util.Map)}\n and {@link \#addRoleQualification(Object, java.util.Map)} for building the permission and role maps to send with\n the permission check. Subclasses can override these methods to add additional attributes\n </p>
org.kuali.rice.krad.uif.view.ViewAuthorizerBase|configurationService|ConfigurationService=
org.kuali.rice.krad.uif.view.ViewPresentationControllerBase=Implementation of {@link ViewPresentationController} that implements no logic by default
org.kuali.rice.krad.uif.view.ViewTheme=Holds a configuration of CSS and JS assets that provides the base for one or more views.\n\n <p>\n The list of CSS and JS files that are sourced in for a view come from its theme, along with any\n additional files configured for the specific view. Generally an application will have one theme for the\n entire application.\n\n The theme has logic for 'dev' mode versus 'test/prod' mode. This is controlled through the\n {@code rice.krad.dev.mode} configuration variable. In development mode it will source in all the CSS\n and JS files individually (to allow for easier debugging). In non-development mode it will source in a\n minified file. The path for the minified files can be specified by setting {@link \#getMinCssFile()} and\n {@link \#getMinScriptFile()}. If not set, it will be formed by using the {@link \#getName()},\n {@link \#getMinVersionSuffix()}, and min suffix (this is the file name generated by the theme builder). To\n indicate the min file should not be sourced in regardless of the environment, set the property\n {@link \#isIncludeMinFiles()} to false\n\n The path to the minified file is determined by {@link \#getDirectory()}. It this is not set, it is defaulted to\n be '/themes' plus the name of the theme (eg '/themes/kboot')\n </p>\n\n <p>\n There are two ways the theme can be configured, manual or by convention. If you want to manually configured the\n view theme, set {@link \#isUsesThemeBuilder()} to false. For dev mode, you must then set the {@link\n \#getMinCssSourceFiles()} and {@link \#getMinScriptSourceFiles()} lists to the theme files. For configuration\n by convention, only the theme {@link \#getName()} is required. The directory will be assumed to be '/themes/{name}'.\n Furthermore the list of min CSS and JS files will be retrieved from the theme.properties file created by the\n theme builder\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|cssFiles|List=List of file paths (relative to the web root) or URLs that will be sourced into the view\n as CSS files\n\n <p>\n Generally this list should be left empty, and the min file lists configured instead (or none with\n theme builder). However if there are resources that are not part of the minified CSS file that should\n be included with the theme they can be added here\n\n The minified file path (or list of individual files that make up the minification) will be added\n to the beginning of this list. Therefore any entries explicitly added through configuration will be\n sourced in last\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|directory|String=Path to the directory (relative to the web root) that holds the assets for the theme\n\n <p>\n When using the theme builder the directory is not required and will default to '/themes/{name}'\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|imageDirectory|String=Path to the directory (relative to the web root) that contains images for the theme\n\n <p>\n Configured directory will populate the {@link org.kuali.rice.krad.uif.UifConstants.ContextVariableNames\#THEME_IMAGES}\n context variable which can be referenced with an expression for an image source\n </p>\n\n <p>\n When using the theme builder the image directory is not required and will default to a sub directory of the\n theme directory with name 'images'\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|minCssFile|String=File path for the minified CSS file\n\n <p>\n When min file is not set it will be generated by using the theme directory, name, version, and min prefix.\n This corresponds to the min file names generated by the theme builder\n\n For example, with name 'kboot' and version '2.3.0' the min file name will be\n '/themes/kboot/stylesheets/kboot.2.3.0.min.css'\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|minCssSourceFiles|List=List of file paths (relative to web root) or URLs that make up the minified CSS file\n\n <p>\n In development mode, instead of sourcing in the min CSS file, the list of files specified here will\n be included. This is to facilitate easier debugging. When using the theme builder this list is automatically\n retrieved and populated from the theme properties\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|minScriptFile|String=File path for the minified JS file\n\n <p>\n When min file is not set it will be generated by using the theme directory, name, version, and min prefix.\n This corresponds to the min file names generated by the theme builder\n\n For example, with name 'kboot' and version '2.3.0' the min file name will be\n '/themes/kboot/scripts/kboot.2.3.0.min.js'\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|minScriptSourceFiles|List=List of file paths (relative to web root) or URLs that make up the minified JS file\n\n <p>\n In development mode, instead of sourcing in the min JS file, the list of files specified here will\n be included. This is to facilitate easier debugging. When using the theme builder this list is automatically\n retrieved and populated from the theme properties\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|minVersionSuffix|String=When the min file paths are not set, the min file names will be generated using the theme\n name, version, and the min suffix. This property is set to indicate the version number to use\n\n <p>\n For application themes this can be set to the config parameter ${app.version}\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|name|String=A name that identifies the view theme, when using the theme builder this should be the same as\n the directory (for example, if directory is '/themes/kboot', the theme name will be 'kboot')\n\n <p>\n <b>When using the theme builder (config by convention), the name is required configuration</b>\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|scriptFiles|List=List of file paths (relative to the web root) or URLs that will be sourced into the view\n as JS files\n\n <p>\n Generally this list should be left empty, and the min file lists configured instead (or none with\n theme builder). However if there are resources that are not part of the minified JS file that should\n be included with the theme they can be added here\n\n The minified file path (or list of individual files that make up the minification) will be added\n to the beginning of this list. Therefore any entries explicitly added through configuration will be\n sourced in last\n </p>
org.kuali.rice.krad.uif.view.ViewTheme|usesThemeBuilder|boolean=Indicates whether the theme has been built (or will be built) using the theme builder and therefore\n the theme configuration can be defaulted according to the conventions used by the builder\n\n <p>\n When set to true, only the {@link \#getName()} property is required to be configured for the theme. All\n other configuration will be determined based on convention. When manually configuring the theme, this flag\n should be turned off (by default this flag is on)\n </p>
org.kuali.rice.krad.uif.view.View|actionFlags|Map=Map of strings that flag what actions can be taken in the UI\n <p>\n These can be used in conditional expressions in the dictionary or by\n other UI logic\n </p>
org.kuali.rice.krad.uif.view.View|additionalCssFiles|List=Declares additional CSS files that should be included with the\n <code>View</code>. These files are brought into the HTML page along with\n common CSS files configured for the Rice application. Each entry should\n contain the path to the CSS file, either a relative path, path from web\n root, or full URI\n <p>\n e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',\n 'http\://my.edu/web/stacked-view.css'\n </p>
org.kuali.rice.krad.uif.view.View|additionalScriptFiles|List=Declares additional script files that should be included with the\n <code>View</code>. These files are brought into the HTML page along with\n common script files configured for the Rice application. Each entry\n contain the path to the CSS file, either a relative path, path from web\n root, or full URI\n <p>\n e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',\n 'http\://my.edu/web/myScript.js'\n </p>
org.kuali.rice.krad.uif.view.View|applicationFooter|Group=Footer for the application containing the view\n\n <p>\n When deploying outside a portal, the application header and footer property can be configured to\n display a consistent header/footer across all views. Here such things as application links, copyrights\n and so on can be rendered.\n </p>
org.kuali.rice.krad.uif.view.View|applicationHeader|Header=Header for the application containing the view\n\n <p>\n When deploying outside a portal, the application header and footer property can be configured to\n display a consistent header/footer across all views. Here application logos, menus, login controls\n and so on can be rendered.\n </p>
org.kuali.rice.krad.uif.view.View|applyDirtyCheck|boolean=Indicates whether the form should be validated for dirtyness\n\n <p>\n For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the\n InputFields will be validated on refresh, navigate, cancel or close Action or on form\n unload and if dirty, displays a message and user can decide whether to continue with\n the action or stay on the form. For lookup and inquiry, it's not needed to validate.\n </p>
org.kuali.rice.krad.uif.view.View|authorizer|ViewAuthorizer=Authorizer that should be used for the <code>View</code> instance\n\n <p>\n The authorizer class is consulted to determine component (group, field)\n state such as required, read-only, and hidden based on the users\n permissions. It typically communicates with the Kuali Identity Management\n system to determine roles and permissions. It is used with the\n presentation controller and dictionary conditional logic to determine the\n final component state. The authorizer can also output action flags and\n edit modes that will be set onto the view instance and can be referred to\n by conditional expressions\n </p>
org.kuali.rice.krad.uif.view.View|breadcrumbItem|BreadcrumbItem=The View's breadcrumbItem defines settings for the breadcrumb which appears in the breadcrumb list for this\n view.
org.kuali.rice.krad.uif.view.View|breadcrumbOptions|BreadcrumbOptions=The breadcrumbOptions for this view.\n\n <p>Render options set at the view level are always ignored (only apply to\n page level BreadcrumbOptions).  BreadcrumbOptions for homewardPathBreadcrumbs,\n preViewBreadcrumbs, prePageBreadcrumbs,\n and breadcrumbOverrides are inherited by\n child pages unless they override them themselves.</p>
org.kuali.rice.krad.uif.view.View|breadcrumbs|Breadcrumbs=Breadcrumb widget used for displaying homeward path and history
org.kuali.rice.krad.uif.view.View|defaultBindingObjectPath|String=For <code>View</code> types that work primarily with one nested object of\n the form (for instance document, or bo) the default binding object path\n can be set for each of the views <code>DataBinding</code> components. If\n the component does not set its own binding object path it will inherit\n the default
org.kuali.rice.krad.uif.view.View|dialogs|List=Provide a list of dialog groups associated with this view
org.kuali.rice.krad.uif.view.View|editModes|Map=Map of edit modes that enabled for the view\n\n <p>\n These can be used in conditional expressions in the dictionary or by\n other UI logic\n </p>
org.kuali.rice.krad.uif.view.View|entryPageId|String=Specifies what page should be rendered by default. This is the page that\n will be rendered when the <code>View</code> is first rendered or when the\n current page is not set
org.kuali.rice.krad.uif.view.View|expressionVariables|Map=Map that contains expressions to evaluate and make available as variables\n for conditional expressions within the view\n\n <p>\n Each Map entry contains one expression variables, where the map key gives\n the name for the variable, and the map value gives the variable\n expression. The variables expressions will be evaluated before\n conditional logic is run and made available as variables for other\n conditional expressions. Variable expressions can be based on the model\n and any object contained in the view's context\n </p>
org.kuali.rice.krad.uif.view.View|formClass|Class=Class of the Form that should be used with the <code>View</code>\n instance. The form is the top level object for all the view's data and is\n used to present and accept data in the user interface. All form classes\n should extend UifFormBase
org.kuali.rice.krad.uif.view.View|growlMessagingEnabled|boolean=whether to use growls to show messages - info, warning and error\n\n <p>Growls use the messages contained in the message map. If enabled, info\n messages in their entirety will be displayed in growls, for warning and\n error messages a growl message will notify the user that these messages\n exist on the page.</p>\n\n <p> If this setting is disabled, it is recommended that\n infoMessage display be enabled for the page ValidationMessages bean in order to\n display relevant information to the user. Note\: the growl scripts are\n built out in the PageGroup class.</p>
org.kuali.rice.krad.uif.view.View|growls|Growls=Growls widget which sets up global settings for the growls used in this\n view and its pages
org.kuali.rice.krad.uif.view.View|items|List=
org.kuali.rice.krad.uif.view.View|namespaceCode|String=Namespace code the view should be associated with\n\n <p>\n The namespace code is used within the framework in such places as permission checks and parameter\n retrieval\n </p>
org.kuali.rice.krad.uif.view.View|navigationBlockUI|BlockUI=
org.kuali.rice.krad.uif.view.View|navigation|Group=<code>NavigationGroup</code> instance for the <code>View</code>\n <p>\n Provides configuration necessary to render the navigation. This includes\n navigation items in addition to configuration for the navigation\n renderer.\n </p>
org.kuali.rice.krad.uif.view.View|objectPathToConcreteClassMapping|Map=Configures the concrete classes that will be used for properties in the\n form object graph that have an abstract or interface type\n\n <p>\n For properties that have an abstract or interface type, it is not\n possible to perform operations like getting/settings property values and\n getting information from the dictionary. When these properties are\n encountered in the object graph, this <code>Map</code> will be consulted\n to determine the concrete type to use.\n </p>\n\n <p>\n e.g. Suppose we have a property document.accountingLine.accountNumber and\n the accountingLine property on the document instance has an interface\n type 'AccountingLine'. We can then put an entry into this map with key\n 'document.accountingLine', and value\n 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the\n property type or an entry from the dictionary for accountNumber, the\n TravelAccountingLine class will be used.\n </p>
org.kuali.rice.krad.uif.view.View|page|PageGroup=For single paged views ({@link \#isSinglePageView()}, gives the page\n <code>Group</code> the view should render. The actual items for the page\n is taken from the group's items list ({@link \#getItems()}, and set onto\n the give page group. This is for convenience of configuration.
org.kuali.rice.krad.uif.view.View|parentLocation|ParentLocation=The parentLocation defines urls that represent the parent of a View in a conceptial site hierarchy.\n\n <p>\n By defining a parent with these urls defined, a breadcrumb chain can be generated and displayed automatically\n before this View's breadcrumbItem(s).  To chain multiple views, the urls must be defining viewId and\n controllerMapping settings instead of setting an href directly (this will end the chain).  If labels are\n not set on parentLocations, the labels will attempt to be derived from parent views/pages breadcrumbItem\n and headerText - if these contain expressions which cannot be evaluated in the current context an exception\n will be thrown.\n </p>
org.kuali.rice.krad.uif.view.View|persistFormToSession|boolean=Indicates whether the form (model) associated with the view should be stored in the user session\n\n <p>\n The form class (or model) is used to hold the data that backs the view along with the built view object. Storing\n the form instance in session allows many things\:\n\n <ul>\n <li>Data does not need to be rebuilt for each server request (for example a collection)</li>\n <li>Data that does not need to go to the user can remain on the form, reducing the size of the response and\n improving security</li>\n <li>Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to\n the database</li>\n <li>Certain information about the view that was rendered, such as input fields, collection paths, and refresh\n components can be kept on the form to support UI interaction</li>\n </ul>\n\n Setting this flag to false will prevent the form from being kept in session and as a result will limit what can\n be done by the framework. In almost all cases this is not recommended.\n </p>\n\n <p>\n Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the\n framework enables clear points on certain actions to remove the form when it is no longer needed\n </p>
org.kuali.rice.krad.uif.view.View|preLoadScript|String=Script that is executed at the beginning of page load (before any other script)\n\n <p>\n Many used to set server variables client side\n </p>
org.kuali.rice.krad.uif.view.View|presentationController|ViewPresentationController=PresentationController that should be used for the <code>View</code> instance\n\n <p>\n The presentation controller is consulted to determine component (group,\n field) state such as required, read-only, and hidden. The presentation\n controller does not take into account user permissions. The presentation\n controller can also output action flags and edit modes that will be set\n onto the view instance and can be referred to by conditional expressions\n </p>
org.kuali.rice.krad.uif.view.View|refreshBlockUI|BlockUI=
org.kuali.rice.krad.uif.view.View|singlePageView|boolean=Indicates whether the <code>View</code> only has a single page\n <code>Group</code> or contains multiple page <code>Group</code>\n instances. In the case of a single page it is assumed the group's items\n list contains the section groups for the page, and the page itself is\n given by the page property ({@link \#getPage()}. This is for convenience\n of configuration and also can drive other configuration like styling.
org.kuali.rice.krad.uif.view.View|stateMapping|StateMapping=Gets the stateMapping.\n\n <p>The state mapping object is used to determine the state information for a view,\n it must include an ordered list of states, and where to find the state information for the view.\n A stateMapping must be set for state based validation to occur.  When stateMapping information is\n not included, the view's model is considered stateless and all constraints will apply regardless of their\n state information or replacements (ie, they will function as they did in version 2.1).</p>
org.kuali.rice.krad.uif.view.View|stateObjectBindingPath|String=The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to\n determine what field in the model state information is stored in for this view.  Used during View validation.
org.kuali.rice.krad.uif.view.View|stickyApplicationFooter|boolean=If true, the applicationFooter will become sticky (fixed to bottom of window)
org.kuali.rice.krad.uif.view.View|stickyApplicationHeader|boolean=Set to true to make the applicationHeader sticky (fixed to top of window)
org.kuali.rice.krad.uif.view.View|stickyBreadcrumbs|boolean=If true, the breadcrumb widget will be sticky (fixed to top of window)
org.kuali.rice.krad.uif.view.View|stickyFooter|boolean=If true, the view footer will become sticky (fixed to bottom of window)
org.kuali.rice.krad.uif.view.View|stickyHeader|boolean=If true, the ViewHeader for this view will be sticky (fixed to top of window)
org.kuali.rice.krad.uif.view.View|stickyTopGroup|boolean=If true, the top group will be sticky (fixed to top of window)
org.kuali.rice.krad.uif.view.View|supportsRequestOverrideOfReadOnlyFields|boolean=Indicates whether the view allows read only fields to be specified on the request URL which will\n override the view setting\n\n <p>\n If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only\n </p>
org.kuali.rice.krad.uif.view.View|theme|ViewTheme=The theme which contains stylesheets for this view
org.kuali.rice.krad.uif.view.View|topGroup|Group=TopGroup is an optional group of content that appears above the breadcrumbs and view header
org.kuali.rice.krad.uif.view.View|translateCodesOnReadOnlyDisplay|boolean=Returns whether the current view supports displaying <code>KualiCode</code>'s name as additional display value
org.kuali.rice.krad.uif.view.View|unifiedHeader|boolean=When true, this view will use a unified header - the page header will be omitted and its title will be used\n in the ViewHeader supportTitle property (dynamically updated on page change)
org.kuali.rice.krad.uif.view.View|viewHelperServiceClass|Class=Class name of the <code>ViewHelperService</code> that handles the various\n phases of the Views lifecycle
org.kuali.rice.krad.uif.view.View|viewHelperService|ViewHelperService=Creates the <code>ViewHelperService</code> associated with the View
org.kuali.rice.krad.uif.view.View|viewIndex|ViewIndex=Holds field indexes of the <code>View</code> instance for retrieval
org.kuali.rice.krad.uif.view.View|viewMenuGroupName|String=Provides a grouping string for the view to group its menu link (within a\n portal for instance)
org.kuali.rice.krad.uif.view.View|viewMenuLink|Link=Provides configuration for displaying a link to the view from an\n application menu
org.kuali.rice.krad.uif.view.View|viewName|String=View name provides an identifier for a view within a type. That is if a\n set of <code>View</code> instances have the same values for the\n properties that are used to retrieve them by their type, the name can be\n given to further qualify the view that should be retrieved.\n <p>\n A view type like the <code>LookupView</code> might have several views for\n the same object class, but one that is the 'default' lookup and another\n that is the 'advanced' lookup. Therefore the name on the first could be\n set to 'default', and likewise the name for the second 'advanced'.\n </p>
org.kuali.rice.krad.uif.view.View|viewTypeName|UifConstants.ViewType=View type name the view is associated with the view instance\n\n <p>\n Views that share common features and functionality can be grouped by the\n view type. Usually view types extend the <code>View</code> class to\n provide additional configuration and to set defaults. View types can also\n implement the <code>ViewTypeService</code> to add special indexing and\n retrieval of views.\n </p>
org.kuali.rice.krad.uif.widget.Accordion=Accordion widget class used to create an accordion based layout
org.kuali.rice.krad.uif.widget.Accordion|active|String=The active option determines which accordion item is open by default.  Set "false" as the string for\n no item open, use zero-based index to select an item to be open by default.
org.kuali.rice.krad.uif.widget.BlockUI=BlockUI element is used within the view element for managing element/page blocking attributes\n\n <p>\n Some basic options of the plugin are exposed through this class. Messages can be managed via\n Action elements. See the jquery BlockUI plugin for more details.\n </p>
org.kuali.rice.krad.uif.widget.BlockUI|blockingImageSource|String=Path to an image that will be rendered in the blocking overlay\n\n <p>\n If specified, the image will be picked up and rendered before the blocking message in\n the overlay. If not given just the message will be displayed\n </p>
org.kuali.rice.krad.uif.widget.Breadcrumbs=The breadcrumb widget contains various settings for setting up\n Breadcrumb/History support on the view
org.kuali.rice.krad.uif.widget.Breadcrumbs|displayBreadcrumbsWhenOne|boolean=If false, breadcrumbs will not be displayed if only one breadcrumb is\n going to be shown, this improves visual clarity of the page
org.kuali.rice.krad.uif.widget.Breadcrumbs|usePathBasedBreadcrumbs|boolean=If set to true, the breadcrumbs on the View will always be path-based (history backed)
org.kuali.rice.krad.uif.widget.DatePicker=Used for rendering a calendar in the UI that can be used to selected dates\n for field values
org.kuali.rice.krad.uif.widget.Disclosure=Decorates a group with collapse/expand functionality
org.kuali.rice.krad.uif.widget.Disclosure|animationSpeed|int=Gives the speed for the open/close animation, a smaller int will result\n in a faster animation
org.kuali.rice.krad.uif.widget.Disclosure|defaultOpen|boolean=Indicates whether the group should be initially open
org.kuali.rice.krad.uif.widget.Growls=Growls sets up settings for growls global to the current view and its pages\n\n <p>\n Some basic options of the plugin are exposed through this class, however additional options\n can be passed through setComponentOptions as usual. However, the header and theme option is set\n by the growl processing in PageGroup automatically. See the jquery jGrowl plugin for more details.\n </p>
org.kuali.rice.krad.uif.widget.Growls|position|String=The position for the growls to appear in the window\n There are five options available\: top-left, top-right, bottom-left, bottom-right, center.
org.kuali.rice.krad.uif.widget.Growls|sticky|boolean=If true, the growl will stick to the page until the user dismisses it
org.kuali.rice.krad.uif.widget.Growls|timeShown|int=The time growls are shown in milliseconds
org.kuali.rice.krad.uif.widget.Help=Widget that renders help on a component\n\n <p>\n If help URL is specified then display help icon and/or if help summary is specified then display help tooltip.\n </p>
org.kuali.rice.krad.uif.widget.Help|externalHelpUrl|String=The external help Url\n\n <p>\n This should contain a valid URL.  When specified this URL takes precedence over the external help URL from\n the system parameters.\n </p>
org.kuali.rice.krad.uif.widget.Help|helpAction|Action=HelpActionField is used for rendering external help
org.kuali.rice.krad.uif.widget.Help|helpDefinition|HelpDefinition=The help definition is used as the key to retrieve the external help Url from the parameter table of\n the database
org.kuali.rice.krad.uif.widget.Help|tooltipHelpContent|String=TooltipHelpContent
org.kuali.rice.krad.uif.widget.Inquiry=Widget for rendering an Inquiry link or DirectInquiry action field\n\n <p>\n The inquiry widget will render a button for the field value when\n that field is editable. When read only the widget will create a link on the display value.\n It points to the associated inquiry view for the field. The inquiry can be configured to point to a certain\n {@code InquiryView}, or the framework will attempt to associate the field with a inquiry based on\n its metadata (in particular its relationships in the model).\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|baseInquiryUrl|String=Returns the URL for the inquiry for which parameters will be added\n\n <p>\n The base URL includes the domain, context, and controller mapping for the inquiry invocation. Parameters are\n then added based on configuration to complete the URL. This is generally defaulted to the application URL and\n internal KRAD servlet mapping, but can be changed to invoke another application such as the Rice standalone\n server\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|dataObjectClassName|String=Full class name the inquiry should be provided for\n\n <p>\n This is passed on to the inquiry request for the data object the lookup should be rendered for. This is then\n used by the inquiry framework to select the lookup view (if more than one inquiry view exists for the same\n data object class name, the {@link \#getViewName()} property should be specified to select the view to render).\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|directInquiryAction|Action={@code Action} that will be rendered next to the field for a direct inquiry
org.kuali.rice.krad.uif.widget.Inquiry|enableDirectInquiry|boolean=Indicates that the direct inquiry will not be rendered
org.kuali.rice.krad.uif.widget.Inquiry|inquiryLink|Link={@code Link} that will be rendered for an inquiry
org.kuali.rice.krad.uif.widget.Inquiry|inquiryParameters|Map=Map that determines what properties from a calling view will be sent to properties on the inquiry data object\n\n <p>\n When invoking an inquiry view, a query is done against the inquiries configured data object and the resulting\n record is display. The values for the properties configured within the inquiry parameters Map will be\n pulled and passed along as values for the inquiry data object properties (thus they form the criteria for\n the inquiry)\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|viewName|String=When multiple target inquiry views exists for the same data object class, the view name can be set to\n determine which one to use\n\n <p>\n When creating multiple inquiry views for the same data object class, the view name can be specified for the\n different versions (for example 'simple' and 'advanced'). When multiple inquiry views exist the view name must\n be sent with the data object class for the request. Note the view id can be alternatively used to uniquely\n identify the inquiry view\n </p>
org.kuali.rice.krad.uif.widget.LightBox=Used for rendering a lightbox in the UI to display action links in dialog popups.
org.kuali.rice.krad.uif.widget.LightBox|addAppParms|boolean=Indicates that the light box link should have application parameters added to it.
org.kuali.rice.krad.uif.widget.LightBox|height|String=
org.kuali.rice.krad.uif.widget.LightBox|lookupReturnByScript|boolean=
org.kuali.rice.krad.uif.widget.LightBox|width|String=
org.kuali.rice.krad.uif.widget.LocationSuggest=LocationSuggest widget for providing suggestions that represent locations.  When the suggestion is clicked, the\n navigation occurs immediately.
org.kuali.rice.krad.uif.widget.LocationSuggest|additionalRequestParameters|Map=AdditionalRequestParameters specify the static(constant) request parameters that should be appended to the url.\n\n <p>The key represents the key of the request parameter and the value represents the value of the\n request parameter.  This will be used on each suggestion which uses a generated url (using baseUrl\n construction).\n </p>
org.kuali.rice.krad.uif.widget.LocationSuggest|additionalUrlPathPropertyName|String=AdditionalUrlPathProperty specifies the property on the retrieved suggestion result that contains a url\n appendage\n to be appended to the baseUrl when this selection is chosen.\n\n <p>One use case for setting this is to retrieve a controllerMapping that changes based on selection.  Note\:\n for suggestions that all point to the same controllerMapping, simply set it as part of the baseUrl.</p>
org.kuali.rice.krad.uif.widget.LocationSuggest|baseUrl|String=BaseUrl for the suggestions.  Unless the suggestion contains an href, baseUrl + additionalUrlPath value +\n request parameters is used to generate the url.
org.kuali.rice.krad.uif.widget.LocationSuggest|hrefPropertyName|String=The hrefPropertyName specifies the property on the retrieved suggestion result that contains the href\n value (full url).\n\n <p>This property must contain a full url if it exists on the object.  If this property name is matched on\n the suggestion result, it takes precedence over any other settings set on this locationSuggest\n and is used as the navigation url.  If the property name does not exist on the object, the suggest will fall\n back to building the url dynamically with baseUrl.</p>
org.kuali.rice.krad.uif.widget.LocationSuggest|requestParameterPropertyNames|Map=RequestParameterPropertyNames specify the properties that should be included in the request parameters.\n\n <p>The key is used as the key of the request parameter and the value is used as the property name to look for in\n the suggestion result object.  If the property name specified exists on the result object, the request\n parameter in the url will appear as key\=propertyValue in the request parameters.</p>
org.kuali.rice.krad.uif.widget.QuickFinder=Widget for navigating to a lookup from a field (called a quickfinder).
org.kuali.rice.krad.uif.widget.QuickFinder|autoSearch|Boolean=Indicates whether the search should be executed when first rendering the lookup view.\n\n <p>By default the lookup view is rendered, the user enters search values and executes the results. This flag can\n be set to true to indicate the search should be performed before showing the screen to the user. This is\n generally used when search criteria is being passed in as well</p>
org.kuali.rice.krad.uif.widget.QuickFinder|baseLookupUrl|String=Returns the URL for the lookup for which parameters will be added.\n\n <p>The base URL includes the domain, context, and controller mapping for the lookup invocation. Parameters are\n then added based on configuration to complete the URL. This is generally defaulted to the application URL and\n internal KRAD servlet mapping, but can be changed to invoke another application such as the Rice standalone\n server</p>
org.kuali.rice.krad.uif.widget.QuickFinder|dataObjectClassName|String=Full class name the lookup should be provided for.\n\n <p>This is passed on to the lookup request for the data object the lookup should be rendered for. This is then\n used by the lookup framework to select the lookup view (if more than one lookup view exists for the same\n data object class name, the {@link \#getViewName()} property should be specified to select the view to\n render).</p>
org.kuali.rice.krad.uif.widget.QuickFinder|fieldConversions|Map=Map that determines what properties from a result lookup row (if selected) will be returned to properties on\n the calling view.\n\n <p>The purpose of using the lookup is to search for a particular value and return that value to the form being\n completed. In order for the lookup framework to return the field back to us, we must specify the name of the\n field on the data object class whose value we need, and the name of the field on the calling view. Furthermore,\n we can choose to have the lookup return additional fields that populate other form fields or informational\n properties (see \u2018Field Queries and Informational Properties\u2019). These pairs of fields are known as\n \u2018field conversions\u2019.</p>\n\n <p>The fieldConversions property is a Map. Each entry represents a field that will be returned back from the\n lookup, with the entry key being the field name on the data object class, and the entry value being the field\n name on the calling view. It is helpful to think of this as a from-to mapping. Pulling from the data object\n field (map key) to the calling view field (map value).</p>
org.kuali.rice.krad.uif.widget.QuickFinder|lightBox|LightBox=Lightbox widget that will be used to view the invoked lookup view.\n\n <p>Note if the lightbox is not configured, or set to not render the lookup will be invoked based on\n the action alone (for example a new tab/window)</p>
org.kuali.rice.krad.uif.widget.QuickFinder|lookupCollectionName|String=For the case of multi-value lookup, indicates the collection that should be populated with\n the return results.\n\n <p>Note when the quickfinder is associated with a {@link CollectionGroup}, this property is\n set automatically from the collection name associated with the group</p>
org.kuali.rice.krad.uif.widget.QuickFinder|lookupParameters|Map=Map that determines what properties from a calling view will be sent to properties on that are rendered\n for the lookup view's search fields (they can be hidden).\n\n <p> When invoking a lookup view, we can pre-populate search fields on the lookup view with data from the view\n that called the lookup. The user can then perform the search with these values, or (if edited is allowed or\n the fields are not hidden) change the passed in values. When the lookup is invoked, the values for the\n properties configured within the lookup parameters Map will be pulled and passed along as values for the\n lookup view properties</p>
org.kuali.rice.krad.uif.widget.QuickFinder|multipleValuesSelect|Boolean=Indicates whether the invoked lookup view should allow multiple values to be selected and returned.
org.kuali.rice.krad.uif.widget.QuickFinder|quickfinderAction|Action=Action component that is used to rendered for the field for invoking the quickfinder action (bringing up the\n lookup).\n\n <p>Through the action configuration the image (or link, button) rendered for the quickfinder can be modified. In\n addition to other action component settings</p>
org.kuali.rice.krad.uif.widget.QuickFinder|readOnlyLookupFields|String=Comma delimited String of property names on the lookup view that should be read only.\n\n <p>When requesting a lookup view, property names for fields that are rendered as search criteria can be marked\n as read-only. This is usually done when a lookup parameter for that property is sent in and the user should\n not be allowed to change the value</p>
org.kuali.rice.krad.uif.widget.QuickFinder|referencesToRefresh|String=List of property names on the model that should be refreshed when the lookup returns.\n\n <p>Note this is only relevant when the return by script option is not enabled (meaning the server will be\n invoked\n on the lookup return call)</p>\n\n <p>When a lookup return call is made (to return a result value) the controller refresh method will be invoked.\n If\n refresh properties are configured, a call to refresh those references from the database will be made. This is\n useful if the lookup returns a foreign key field and the related record is needed.</p>
org.kuali.rice.krad.uif.widget.QuickFinder|renderCriteriaActions|Boolean=Indicates whether the criteria actions (footer) should be rendered on the invoked lookup view.
org.kuali.rice.krad.uif.widget.QuickFinder|renderLookupCriteria|Boolean=Indicates whether the lookup criteria (search group) should be enabled on the invoked lookup view.\n\n <p> Setting the this to false will not display the lookup criteria but only the results. Therefore this is only\n useful when setting {@link \#getAutoSearch()} to true and passing in criteria</p>
org.kuali.rice.krad.uif.widget.QuickFinder|renderMaintenanceLinks|Boolean=Indicates whether the maintenance action links should be rendered for the invoked lookup view.\n\n <p>If a maintenance view exists for the data object associated with the lookup view, the framework will add\n links to initiate a new maintenance document. This flag can be used to disable the rendering of these links</p>\n\n <p> Note this serves similar purpose to {@link \#getRenderResultActions()} but the intent is to only remove the\n maintenance links in this situation, not the complete actions column</p>
org.kuali.rice.krad.uif.widget.QuickFinder|renderResultActions|Boolean=Indicates whether the maintenance actions (or others) are rendered on the invoked lookup view.\n\n <p>By default a lookup view will add an actions column for the result table that display maintenance links (in\n addition to a new link at the top of the page) if a maintenance action is available. Custom links can also be\n added to the action column as necessary. This flag can be set to true to suppress the rendering of the actions\n for the lookup call.</p>
org.kuali.rice.krad.uif.widget.QuickFinder|renderReturnLink|Boolean=Indicates whether the return links for lookup results should be rendered.\n\n <p>A lookup view can be invoked to allow the user to select a value (or set of values) to return back to the\n calling view. For single value lookups this is done with a return link that is rendered for each row. This\n return link can be disabled by setting this property to false</p>
org.kuali.rice.krad.uif.widget.QuickFinder|viewName|String=When multiple target lookup views exists for the same data object class, the view name can be set to\n determine which one to use.\n\n <p>When creating multiple lookup views for the same data object class, the view name can be specified for the\n different versions (for example 'simple' and 'advanced'). When multiple lookup views exist the view name must\n be sent with the data object class for the request. Note the view id can be alternatively used to uniquely\n identify the lookup view</p>
org.kuali.rice.krad.uif.widget.RichTable=Decorates a HTML Table client side with various tools\n \n <p>\n Decorations implemented depend on widget implementation. Examples are sorting, paging and\n skinning.\n </p>
org.kuali.rice.krad.uif.widget.RichTable|ajaxSource|String=Specifies a URL for acquiring the table data with ajax\n \n <p>\n When the ajax source URL is specified the rich table plugin will retrieve the data by\n invoking the URL and building the table rows from the result. This is different from the\n standard use of the rich table plugin with uses progressive enhancement to decorate a table\n that has already been rendereed\n </p>
org.kuali.rice.krad.uif.widget.RichTable|disableTableSort|boolean=Returns true if sorting is disabled
org.kuali.rice.krad.uif.widget.RichTable|emptyTableMessage|String=Returns the text which is used to display text when the table is empty
org.kuali.rice.krad.uif.widget.RichTable|hiddenColumns|Set=Holds propertyNames for the ones meant to be hidden since columns are visible by default\n \n <p>\n Duplicate entries are ignored and the order of entries is not significant\n </p>
org.kuali.rice.krad.uif.widget.RichTable|showExportOption|boolean=Returns true if export option is enabled
org.kuali.rice.krad.uif.widget.RichTable|sortableColumns|Set=Holds the propertyNames for columns that are to be sorted\n \n <p>\n Duplicate entries are ignored and the order of entries is not significant\n </p>
org.kuali.rice.krad.uif.widget.Scrollpane=Decorates a group with scroll functionality
org.kuali.rice.krad.uif.widget.Scrollpane|height|String=Height the content should take up in the group\n\n <p>\n If the content size exceeds the height then a scroll bar will be shown.\n </p>\n <p>\n e.g. '30%' or '55px'\n </p>
org.kuali.rice.krad.uif.widget.Spinner=Widget that decorates a control transforming into a spinner\n\n <p>\n Spinners allow the incrementing or decrementing of the controls value with an arrow up and down icon on\n the right side of the control. How the value is incremented, min/max values, and so on can be configured\n through the {@link org.kuali.rice.krad.uif.component.Component\#getTemplateOptions()} property\n </p>
org.kuali.rice.krad.uif.widget.Suggest=Widget that provides dynamic select options to the user as they\n are entering the value (also known as auto-complete)\n\n <p>\n Widget is backed by an <code>AttributeQuery</code> that provides\n the configuration for executing a query server side that will retrieve\n the valid option values\n </p>
org.kuali.rice.krad.uif.widget.Suggest|additionalPropertiesToReturn|List=List of additional properties to return in the result objects to the plugin's success callback.\n\n <p>In most cases, this should not be set.  The main use case\n of setting this list is to use additional properties in the select function on the plugin's options, so\n it is only recommended that this property be set when doing heavy customization to the select function.\n This list is not used if the full result object is already being returned.</p>
org.kuali.rice.krad.uif.widget.Suggest|labelPropertyName|String=Name of the property on the query result object that provides the label for the suggestion.\n\n <p>This should\n be set when the label that the user selects is different from the value that is inserted when a user selects a\n suggestion. If only one of labelPropertyName or valuePropertyName is set,\n the property's value on the object will be used for both the value inserted on selection and the suggestion\n text (most default cases only a valuePropertyName would be set).</p>
org.kuali.rice.krad.uif.widget.Suggest|retrieveAllSuggestions|boolean=Indicates whether all suggest options should be retrieved up front and provide to the suggest\n widget as options locally\n\n <p>\n Use this for a small list of options to improve performance. The query will be performed on the client\n to filter the provider options based on the users input instead of doing a query each time\n </p>\n\n <p>\n When a query method is configured and this option set to true the method will be invoked to set the\n options. The query method should not take any arguments and should return the suggestion options\n List or the JS String as a result. If a query method is not configured the suggest options can be\n set through configuration or a view helper method (for example a component finalize method)\n </p>
org.kuali.rice.krad.uif.widget.Suggest|returnFullQueryObject|boolean=When set to true the results of a query method will be sent back as-is (in translated form) with all properties\n intact.\n\n <p>\n Note this is not supported for highly complex objects (ie, most auto-query objects - will throw exception).\n Intended usage of this flag is with custom query methods which return simple data objects.\n The query method can return a list of Strings which will be used for the suggestions, a list of objects\n with 'label' and 'value' properties, or a custom object.  In the case of using a customObject\n labelPropertyName or valuePropertyName MUST be specified (or both) OR the custom object must contain a\n property named "label" or "value" (or both) for the suggestions to appear.  In cases where this is not used,\n the data sent back represents a slim subset of the properties on the object.\n </p>
org.kuali.rice.krad.uif.widget.Suggest|suggestOptions|List=When {@link \#isRetrieveAllSuggestions()} is true, this list provides the full list of suggestions\n\n <p>\n If a query method is configured that method will be invoked to populate this list, otherwise the\n list should be populated through configuration or the view helper\n </p>\n\n <p>\n The suggest options can either be a list of Strings, in which case the strings will be the suggested\n values. Or a list of objects. If the object does not have 'label' and 'value' properties, a custom render\n and select method must be provided\n </p>
org.kuali.rice.krad.uif.widget.Suggest|suggestQuery|AttributeQuery=Attribute query instance the will be executed to provide\n the suggest options
org.kuali.rice.krad.uif.widget.Suggest|valuePropertyName|String=Name of the property on the query result object that provides\n the options for the suggest, values from this field will be\n collected and sent back on the result to provide as suggest options.\n\n <p>If a labelPropertyName is also set,\n the property specified by it will be used as the label the user selects (the suggestion), but the value will\n be the value retrieved by this property.  If only one of labelPropertyName or valuePropertyName is set,\n the property's value on the object will be used for both the value inserted on selection and the suggestion\n text (most default cases only a valuePropertyName would be set).</p>
org.kuali.rice.krad.uif.widget.SyntaxHighlighter=Widget that renders text syntax highlighted\n\n <p>\n The widget renders a div with a header. In the div the source code text will be added in pre tags with the\n specified plugin class that is needed for the plugin to alter the text.\n </p>
org.kuali.rice.krad.uif.widget.SyntaxHighlighter|header|Header=
org.kuali.rice.krad.uif.widget.SyntaxHighlighter|pluginCssClass|String=The class that will be set on the pre tags\n\n <p>\n The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.\n </p>
org.kuali.rice.krad.uif.widget.SyntaxHighlighter|sourceCode|String=The text to render with syntax highlighting
org.kuali.rice.krad.uif.widget.Tabs=Widget used for configuring tab options, use componentOptions for most options.\n See http\://jqueryui.com/demos/tabs/ for usable options
org.kuali.rice.krad.uif.widget.Tabs|defaultActiveTabId|String=Id for the group within the tab group that should be active (shown first), by default the first\n group is active
org.kuali.rice.krad.uif.widget.Tabs|position|UifConstants.Position=The position the tabs will appear related to the group, options are TOP, BOTTOM, RIGHT, or LEFT
org.kuali.rice.krad.uif.widget.Tooltip=Widget that renders a Tooltip on a component\n\n <p>\n Tooltips can display extra information about an element. The content can be plain text or rich HTML. Tooltips\n can be triggered by focus or mouse hover events.\n </p>
org.kuali.rice.krad.uif.widget.Tooltip|onFocus|boolean=Indicates the tooltip should be triggered by focus/blur
org.kuali.rice.krad.uif.widget.Tooltip|onMouseHover|boolean=Indicates the tooltip should be triggered by mouse hover
org.kuali.rice.krad.uif.widget.Tooltip|tooltipContent|String=Plain text or HTML string that will be used to render the tooltip div
org.kuali.rice.krad.uif.widget.Tree=Widget component for rendering a Tree
org.kuali.rice.krad.uif.widget.WidgetBase=Base class for Widgets\n\n <p>\n Sets the component type name for all widget components and provides default\n implementation of performFinalize\n </p>
