<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns="http://www.kuali.org/krad/schema" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.kuali.org/krad/schema" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
<!--

    Copyright 2005-2018 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
  <xsd:import namespace="http://www.springframework.org/schema/beans"/>
  <xsd:include schemaLocation="krad-baseTypes1.xsd"/>
  <xsd:include schemaLocation="krad-baseTypes2.xsd"/>
  <xsd:complexType name="icon-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="iconClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Icon Class for the action

 
 Bootstrap Icon Class to be rendered on this Action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="iconClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Icon Class for the action

 
 Bootstrap Icon Class to be rendered on this Action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="businessObjectEntry-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping" type="org.kuali.rice.krad.datadictionary.state.StateMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exporterClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="baseBusinessObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:choice maxOccurs="1" minOccurs="0">
        <xsd:element ref="helpDefinition"/>
      </xsd:choice>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectDescription" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="titleAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="boNotesEnabled" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primaryKeys" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inactivationBlockingDefinitions">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.AttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupByAttributesForEffectiveDating" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="relationships">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.RelationshipDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="collections">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.CollectionDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="objectLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exporterClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="baseBusinessObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectDescription">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="titleAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="name">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="boNotesEnabled">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="primaryKeys">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupByAttributesForEffectiveDating">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="hiddenControl-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="listLayout-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="orderedList" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[If true, this list layout is an ordered list (ol).  Otherwise, the the layout is an unordered list (ul).]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="template">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="style">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalCssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="context">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="orderedList">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[If true, this list layout is an ordered list (ol).  Otherwise, the the layout is an unordered list (ul).]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="cssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="templateName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="cssGridLayout-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemSize" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[The default "cell" size to use for this layout - this converts to medium size
 (max setting, and the default, is 12)

 
 This is a quick and easy setter for default mdSize for this layout, as a common use case is to have
 a different layout for medium devices and up, while small and extra small will consume the full screen.
 For customizations at every screen size, use defaultItemSizes.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="template">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="style">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalCssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="context">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="defaultItemSize">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[The default "cell" size to use for this layout - this converts to medium size
 (max setting, and the default, is 12)

 
 This is a quick and easy setter for default mdSize for this layout, as a common use case is to have
 a different layout for medium devices and up, while small and extra small will consume the full screen.
 For customizations at every screen size, use defaultItemSizes.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="cssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="templateName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="anyCharacterPatternConstraint-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides" type="listOrSetType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="floatingPointPatternConstraint-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="patternTypeKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[Message key used to identify the validation pattern]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides" type="listOrSetType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowNegative" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="patternTypeKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[Message key used to identify the validation pattern]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowNegative">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="keyValueLocation-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="location" type="org.kuali.rice.krad.uif.util.UrlInfo">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValueLocation" xml:lang="en"><![CDATA[Get the url object representing the location]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValueLocation" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="key" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValueLocation" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValueLocation" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="key">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValueLocation" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="propertyReplacer-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Name of the property on the Component the property replacer is associated with that
 will be set when the condition for the replacer succeeds

 
 Note the property name must be readable/writable on the component. The property name may
 be nested, and include Map or List references.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="replacement" type="java.lang.Object">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the Object that should be used to set the property value if the replacers condition
 evaluates to true

 
 Note the configured Object must be valid for the type given by the property on the Component. Standard
 property editors will be used for setting the property value
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="condition" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the expression that should be evaluated to determine whether or not
 the property replacement should be made

 
 Expression follows SPEL and may access any model data along with any variables
 available in the context for the Component. The expression should evaluate to
 a boolean. If the resulting boolean is true, the object given by #getReplacement()
 will be set as the value for the associated property on the component. If the resulting
 boolean is false, no action will take place
 

 
 Note the value does not need to contain the expression placeholder @{}
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="propertyName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Name of the property on the Component the property replacer is associated with that
 will be set when the condition for the replacer succeeds

 
 Note the property name must be readable/writable on the component. The property name may
 be nested, and include Map or List references.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="condition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the expression that should be evaluated to determine whether or not
 the property replacement should be made

 
 Expression follows SPEL and may access any model data along with any variables
 available in the context for the Component. The expression should evaluate to
 a boolean. If the resulting boolean is true, the object given by #getReplacement()
 will be set as the value for the associated property on the component. If the resulting
 boolean is false, no action will take place
 

 
 Note the value does not need to contain the expression placeholder @{}
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="validDataPatternConstraint-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides" type="listOrSetType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="constraint-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides" type="listOrSetType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="searchingAttribute-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="attributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="showAttriubteInSearchCriteria" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="businessObjectClassName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="ShowAttributeInResultSet" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="attributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="showAttriubteInSearchCriteria">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="businessObjectClassName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="ShowAttributeInResultSet">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="maskFormatterLiteral-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="literal" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterLiteral" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="literal">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterLiteral" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="activeCollectionFilter-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="attributeSecurity-mixedType">
    <xsd:complexContent>
      <xsd:extension base="attributeSecurity-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="attributeSecurity"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="dataFieldSecurity-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers" type="map-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:choice maxOccurs="1" minOccurs="0">
        <xsd:element ref="attributeSecurity"/>
      </xsd:choice>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails" type="map-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="viewInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="label-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="requiredIndicator" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[String indicator that will be displayed as a required indicator

 
 To indicate a field must have a value (required input) the required
 indicator can be set to display an indicator or text along with
 the label.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Text that will display as the label]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderColon" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether a colon should be rendered after the label text,
 generally used when the label appears to the left of the field's control
 or value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Gets the inlineComponents used by index in a Label that has rich message component index tags in its labelText]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelForComponentId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates the id for the component the label applies to
 
 Used for setting the labelFor attribute of the corresponding HTML
 element. Note this gets set automatically by the framework during the
 initialize phase
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richLabelMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the label if labelText is using rich message tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="requiredIndicator">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[String indicator that will be displayed as a required indicator

 
 To indicate a field must have a value (required input) the required
 indicator can be set to display an indicator or text along with
 the label.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Text that will display as the label]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderColon">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether a colon should be rendered after the label text,
 generally used when the label appears to the left of the field's control
 or value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelForComponentId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates the id for the component the label applies to
 
 Used for setting the labelFor attribute of the corresponding HTML
 element. Note this gets set automatically by the framework during the
 initialize phase
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="message-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="parseComponents" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates if the inline components must be parsed for rich messages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Text that makes up the message that will be displayed.

 If special characters [] are detected the message is split at that location.  The types of features supported
 by the parse are (note that &lt;&gt; are not part of the content, they specify placeholders):
 
 
-[id=&lt;component id&gt;] - insert component with id specified at that location in the message
 
-[n] - insert component at index n from the inlineComponent list
 
-[&lt;html tag&gt;][/&lt;html tag&gt;] - insert html content directly into the message content at that
 location,
 without the need to escape the &lt;&gt; characters in xml
 
-[color=&lt;html color code/name&gt;][/color] - wrap content in color tags to make text that color
 in the message
 
-[css=&lt;css classes&gt;][/css] - apply css classes specified to the wrapped content - same as wrapping
 the content in span with class property set
 
-[link=&lt;href src&gt;][/link] - an easier way to create an anchor that will open in a new page to the
 href specified after =
 
-[action=&lt;href src&gt;][/action] - create an action link inline without having to specify a component by
 id or index.  The options for this are as follows and MUST be in a comma seperated list in the order specified
 (specify 1-4 always in this order):
 
 
-methodToCall(String)
 
-validateClientSide(boolean) - true if not set
 
-ajaxSubmit(boolean) - true if not set
 
-successCallback(js function or function declaration) - this only works when ajaxSubmit is true
 
 The tag would look something like this [action=methodToCall]Action[/action] in most common cases.  And in more
 complex cases [action=methodToCall,true,true,functionName]Action[/action].  In addition to these settings,
 you can also specify data to send to the server in this fashion (space is required between settings and data):
 
 [action=&lt;action settings&gt; data={key1: 'value 1', key2: value2}]
 
 
 If the [] characters are needed in message text, they need to be declared with an escape character: \\[ \\]
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderWrapperTag" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[If true, render the wrapper element (p or div) around this message (default true).

 The wrapper will be either a p tag, for when the element only contains inline elements, or a div tag, for
 when the message might contain block level elements or undetermined html tags resulting from rich message
 functionality.  When false, skips the wrapper generation for this
 message - this has the additional effect the css classes/style classes will be lost for this message. ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperTag" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Defines the html tag that will wrap this message, if left blank, this will automatically be set by the framework
 to the appropriate tag (in most cases p or div)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The inlineComponents are a list of components in order by index.

 inlineComponents is only used when the message is using rich message functionality.  A message
 with [0] will reference component at index 0 of this list and insert it at that place in the message,
 and likewise [1] will reference item 1, etc.  If the index referenced is out of bounds (or list doesnt exist),
 an error will be thrown during message parse.]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="parseComponents">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates if the inline components must be parsed for rich messages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="messageText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Text that makes up the message that will be displayed.

 If special characters [] are detected the message is split at that location.  The types of features supported
 by the parse are (note that &lt;&gt; are not part of the content, they specify placeholders):
 
 
-[id=&lt;component id&gt;] - insert component with id specified at that location in the message
 
-[n] - insert component at index n from the inlineComponent list
 
-[&lt;html tag&gt;][/&lt;html tag&gt;] - insert html content directly into the message content at that
 location,
 without the need to escape the &lt;&gt; characters in xml
 
-[color=&lt;html color code/name&gt;][/color] - wrap content in color tags to make text that color
 in the message
 
-[css=&lt;css classes&gt;][/css] - apply css classes specified to the wrapped content - same as wrapping
 the content in span with class property set
 
-[link=&lt;href src&gt;][/link] - an easier way to create an anchor that will open in a new page to the
 href specified after =
 
-[action=&lt;href src&gt;][/action] - create an action link inline without having to specify a component by
 id or index.  The options for this are as follows and MUST be in a comma seperated list in the order specified
 (specify 1-4 always in this order):
 
 
-methodToCall(String)
 
-validateClientSide(boolean) - true if not set
 
-ajaxSubmit(boolean) - true if not set
 
-successCallback(js function or function declaration) - this only works when ajaxSubmit is true
 
 The tag would look something like this [action=methodToCall]Action[/action] in most common cases.  And in more
 complex cases [action=methodToCall,true,true,functionName]Action[/action].  In addition to these settings,
 you can also specify data to send to the server in this fashion (space is required between settings and data):
 
 [action=&lt;action settings&gt; data={key1: 'value 1', key2: value2}]
 
 
 If the [] characters are needed in message text, they need to be declared with an escape character: \\[ \\]
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderWrapperTag">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[If true, render the wrapper element (p or div) around this message (default true).

 The wrapper will be either a p tag, for when the element only contains inline elements, or a div tag, for
 when the message might contain block level elements or undetermined html tags resulting from rich message
 functionality.  When false, skips the wrapper generation for this
 message - this has the additional effect the css classes/style classes will be lost for this message. ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="wrapperTag">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Defines the html tag that will wrap this message, if left blank, this will automatically be set by the framework
 to the appropriate tag (in most cases p or div)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="alphaNumericPatternConstraint-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBrackets" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="lowerCase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowEquals" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowApostrophe" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPlus" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBackslash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides" type="listOrSetType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowParenthesis" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowExclaimation" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPeriod" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAmpersand" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowComma" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPercent" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPound" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="upperCase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowQuestionMark" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowCurlyBraces" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowLessThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowGreaterThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAll" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAsterisk" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDoubleQuote" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAtSign" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowSemiColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowUnderscore" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowForwardSlash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDollar" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="allowBrackets">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowColon">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="lowerCase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowEquals">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowApostrophe">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPlus">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowBackslash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowParenthesis">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowExclaimation">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPeriod">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAmpersand">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowComma">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPercent">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPound">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="upperCase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowQuestionMark">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowCurlyBraces">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowLessThan">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowGreaterThan">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAll">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAsterisk">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDoubleQuote">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAtSign">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowSemiColon">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowUnderscore">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowForwardSlash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDollar">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="lightBox-mixedType">
    <xsd:complexContent>
      <xsd:extension base="lightBox-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="lightBox"/>
          <xsd:element ref="lightBoxPost"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
