<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns="http://www.kuali.org/krad/schema" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.kuali.org/krad/schema" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
<!--

    Copyright 2005-2017 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
  <xsd:import namespace="http://www.springframework.org/schema/beans"/>
  <xsd:include schemaLocation="krad-baseTypes1.xsd"/>
  <xsd:include schemaLocation="krad-baseTypes2.xsd"/>
  <xsd:complexType name="spaceField-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewInLineAuthz">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editInLineAuthz">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="message-mixedType">
    <xsd:complexContent>
      <xsd:extension base="message-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="message"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="messageField-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="message"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="messageText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewInLineAuthz">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editInLineAuthz">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="breadcrumbOptions-mixedType">
    <xsd:complexContent>
      <xsd:extension base="breadcrumbOptions-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="pageBreadcrumbOptions"/>
          <xsd:element ref="breadcrumbOptions"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="page-mixedType">
    <xsd:complexContent>
      <xsd:extension base="page-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="documentPage"/>
          <xsd:element ref="page"/>
          <xsd:element ref="maintenancePage"/>
          <xsd:element ref="inquiryPage"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="breadcrumbItem-mixedType">
    <xsd:complexContent>
      <xsd:extension base="breadcrumbItem-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="breadcrumbItem"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="breadcrumbs-mixedType">
    <xsd:complexContent>
      <xsd:extension base="breadcrumbs-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="breadcrumbs"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="parentLocation-mixedType">
    <xsd:complexContent>
      <xsd:extension base="parentLocation-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="parentLocation"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="maintenanceView-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="documentClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets the document class]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayTopicFieldInNotes" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="org.kuali.rice.krad.uif.service.ViewHelperService">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageBreadcrumbOptions"/>
            <xsd:element ref="breadcrumbOptions"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="help"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ref="page"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="topGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enterKeyAction" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableBrowserCache" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateServerSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="docTypeName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Name for the document type the maintenance document applies to

 
 The document type name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableNativeAutocomplete" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalMetaTags">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.element.MetaTag">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageHeader"/>
            <xsd:element ref="header"/>
            <xsd:element ref="headerSix"/>
            <xsd:element ref="headerTwo"/>
            <xsd:element ref="sectionHeader"/>
            <xsd:element ref="headerOne"/>
            <xsd:element ref="headerFive"/>
            <xsd:element ref="subCollectionHeader"/>
            <xsd:element ref="headerThree"/>
            <xsd:element ref="subSectionHeader"/>
            <xsd:element ref="headerFour"/>
            <xsd:element ref="viewHeader"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="useLibraryCssClasses" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationTitleText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageValidationMessages"/>
            <xsd:element ref="fieldValidationMessages"/>
            <xsd:element ref="groupValidationMessages"/>
            <xsd:element ref="validationMessages"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="attachmentTypesValuesFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="explanationDataMaxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formPostUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ref="footer"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tableCollectionLayout-bean"/>
            <xsd:element ref="listLayout"/>
            <xsd:element ref="orderedListLayout"/>
            <xsd:element ref="cssGridLayout"/>
            <xsd:element ref="stackedCollectionLayout-bean"/>
            <xsd:element ref="stackedCollectionLayout-withGridItems-bean"/>
            <xsd:element ref="stackedCollectionLayout-list-bean"/>
            <xsd:element ref="stackedCollectionLayout-withBoxItems-bean"/>
            <xsd:element ref="cssGridLabelColumnLayout"/>
            <xsd:element ref="cssGridLayoutBase"/>
            <xsd:element ref="fourColumnGridLayout"/>
            <xsd:element ref="gridLayout"/>
            <xsd:element ref="sixColumnGridLayout"/>
            <xsd:element ref="twoColumnGridLayout"/>
            <xsd:element ref="boxLayout"/>
            <xsd:element ref="horizontalBoxLayout"/>
            <xsd:element ref="verticalBoxLayout"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager" type="org.kuali.rice.krad.uif.layout.LayoutManager"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maintenanceAction" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates what maintenance action (new, edit, copy) was
 requested]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyTopGroup" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping" type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="contentContainerCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="breadcrumbItem"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathToConcreteClassMapping" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderForm" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteFYI" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyBreadcrumbs" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyApplicationFooter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateClientSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items" type="listOrSetType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalHeadLinks">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.element.HeadLink">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController" type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyFooter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="oldObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gives the binding path to the old object (record being edited) to display
 for comparison]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteAttachments" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="unifiedHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClassName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name for the object the maintenance document applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="breadcrumbs"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="mergeWithPageItems" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sessionPolicy" type="org.kuali.rice.krad.uif.view.ViewSessionPolicy">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyApplicationHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="parentLocation"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalHiddenValues" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map of property path and values that will get written out as hidden elements.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="documentClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets the document class]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayTopicFieldInNotes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enterKeyAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableBrowserCache">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateServerSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="docTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Name for the document type the maintenance document applies to

 
 The document type name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableNativeAutocomplete">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="useLibraryCssClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionFlags">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applicationTitleText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="attachmentTypesValuesFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="explanationDataMaxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formPostUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maintenanceAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates what maintenance action (new, edit, copy) was
 requested]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyTopGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="contentContainerCssClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderForm">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteFYI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyBreadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyApplicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateClientSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="oldObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gives the binding path to the old object (record being edited) to display
 for comparison]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteAttachments">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="unifiedHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataObjectClassName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name for the object the maintenance document applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="mergeWithPageItems">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editModes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyApplicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalHiddenValues">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map of property path and values that will get written out as hidden elements.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="header-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style that should be applied to the header h tag

 
 Note the style given here applies to only the header text. The style
 property inherited from the Component interface can be used
 to set the style for the whole header div (which could include a nested
 Group)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rightGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents to the right of the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lowerGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents below the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="upperGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents above the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richHeaderMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the header if headerText is using rich message
 tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style classes that should be applied to the header text (h tag)

 
 Note the style class given here applies to only the header text. The
 style class property inherited from the Component interface
 can be used to set the class for the whole field div (which could
 include a nested Group)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items" type="listOrSetType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[List of Component instances contained in the lower header group

 
 Convenience method for configuration to get the items List from the
 lower header group
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Text that should be displayed on the header]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Gets the inlineComponents used by index in a Header that has rich message component index tags in its headerText]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerLevel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[HTML header level (h1 ... h6) that should be applied to the header text]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="headerTagStyle">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style that should be applied to the header h tag

 
 Note the style given here applies to only the header text. The style
 property inherited from the Component interface can be used
 to set the style for the whole header div (which could include a nested
 Group)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerTagCssClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style classes that should be applied to the header text (h tag)

 
 Note the style class given here applies to only the header text. The
 style class property inherited from the Component interface
 can be used to set the class for the whole field div (which could
 include a nested Group)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Text that should be displayed on the header]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerLevel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[HTML header level (h1 ... h6) that should be applied to the header text]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerTagOnly">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="syntaxHighlighter-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sourceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The text to render with syntax highlighting]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showCopyConfirmation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates if a confirmation dialog must be shown after copy action]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="pluginCssClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The class that will be set on the pre tags

 
 The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowCopy" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates if the ZeroClipboard copy functionality must be added

 
 When copy is allowed a copy button will be shown when the mouse hovers over the syntax highlighter. This button
 will be hidden the otherwise to avoid obstructing some of the displayed code.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="sourceCode">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The text to render with syntax highlighting]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="showCopyConfirmation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates if a confirmation dialog must be shown after copy action]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="pluginCssClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The class that will be set on the pre tags

 
 The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowCopy">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates if the ZeroClipboard copy functionality must be added

 
 When copy is allowed a copy button will be shown when the mouse hovers over the syntax highlighter. This button
 will be hidden the otherwise to avoid obstructing some of the displayed code.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="sessionPolicy-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="redirectToHome" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Indicates when a session timeout occurs the user should be redirect to the application home url
 (determined by the configuration parameter 'application.url')]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="enableTimeoutWarning" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Enables the session timeout warning dialog and timeout dialog for the view

 
 When enabled, a timer will be kept on the client to warning the user when their session is about
 to timeout, and if the timeout actually occurs. The amount of time before a timeout to warn is specified
 by #getTimeoutWarningSeconds()
 

 
 The dialogs shown for the warning and timeout are configured by the dialog groups with ids
 org.kuali.rice.krad.uif.util.ComponentFactory#SESSION_TIMEOUT_WARNING_DIALOG and
 org.kuali.rice.krad.uif.util.ComponentFactory#SESSION_TIMEOUT_DIALOG
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderTimeoutView" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Indicates the user should be shown the timeout message view when a session timeout occurs]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="timeoutWarningSeconds" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[When #isEnableTimeoutWarning() is true, the number of seconds before a timeout occurs to give a
 warning (default is 120 (2 minutes))]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="redirectUrl" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[URL the user should be redirected to when a session timeout occurs]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="redirectToHome">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Indicates when a session timeout occurs the user should be redirect to the application home url
 (determined by the configuration parameter 'application.url')]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="enableTimeoutWarning">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Enables the session timeout warning dialog and timeout dialog for the view

 
 When enabled, a timer will be kept on the client to warning the user when their session is about
 to timeout, and if the timeout actually occurs. The amount of time before a timeout to warn is specified
 by #getTimeoutWarningSeconds()
 

 
 The dialogs shown for the warning and timeout are configured by the dialog groups with ids
 org.kuali.rice.krad.uif.util.ComponentFactory#SESSION_TIMEOUT_WARNING_DIALOG and
 org.kuali.rice.krad.uif.util.ComponentFactory#SESSION_TIMEOUT_DIALOG
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderTimeoutView">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Indicates the user should be shown the timeout message view when a session timeout occurs]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="timeoutWarningSeconds">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[When #isEnableTimeoutWarning() is true, the number of seconds before a timeout occurs to give a
 warning (default is 120 (2 minutes))]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="redirectUrl">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[URL the user should be redirected to when a session timeout occurs]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="tooltip-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseHover" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by mouse hover]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocus" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by focus/blur]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipContent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Plain text or HTML string that will be used to render the tooltip div]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="onMouseHover">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by mouse hover]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onFocus">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by focus/blur]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tooltipContent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Plain text or HTML string that will be used to render the tooltip div]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="attributeQuery-mixedType">
    <xsd:complexContent>
      <xsd:extension base="attributeQuery-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="attributeQuery"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="suggest-mixedType">
    <xsd:complexContent>
      <xsd:extension base="suggest-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="locationSuggest"/>
          <xsd:element ref="suggest"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="quickfinder-mixedType">
    <xsd:complexContent>
      <xsd:extension base="quickFinder-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="quickFinder"/>
          <xsd:element ref="collectionQuickFinder"/>
          <xsd:element ref="quickFinderByScript"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="inquiry-mixedType">
    <xsd:complexContent>
      <xsd:extension base="inquiry-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="inquiry"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="input-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="scriptDataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html as a script call to data for this component (these cannot be
 used for jQuery selection directly)

 They can be accessed through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="attributeQuery"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="validCharactersConstraint" type="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the additional display value.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the alternate display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="help"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="enableAutoQuickfinder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether quickfinders should be automatically set when a relationship for the field's
 property is found

 
 Note this only applies when the #getQuickfinder() widget has not been configured (is null)
 and is set to true by default
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValues" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Array of default values for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default values (if set)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="constraintText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Text that display a restriction on the value a field can hold

 
 For example when the value must be a valid format (phone number, email), certain length, min/max value and
 so on this text can be used to indicate the constraint to the user. Generally displays with the control so
 it is visible when the user tabs to the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postInputCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[List of CSS classes that will be applied to the span that wraps the post input components.

 TODO: revisist this, possibly getting the classes from component wrapper css classes once created]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyListDisplayType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Gets the readOnlyListDisplayType.

 When this is not set, the list will default to the delimited list display with a default of comma and space
 (", ") - if readOnlyListDelimiter is not set as well.  The type can be set as the following:
 
 
-"DELIMITED" - list will be output with delimiters between each item defined by readOnlyListDelimiter
 
-"BREAK" - list will be output with breaks between each item
 
-"OL" - list will be output in ordered list format (numbered)
 
-"UL" - list will be output in unordered list format (bulleted)
 
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="role" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The role attribute of this component, use to define aria roles]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Get the class of the optionsFinder being used by this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffixPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryObjectEntry" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableNativeAutocomplete" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the browser autocomplete functionality should be disabled for the
 input field (adds autocomplete="off")

 
 The browser's native autocomplete functionality can cause issues with security fields and also fields
 with the UIF suggest widget enabled
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ariaAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The aria attributes of this component and their values
 (without "aria-", this is automatically appended during rendering)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="locationSuggest"/>
            <xsd:element ref="suggest"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="constraintMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Message field that displays constraint text

 
 This message field can be configured to for adjusting how the constrain text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalHiddenPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinder" type="org.kuali.rice.krad.keyvalues.KeyValuesFinder">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Instance of KeyValuesFinder that should be invoked to
 provide a List of values the field can have. Generally used to provide
 the options for a multi-value control or to validate the submitted field
 value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Instructional text that display an explanation of the field usage

 
 Text explaining how to use the field, including things like what values should be selected
 in certain cases and so on (instructions)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages" type="org.kuali.rice.krad.uif.element.FieldValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="escapeHtmlInPropertyValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="quickFinder"/>
            <xsd:element ref="collectionQuickFinder"/>
            <xsd:element ref="quickFinderByScript"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="inquiry"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyNamesForAdditionalDisplay" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Maximum number of characters the input field value is allowed to have

 
 The maximum length determines the maximum allowable length of the value
 for data entry editing purposes.  The maximum length is inclusive and can
 be smaller or longer than the actual control size.  The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 maximum length constraint in which digits and symbols are counted).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacementPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 

 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssGridSizes" type="org.kuali.rice.krad.uif.layout.CssGridSizes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[CssGridSizes represent the size (width) the content's div "cell" will take up in the "row" at each screen
 size (extra small, small, medium, large) when using a group backed by a CssGridLayoutManager.

 
     This object is NOT used by other layouts.
     For specifics of how css grids work, refer to the krad guide and bootstrap css grid documentation.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export that options as a
 JavaScript Map for use in js and jQuery plugins

 
 See documentation on the particular component render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The DataAttributes that will be written to the html element for this component as data-

 They can be access through .data() call in jQuery.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inclusiveMax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The inclusive maximum value for numeric or date field.

 
 The inclusiveMax element determines the maximum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enableAutoDirectInquiry" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether direct inquiries should be automatically set when a relationship for
 the field's property is found

 
 Note this only applies when the #getInquiry() widget has not been configured (is null)
 and is set to true by default
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyMask" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.

 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderMarkerIconSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When true, render the marker icon span to show icons related to the field (used by CompareFieldCreateModifier on
 maintenance documetnts to mark editted fields)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addHiddenWhenReadOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpSummary" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Summary help text for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cellWidth" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Width setting for the cell containing the component (only applies within table based
 layouts)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container; when using a CssGridLayoutManager this is converted to the appropriate medium size.

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderInputAddonGroup" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Forces rendering of the input group div around the control.

 If other components add content through script that should be grouped with the control, this flag
 can be set to true to generate the input group, even though InputField#getPostInputAddons() may
 be empty]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValue" type="java.lang.Object">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value, if it was null.
 This will only work on properties which can be determined to be null.
 Therefore a String property with an empty string value will
 not be ovewritten with the defaultValue set here.
 

 
 In addition, int, boolean, and other primitive types
 will not use this default value because they inherently have a value in Java (0 for int, false for boolean, etc).
 To use such types either using a primitive wrapper type (Integer, Boolean, etc) so an unset variable can
 be determined to be null, or explicitly set the default value on the form/object itself for these types and
 not through this property.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helperText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Help text that displays under the control and is disclosed on focus.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="kimPersonControl"/>
            <xsd:element ref="hiddenControl"/>
            <xsd:element ref="kimGroupControl"/>
            <xsd:element ref="verticalCheckboxesControl"/>
            <xsd:element ref="horizontalCheckboxesControl"/>
            <xsd:element ref="smallTextAreaControl"/>
            <xsd:element ref="largeTextAreaControl"/>
            <xsd:element ref="textAreaControl"/>
            <xsd:element ref="mediumTextAreaControl"/>
            <xsd:element ref="spinnerControl"/>
            <xsd:element ref="checkboxControl"/>
            <xsd:element ref="fileControl"/>
            <xsd:element ref="controlBase"/>
            <xsd:element ref="verticalRadioControl"/>
            <xsd:element ref="horizontalRadioControl"/>
            <xsd:element ref="largeTextControl"/>
            <xsd:element ref="textControl"/>
            <xsd:element ref="smallTextControl"/>
            <xsd:element ref="currencyTextControl"/>
            <xsd:element ref="dateControl"/>
            <xsd:element ref="mediumTextControl"/>
            <xsd:element ref="optionListControl"/>
            <xsd:element ref="multiSelectControl"/>
            <xsd:element ref="dropdownControl"/>
            <xsd:element ref="passwordControl"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="control" type="org.kuali.rice.krad.uif.control.Control"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[CSS style string to be applied to the cell containing the component (only applies within
 table based layouts)

 
 e.g. 'align: right;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyEditor" type="java.beans.PropertyEditor">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process

 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="wrapperCssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The cellCssClasses property defines the classes that will be placed on the corresponding td (or th) elements
 relating to this component when used in a table backed layout.  This property has no effect on other layouts.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onInputScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onInput event is
 fired

 This differs from key press/up or change in that it will catch autocomplete, cut, and paste mouse actions
 on an input.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="simpleConstraint" type="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="multiLineReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns true if this field is of type TextAreaControl.

 
 Used to preserve text formatting in a textarea when the view
 is readOnly by enclosing the text in a  tag.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValueFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maskFormatter" type="org.kuali.rice.krad.datadictionary.mask.MaskFormatter">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postInputAddons">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[List of components that will be grouped with the input field control to form an input group.

 Generally these are icon, link, or button components that should be rendered with the control.

 See Bootstrap Input Groups]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Minimum number of characters the input field value needs to be

 
 The minimum length determines the minimum required length of the value for
 data entry editing purposes.  The minimum length is inclusive. The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 minimum length requirement in which digits and symbols are counted).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.

 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderInfoMessageSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When true, render the info message span which contains can contain additional information
 about the field (used by Field Query functionality)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyListDelimiter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The readOnlyListDelimiter is used to set the delimiter used when "DELIMITED" type is set for
 readOnlyListDisplayType]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="widgetInputOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates indicates whether the field can only be updated through a widget

 widgetInputOnly behaves similar to ReadOnly with the exception that the value of the input field
 can be changed via the associated widget (e.g. spinner, date picker, quickfinder, etc).]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sortAs" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Sets the sort type if this field is used within a collection

 
 The default sort type is the Java class of the
 property being referenced. Since a String property may actually contain numeric or date values only this property
 can be used to better set the sort type.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="uppercaseValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Perform uppercase flag for this field to force input to uppercase.

 
 It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'
 which will automatically change any text input into the field to uppercase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dependencyConstraints">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[List of PrerequisiteConstraint that apply to this InputField]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="caseConstraint" type="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[{@inheritDoc}]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="exclusiveMin" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The exclusive minimum value for numeric or date field.

 
 The exclusiveMin element determines the minimum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataType" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Gets the DataType of this InputField, note that DataType set to be date
 when this field is using a date picker with a TextControl and has not otherwise been
 explicitly set.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).

 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo" type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context" type="map-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContextDeep
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryAttributeName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Message field that displays instructional text

 
 This message field can be configured to for adjusting how the instructional text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="list-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="readOnlyDisplaySuffix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the additional display value.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the alternate display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enableAutoQuickfinder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether quickfinders should be automatically set when a relationship for the field's
 property is found

 
 Note this only applies when the #getQuickfinder() widget has not been configured (is null)
 and is set to true by default
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValues">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Array of default values for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default values (if set)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="constraintText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Text that display a restriction on the value a field can hold

 
 For example when the value must be a valid format (phone number, email), certain length, min/max value and
 so on this text can be used to indicate the constraint to the user. Generally displays with the control so
 it is visible when the user tabs to the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="postInputCssClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[List of CSS classes that will be applied to the span that wraps the post input components.

 TODO: revisist this, possibly getting the classes from component wrapper css classes once created]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyListDisplayType">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Gets the readOnlyListDisplayType.

 When this is not set, the list will default to the delimited list display with a default of comma and space
 (", ") - if readOnlyListDelimiter is not set as well.  The type can be set as the following:
 
 
-"DELIMITED" - list will be output with delimiters between each item defined by readOnlyListDelimiter
 
-"BREAK" - list will be output with breaks between each item
 
-"OL" - list will be output in ordered list format (numbered)
 
-"UL" - list will be output in unordered list format (bulleted)
 
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optionsFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Get the class of the optionsFinder being used by this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffixPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryObjectEntry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableNativeAutocomplete">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the browser autocomplete functionality should be disabled for the
 input field (adds autocomplete="off")

 
 The browser's native autocomplete functionality can cause issues with security fields and also fields
 with the UIF suggest widget enabled
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalHiddenPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Instructional text that display an explanation of the field usage

 
 Text explaining how to use the field, including things like what values should be selected
 in certain cases and so on (instructions)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="escapeHtmlInPropertyValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyNamesForAdditionalDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Maximum number of characters the input field value is allowed to have

 
 The maximum length determines the maximum allowable length of the value
 for data entry editing purposes.  The maximum length is inclusive and can
 be smaller or longer than the actual control size.  The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 maximum length constraint in which digits and symbols are counted).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacementPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inclusiveMax">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The inclusive maximum value for numeric or date field.

 
 The inclusiveMax element determines the maximum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enableAutoDirectInquiry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether direct inquiries should be automatically set when a relationship for
 the field's property is found

 
 Note this only applies when the #getInquiry() widget has not been configured (is null)
 and is set to true by default
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyMask">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderMarkerIconSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When true, render the marker icon span to show icons related to the field (used by CompareFieldCreateModifier on
 maintenance documetnts to mark editted fields)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addHiddenWhenReadOnly">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helpSummary">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Summary help text for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderInputAddonGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Forces rendering of the input group div around the control.

 If other components add content through script that should be grouped with the control, this flag
 can be set to true to generate the input group, even though InputField#getPostInputAddons() may
 be empty]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helperText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Help text that displays under the control and is disclosed on focus.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="multiLineReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Returns true if this field is of type TextAreaControl.

 
 Used to preserve text formatting in a textarea when the view
 is readOnly by enclosing the text in a  tag.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValueFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewInLineAuthz">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Minimum number of characters the input field value needs to be

 
 The minimum length determines the minimum required length of the value for
 data entry editing purposes.  The minimum length is inclusive. The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 minimum length requirement in which digits and symbols are counted).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderInfoMessageSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[When true, render the info message span which contains can contain additional information
 about the field (used by Field Query functionality)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyListDelimiter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The readOnlyListDelimiter is used to set the delimiter used when "DELIMITED" type is set for
 readOnlyListDisplayType]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editInLineAuthz">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="widgetInputOnly">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Indicates indicates whether the field can only be updated through a widget

 widgetInputOnly behaves similar to ReadOnly with the exception that the value of the input field
 can be changed via the associated widget (e.g. spinner, date picker, quickfinder, etc).]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="sortAs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Sets the sort type if this field is used within a collection

 
 The default sort type is the Java class of the
 property being referenced. Since a String property may actually contain numeric or date values only this property
 can be used to better set the sort type.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="uppercaseValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Perform uppercase flag for this field to force input to uppercase.

 
 It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'
 which will automatically change any text input into the field to uppercase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="exclusiveMin">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[The exclusive minimum value for numeric or date field.

 
 The exclusiveMin element determines the minimum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryAttributeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="dataObjectEntry-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping" type="org.kuali.rice.krad.datadictionary.state.StateMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exporterClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:choice maxOccurs="1" minOccurs="0">
        <xsd:element ref="helpDefinition"/>
      </xsd:choice>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectDescription" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="titleAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="boNotesEnabled" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primaryKeys" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inactivationBlockingDefinitions">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.AttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupByAttributesForEffectiveDating" type="list-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="relationships">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.RelationshipDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="collections">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.CollectionDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="objectLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exporterClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectDescription">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="titleAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="name">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="boNotesEnabled">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="primaryKeys">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupByAttributesForEffectiveDating">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="compareConfig-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="bindingObjectPath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Returns the path (from the form) for the object to compare to

 
 When a comparison view is rendered, a group will be rendered for each
 comparison object using the fields defined on the view. This gives the
 path to one of the comparison objects
 

 
 e.g. For maintenance documents the compare object paths would be
 document.newMaintainableObject.businessObject and
 document.oldMaintainableObject.businessObject
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the compare group should be read-only]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Sets the order value that will be used to determine where the compare
 group should be placed in relation to the other compare groups

 
 For example if the compare groups are being rendered from left to right
 in columns, a lower order value would be placed to the left of a compare
 group with a higher order value
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="comparableId" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Specifies an id suffix to use for the generated comparison fields

 
 For the given string, all components created for the comparison group
 will contain the string on their id. This can be helpful for scripting.
 If not given, the items will receive a default id suffix
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="compareToForValueChange" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether this comparable group's field values should be compared
 to when highlighting changes of values between comparables (versions)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="highlightValueChange" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the fields in this comparable group should be
 highlighted if their values defer from the comparable group marked for
 comparison]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="compareToForFieldRender" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Text that should display on the header for the compare group

 
 In the comparison view each compare group can be labeled, this gives the
 text that should be used for that label. For example in the maintenance
 view the compare record is labeled 'Old' to indicate it is the old
 version of the record
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="bindingObjectPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Returns the path (from the form) for the object to compare to

 
 When a comparison view is rendered, a group will be rendered for each
 comparison object using the fields defined on the view. This gives the
 path to one of the comparison objects
 

 
 e.g. For maintenance documents the compare object paths would be
 document.newMaintainableObject.businessObject and
 document.oldMaintainableObject.businessObject
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="readOnly">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the compare group should be read-only]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="order">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Sets the order value that will be used to determine where the compare
 group should be placed in relation to the other compare groups

 
 For example if the compare groups are being rendered from left to right
 in columns, a lower order value would be placed to the left of a compare
 group with a higher order value
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="comparableId">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Specifies an id suffix to use for the generated comparison fields

 
 For the given string, all components created for the comparison group
 will contain the string on their id. This can be helpful for scripting.
 If not given, the items will receive a default id suffix
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="compareToForValueChange">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether this comparable group's field values should be compared
 to when highlighting changes of values between comparables (versions)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="highlightValueChange">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the fields in this comparable group should be
 highlighted if their values defer from the comparable group marked for
 comparison]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="compareToForFieldRender">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="headerText">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Text that should display on the header for the compare group

 
 In the comparison view each compare group can be labeled, this gives the
 text that should be used for that label. For example in the maintenance
 view the compare record is labeled 'Old' to indicate it is the old
 version of the record
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
</xsd:schema>
