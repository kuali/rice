<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns="http://www.kuali.org/krad/schema" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.kuali.org/krad/schema" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
<!--

    Copyright 2005-2017 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
  <xsd:include schemaLocation="krad-types11.xsd"/>
  <xsd:include schemaLocation="krad-types10.xsd"/>
  <xsd:include schemaLocation="krad-types9.xsd"/>
  <xsd:include schemaLocation="krad-types8.xsd"/>
  <xsd:include schemaLocation="krad-types7.xsd"/>
  <xsd:include schemaLocation="krad-types6.xsd"/>
  <xsd:include schemaLocation="krad-types5.xsd"/>
  <xsd:include schemaLocation="krad-types4.xsd"/>
  <xsd:include schemaLocation="krad-types3.xsd"/>
  <xsd:include schemaLocation="krad-types2.xsd"/>
  <xsd:include schemaLocation="krad-types1.xsd"/>
  <xsd:import namespace="http://www.springframework.org/schema/beans"/>
  <xsd:element name="breadcrumbs" type="breadcrumbs-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Breadcrumbs

The breadcrumb widget contains various settings for setting up
 Breadcrumb/History support on the view]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fieldSecurity" type="fieldSecurity-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.FieldSecurity

Field security adds the edit in line and view in line flags to the standard component security

 
 These flags are only applicable when the field is part of a collection group. They indicate there is security
 on the field within the collection line
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tableCollectionLayout-bean" type="tableCollectionLayout-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.TableLayoutManagerBase

Implementation of table layout manager.

 Based on the fields defined, the TableLayoutManager will dynamically create instances of
 the fields for each collection row. In addition, the manager can create standard fields like the
 action and sequence fields for each row. The manager supports options inherited from the
 GridLayoutManager such as rowSpan, colSpan, and cell width settings.

 {@inheritDoc}]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosure" type="disclosure-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Disclosure

Decorates a group with collapse/expand functionality]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tabGroup" type="tabGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TabGroup

A group that presents its child Groups as tabs.  Items in this group's item list must be Groups
 themselves.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tabSubSection" type="tabGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TabGroup

A group that presents its child Groups as tabs.  Items in this group's item list must be Groups
 themselves.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tabSection" type="tabGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TabGroup

A group that presents its child Groups as tabs.  Items in this group's item list must be Groups
 themselves.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="help" type="help-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Help

Widget that renders help on a component

 
 If help URL is specified then display help icon and/or if help summary is specified then display help tooltip.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="parentLocation" type="parentLocation-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.ParentLocation

ParentLocation is used to provide automatic generation/determination of Views/Pages that occur before the current
 View.  Essentially, this class provides a way to determine a conceptual hierarchy of view/page locations.
 This information is used internally to generate BreadcrumbItems that can appear before the View's breadcrumbs.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="kimPersonControl" type="kimPersonControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.UserControl

Represents a user control, which is a special control to handle the input of a Person.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="treeGroup" type="treeGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TreeGroup

Group component that is backed by a Tree data structure and typically
 rendered as a tree in the user interface]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="treeSection" type="treeGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TreeGroup

Group component that is backed by a Tree data structure and typically
 rendered as a tree in the user interface]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="treeSubSection" type="treeGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TreeGroup

Group component that is backed by a Tree data structure and typically
 rendered as a tree in the user interface]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="helpDefinition" type="helpDefinition-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="spaceField" type="spaceField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.SpaceField

Field that produces only a space

 
 Can be used to aid in the layout of other fields, for instance in a grid. For
 example in a totals row generally the rows that are not totaled are blank in
 the total row.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="messageField" type="messageField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.MessageField

Field wrapper for a Message.

 
 The Message is used to display static text in the user
 interface
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceView" type="maintenanceView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.MaintenanceDocumentView

View type for Maintenance documents

 
 Supports primary display for a new maintenance record, in which case the
 fields are display for populating the new record, and an edit maintenance
 record, which is a comparison view with the old record read-only on the left
 side and the new record (changed record) on the right side
 

 
 The MaintenanceDocumentView provides the interface for the maintenance
 framework. It works with the Maintainable service and
 maintenance controller.
 

 
 Maintenance views are primarily configured by the object class they are
 associated with. This provides the default dictionary information for the
 fields. If more than one maintenance view is needed for the same object
 class, the view name can be used to further identify an unique view
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="header" type="header-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="pageHeader" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerSix" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerTwo" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="sectionHeader" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerOne" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerFive" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="subCollectionHeader" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerThree" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="subSectionHeader" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerFour" type="header-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Header

Content element that renders a header element and optionally a Group to
 present along with the header text

 
 Generally the group is used to display content to the right of the header,
 such as links for the group or other information
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="syntaxHighlighter" type="syntaxHighlighter-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.SyntaxHighlighter

Widget that renders text syntax highlighted

 
 The widget renders a div with a header. In the div the source code text will be added in pre tags with the
 specified plugin class that is needed for the plugin to alter the text.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="sessionPolicy" type="sessionPolicy-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewSessionPolicy" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.ViewSessionPolicy

Holds configuration related to session handling of a view (and its related form)

 
 The framework will keep track of the session for which a view is rendered in. When a request such as a
 post is made, the session id for the view will be compared against the current session. If different, or no
 session exists, a timeout will be assumed and the framework will take the action configured on this
 policy
 

 
 If none of the options are set here, the framework will allow a request after a timeout to go uninterrupted
 

 
 Notes carrying out the configured view session policy requires the filter
 org.kuali.rice.krad.web.filter.UifSessionTimeoutFilter to be configured first in the list of filters
 for the servlet
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tooltip" type="tooltip-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Tooltip

Widget that renders a Tooltip on a component.

 
 Tooltips can display extra information about an element. The content can be plain text or rich HTML. Tooltips
 can be triggered by focus or mouse hover events.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tooltipFocus" type="tooltip-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Tooltip

Widget that renders a Tooltip on a component.

 
 Tooltips can display extra information about an element. The content can be plain text or rich HTML. Tooltips
 can be triggered by focus or mouse hover events.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tooltipHelp" type="tooltip-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Tooltip

Widget that renders a Tooltip on a component.

 
 Tooltips can display extra information about an element. The content can be plain text or rich HTML. Tooltips
 can be triggered by focus or mouse hover events.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="input" type="input-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.InputFieldBase

Field that encapsulates data input/output captured by an attribute within the
 application

 
 The InputField provides the majority of the data input/output
 for the screen. Through these fields the model can be displayed and updated.
 For data input, the field contains a Control instance will
 render an HTML control element(s). The input field also contains a
 Label, summary, and widgets such as a quickfinder (for
 looking up values) and inquiry (for getting more information on the value).
 InputField instances can have associated messages (errors)
 due to invalid input or business rule failures. Security can also be
 configured to restrict who may view the fields valnue.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="checkboxInput" type="input-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.InputFieldBase

Field that encapsulates data input/output captured by an attribute within the
 application

 
 The InputField provides the majority of the data input/output
 for the screen. Through these fields the model can be displayed and updated.
 For data input, the field contains a Control instance will
 render an HTML control element(s). The input field also contains a
 Label, summary, and widgets such as a quickfinder (for
 looking up values) and inquiry (for getting more information on the value).
 InputField instances can have associated messages (errors)
 due to invalid input or business rule failures. Security can also be
 configured to restrict who may view the fields valnue.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="inputLabelRight" type="input-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.InputFieldBase

Field that encapsulates data input/output captured by an attribute within the
 application

 
 The InputField provides the majority of the data input/output
 for the screen. Through these fields the model can be displayed and updated.
 For data input, the field contains a Control instance will
 render an HTML control element(s). The input field also contains a
 Label, summary, and widgets such as a quickfinder (for
 looking up values) and inquiry (for getting more information on the value).
 InputField instances can have associated messages (errors)
 due to invalid input or business rule failures. Security can also be
 configured to restrict who may view the fields valnue.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="inputLabelTop" type="input-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.InputFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.InputFieldBase

Field that encapsulates data input/output captured by an attribute within the
 application

 
 The InputField provides the majority of the data input/output
 for the screen. Through these fields the model can be displayed and updated.
 For data input, the field contains a Control instance will
 render an HTML control element(s). The input field also contains a
 Label, summary, and widgets such as a quickfinder (for
 looking up values) and inquiry (for getting more information on the value).
 InputField instances can have associated messages (errors)
 due to invalid input or business rule failures. Security can also be
 configured to restrict who may view the fields valnue.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dataObjectEntry" type="dataObjectEntry-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="compareConfig" type="compareConfig-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.modifier.ComparableInfo

Provides configuration for comparing an object with another object

 
 Used with a comparison view (such as in maintenance documents edit mode)
 where two objects with the same properties are compared. This class
 configures the object paths for the objects that will be compared, and has
 additional configuration for the generated comparison group
 

 
 All comparison objects must have the same fields and collection rows
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="icon" type="icon-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Icon

Element that presents an Icon.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="businessObjectEntry" type="businessObjectEntry-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="hiddenControl" type="hiddenControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.HiddenControl

Represents a HTML Hidden control, generally rendered as an input control of
 type 'hidden'. This is used to hold a value that the user will not see but
 will be posted back with the form]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="listLayout" type="listLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.ListLayoutManager

List layout manager is a layout manager for group types to output their items as either ordered or
 unordered lists.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="orderedListLayout" type="listLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.ListLayoutManager

List layout manager is a layout manager for group types to output their items as either ordered or
 unordered lists.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="cssGridLayout" type="cssGridLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.CssGridLayoutManager

Css Grid Layout manager is a layout manager which creates div "rows" and "cells" to replicate a
 table look by using div elements for its items.

 
 Items are added into rows based on their colSpan
 setting, while each row has a max size of 12 columns. By default, if colSpan is not set on an
 item, that item will take a full row.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="anyCharacterPatternConstraint" type="anyCharacterPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint

Pattern for matching any printable character]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="floatingPointPatternConstraint" type="floatingPointPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint

Validation pattern for matching floating point numbers, optionally matching negative numbers]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="keyValueLocation" type="keyValueLocation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValueLocation" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.UifKeyValueLocation

KeyValue that has an additional location property that takes a Url object.  When this is used with a dropdown or
 an optionList control, those options become navigation controls.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="propertyReplacer" type="propertyReplacer-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.component.PropertyReplacer

Configuration for replacing a property value based on a condition

 
 A Component may be configured with one or more PropertyReplacer instances. Each defines
 a condition to evaluate during the apply model phase, and if that condition succeeds the property on the component
 given by #getPropertyName(), will be replaced with the value given by #getReplacement(). Conditions
 are defined using an expression language and may reference any variables available in the component's context.
 

 
 Property replacers can be used to change out an entire Component or List/Map of Components. For example, based on a
 condition you might want to display a TextControl or RadioControl for an
 InputField. You can define the field with a text control, then include a property replacer as
 follows:
 
 <bean parent="PropertyReplacer" p:propertyName="control"
 p:condition="field1 eq '10985'" p:replacement-ref="RadioControl"/>

 

 Note Component contains a List or property replacers which will be evaluated in the order
 contained within the list. So in the above example if we wanted to now add a further condition which sets the
 control
 to a checkbox, we would just add another property replacer bean.
 
   
 
 <bean parent="PropertyReplacer" p:propertyName="control"
 p:condition="field1 eq '10985'" p:replacement-ref="RadioControl"/>
 <bean parent="PropertyReplacer" p:propertyName="control"
 p:condition="field1 eq '11456'" p:replacement-ref="CheckboxControl"/>
     
   
 

 Property replacers may be used to substitute primitive properties as well, such as Strings
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="validDataPatternConstraint" type="validDataPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint

]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="constraint" type="constraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint

A class that implements the required accessor for label keys. This provides a convenient base class
 from which other constraints can be derived.

 Only BaseConstraints can have state validation.

 This class is a direct copy of one that was in Kuali Student.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="searchingAttribute" type="searchingAttribute-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maskFormatterLiteral" type="maskFormatterLiteral-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterLiteral" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="activeCollectionFilter" type="activeCollectionFilter-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.ActiveCollectionFilter" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.ActiveCollectionFilter

Collection filter that removes inactive lines from a collection whose line types
 implement the Inactivatable interface]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dataFieldSecurity" type="dataFieldSecurity-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.DataFieldSecurity

Data field security adds attribute security to the standard component security

 
 The AttributeSecurity can be configured for the field to indicate there is security at the data layer
 (configured by component (class) and property). If the field is backed by a data dictionary
 org.kuali.rice.krad.datadictionary.AttributeDefinition the attribute security can be configured there and
 will be picked up and inserted into the field security
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="label" type="label-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Label

Content element that renders a label

 
 Contains options for adding a colon to the label along with a required message
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="message" type="message-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Message

Encapsulates a text message to be displayed

 
 The Message is used to display static text in the user
 interface
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="alphaNumericPatternConstraint" type="alphaNumericPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint

A ValidCharactersConstraint based on AlphaNumericValidationPattern.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="alphaNumericWithBasicPunc" type="alphaNumericPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint

A ValidCharactersConstraint based on AlphaNumericValidationPattern.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="link" type="link-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Link

Content element that renders a link]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="messageView" type="messageView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.MessageView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.MessageView

View that presents a message to the user (for example an application error message)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="kimGroupControl" type="kimGroupControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.GroupControl

Represents a group control, which is a special control to handle
 the input of a KIM Group by group name]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionSecurity" type="actionSecurity-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ActionSecurity

Action field security adds the take action flags to the standard component security]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="sidebarNavigation" type="sidebarNavigation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.SidebarNavigationGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.SidebarNavigationGroup

A navigation group which renders a menu with items, that is shown at the side of the page with collapse.
 functionality

 Items of this menu should only be of org.kuali.rice.krad.uif.element.Header, Action, and
 ToggleMenu types.  Actions and ToggleMenus must have icons to render correctly when using the collapse
 functionality, but will inherit the defaultItemIconClass if their iconClass properties are not set.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="menuNavigation" type="sidebarNavigation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.SidebarNavigationGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.SidebarNavigationGroup

A navigation group which renders a menu with items, that is shown at the side of the page with collapse.
 functionality

 Items of this menu should only be of org.kuali.rice.krad.uif.element.Header, Action, and
 ToggleMenu types.  Actions and ToggleMenus must have icons to render correctly when using the collapse
 functionality, but will inherit the defaultItemIconClass if their iconClass properties are not set.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="blockUI" type="blockUI-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.BlockUI

BlockUI element is used within the view element for managing element/page blocking attributes

 
 Some basic options of the plugin are exposed through this class. Messages can be managed via
 Action elements. See the jquery BlockUI plugin for more details.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="viewPresentationController" type="viewPresentationController-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewPresentationControllerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.ViewPresentationControllerBase

Implementation of ViewPresentationController that implements no logic by default]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="utf8AnyCharacterPatternConstraint" type="utf8AnyCharacterPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint

Pattern for matching any printable character]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedCollectionLayout-bean" type="stackedCollectionLayout-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase

Layout manager that works with CollectionGroup containers and
 renders the collection lines in a vertical row

 
 For each line of the collection, a Group instance is created.
 The group header contains a label for the line (summary information), the
 group fields are the collection line fields, and the group footer contains
 the line actions. All the groups are rendered using the
 BoxLayoutManager with vertical orientation.
 

 
 Modify the lineGroupPrototype to change header/footer styles or any other
 customization for the line groups
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedCollectionLayout-withGridItems-bean" type="stackedCollectionLayout-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase

Layout manager that works with CollectionGroup containers and
 renders the collection lines in a vertical row

 
 For each line of the collection, a Group instance is created.
 The group header contains a label for the line (summary information), the
 group fields are the collection line fields, and the group footer contains
 the line actions. All the groups are rendered using the
 BoxLayoutManager with vertical orientation.
 

 
 Modify the lineGroupPrototype to change header/footer styles or any other
 customization for the line groups
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedCollectionLayout-list-bean" type="stackedCollectionLayout-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase

Layout manager that works with CollectionGroup containers and
 renders the collection lines in a vertical row

 
 For each line of the collection, a Group instance is created.
 The group header contains a label for the line (summary information), the
 group fields are the collection line fields, and the group footer contains
 the line actions. All the groups are rendered using the
 BoxLayoutManager with vertical orientation.
 

 
 Modify the lineGroupPrototype to change header/footer styles or any other
 customization for the line groups
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedCollectionLayout-withBoxItems-bean" type="stackedCollectionLayout-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.StackedLayoutManagerBase

Layout manager that works with CollectionGroup containers and
 renders the collection lines in a vertical row

 
 For each line of the collection, a Group instance is created.
 The group header contains a label for the line (summary information), the
 group fields are the collection line fields, and the group footer contains
 the line actions. All the groups are rendered using the
 BoxLayoutManager with vertical orientation.
 

 
 Modify the lineGroupPrototype to change header/footer styles or any other
 customization for the line groups
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="workflowPropertyGroup" type="workflowPropertyGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowPropertyGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tabNavigationGroup-bean" type="tabNavigationGroup-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.TabNavigationGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.TabNavigationGroup

Special Group that renders a tab navigation section

 
 Only supports Action instances within the container. These
 are used to provide the items (or individual links) within the navigation.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lightTable" type="lightTable-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.LightTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.LightTable

LightTable is a light-weight collection table implementation that supports a subset of features,
 Current known supported features are:

 
 
-DataField
 
-InputField with TextControl, CheckboxControl, or single SelectControl
 
-MessageField
 
-LinkField
 
-ActionField
 
-ImageField
 
-most RichTable options
 
-FieldGroup containing only Actions, Image, Messages, or Links
 
-SpringEL for String properties on supported components only
 
-SpringEL specifically for the render property
 

 Other features are not guaranteed to work, but may work at your own risk.  The intent of this table is to be a
 light-weight alternative to the fully featured table already available in KRAD and it is more suited to displaying
 large sets of simple data to the user.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lightTableSection" type="lightTable-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.LightTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.LightTable

LightTable is a light-weight collection table implementation that supports a subset of features,
 Current known supported features are:

 
 
-DataField
 
-InputField with TextControl, CheckboxControl, or single SelectControl
 
-MessageField
 
-LinkField
 
-ActionField
 
-ImageField
 
-most RichTable options
 
-FieldGroup containing only Actions, Image, Messages, or Links
 
-SpringEL for String properties on supported components only
 
-SpringEL specifically for the render property
 

 Other features are not guaranteed to work, but may work at your own risk.  The intent of this table is to be a
 light-weight alternative to the fully featured table already available in KRAD and it is more suited to displaying
 large sets of simple data to the user.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lightTableSubSection" type="lightTable-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.LightTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.LightTable

LightTable is a light-weight collection table implementation that supports a subset of features,
 Current known supported features are:

 
 
-DataField
 
-InputField with TextControl, CheckboxControl, or single SelectControl
 
-MessageField
 
-LinkField
 
-ActionField
 
-ImageField
 
-most RichTable options
 
-FieldGroup containing only Actions, Image, Messages, or Links
 
-SpringEL for String properties on supported components only
 
-SpringEL specifically for the render property
 

 Other features are not guaranteed to work, but may work at your own risk.  The intent of this table is to be a
 light-weight alternative to the fully featured table already available in KRAD and it is more suited to displaying
 large sets of simple data to the user.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dataTable" type="dataTable-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.DataTable

Content element that renders a table using the RichTable widget configured with an Ajax (or Javascript)
 data source

 
 Note this is different from the table layout manager in that it does not render nested components. The data is
 provided directly to the rich table widget which will create the table rows (unlike the table layout which creates
 the table from components then invokes the table plugin to decorate). Therefore this component just creates a table
 element tag and invokes the rich table script
 

 
 Nested HTML can be given through the rich table data. However generally this will be read-only data with possibly
 some inquiry links
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="pageValidationMessages" type="pageValidationMessages-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.PageValidationMessages

ValidationMessages for logic and options specific to pages.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="url" type="url-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.UrlInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.UrlInfo

This object represents a url in the Krad framework.  The url can be set explicitly to a specific href or a
 controller
 plus a viewId can be provided (at very minimum).  By default, the krad base bean config points the baseUrl property
 to 'krad.url' configuration property and the methodToCall to 'start', but these can be reset to any value as needed.

 
 If href is not set, the generated value of href is constructed (in general) as follows:
 baseUrl + /controllerMapping + ? + methodToCall param + viewId param + other parameters
 
 with any necessary tokens to construct a valid url.  If baseUrl is not provided, the url is not valid and a
 blank string is returned.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lookupCriteria" type="lookupCriteria-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.lookup.LookupInputField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.lookup.LookupInputField

Custom InputField for criteria fields within a lookup view that adds criteria specific options.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fieldValidationMessages" type="fieldValidationMessages-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.FieldValidationMessages

ValidationMessages for logic and options specific to fields.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="inactivationBlockingDefinition" type="inactivationBlockingDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="attributeDefinition" type="attributeDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="simpleContraint" type="simpleContraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint

A simple constraint stores 'basic' constraints for a field.  This constraint is meant to be used as a
 constraint for WhenConstraints in CaseConstraint, and is also used internally in InputField.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="requiredConstraint" type="simpleContraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint

A simple constraint stores 'basic' constraints for a field.  This constraint is meant to be used as a
 constraint for WhenConstraints in CaseConstraint, and is also used internally in InputField.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="progressBar-bean" type="progressBar-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ProgressBar" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ProgressBar

Element which shows a visual progress bar based on percentageValue passed in or segmentPercentages passed in]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="progressBarVertical-bean" type="progressBar-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ProgressBar" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ProgressBar

Element which shows a visual progress bar based on percentageValue passed in or segmentPercentages passed in]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="linkGroup" type="linkGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.LinkGroup

Special Group that presents a grouping on links, which can
 also include nested groupings of links

 
 Generally this group outputs a list of LinkField instances, however
 it can be configured to place separates between the fields and also delimiters
 for the grouping
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="linkSubGroup" type="linkGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.LinkGroup

Special Group that presents a grouping on links, which can
 also include nested groupings of links

 
 Generally this group outputs a list of LinkField instances, however
 it can be configured to place separates between the fields and also delimiters
 for the grouping
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="relationshipDefinition" type="relationshipDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenaceActiveFilter" type="maintenaceActiveFilter-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter

Collection filter for maintenance groups that removes inactive lines if certain
 conditions are met]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="externalizableAttributeDefinitionProxy" type="externalizableAttributeDefinitionProxy-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fieldBase" type="fieldBase-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.FieldBase

Base class for Field implementations

 
 Sets the component type name so that all field templates have a fixed
 contract
 

 
 Holds a nested Label with configuration for rendering the
 label and configuration on label placement.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionGroup" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureStackedSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceStackedSubCollection-withinSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureTableSubCollection-withinSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceStackedSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tableSubCollection-withinSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureTableSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stacked" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureStackedSubCollection-withinSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceTableSubCollection-withinSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="table" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureStackedSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureStackedSubCollection-withinSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="listCollectionSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureTableSubCollection-withinSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceTableSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="listCollectionSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tableSubCollection-withinSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tableSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedSubCollection-withinSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tableSubSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stackedSubCollection-withinSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="listCollection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureTableSection" type="collectionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupBase

Group that holds a collection of objects and configuration for presenting the
 collection in the UI. Supports functionality such as add line, line actions,
 and nested collections.

 
 Note the standard header/footer can be used to give a header to the
 collection as a whole, or to provide actions that apply to the entire
 collection
 

 
 For binding purposes the binding path of each row field is indexed. The name
 property inherited from ComponentBase is used as the collection
 name. The collectionObjectClass property is used to lookup attributes from
 the data dictionary.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionGroupSecurity" type="collectionGroupSecurity-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.CollectionGroupSecurity

Collection Group security is used to flag that permissions exist for the associated CollectionGroup
 in KIM and should be checked to determine the associated group, line, and field state. In particular this adds
 the edit line and view line flags

 
 In addition, properties such as additional role and permission details can be configured to use when
 checking the KIM permissions
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="widget" type="widget-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.WidgetBase

Base class for Widgets

 
 Sets the component type name for all widget components and provides default
 implementation of performFinalize
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="pageBreadcrumbOptions" type="pageBreadcrumbOptions-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.PageBreadcrumbOptions" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.PageBreadcrumbOptions

BreadcrumbOptions specific to page.  Render options are only available at the page level.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="page" type="page-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.PageGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.PageGroupBase

A PageGroup represents a page of a View.

 
 PageGroups should only be used with a View component.  The contain the main content that will be seen by the
 user using the View.  Like all other groups, PageGroup can contain items, headers and footers.  Pages also
 have their own BreadcrumbItem.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="documentPage" type="page-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.PageGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.PageGroupBase

A PageGroup represents a page of a View.

 
 PageGroups should only be used with a View component.  The contain the main content that will be seen by the
 user using the View.  Like all other groups, PageGroup can contain items, headers and footers.  Pages also
 have their own BreadcrumbItem.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenancePage" type="page-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.PageGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.PageGroupBase

A PageGroup represents a page of a View.

 
 PageGroups should only be used with a View component.  The contain the main content that will be seen by the
 user using the View.  Like all other groups, PageGroup can contain items, headers and footers.  Pages also
 have their own BreadcrumbItem.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="inquiryPage" type="page-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.PageGroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.PageGroupBase

A PageGroup represents a page of a View.

 
 PageGroups should only be used with a View component.  The contain the main content that will be seen by the
 user using the View.  Like all other groups, PageGroup can contain items, headers and footers.  Pages also
 have their own BreadcrumbItem.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="attributeQuery" type="attributeQuery-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.AttributeQuery

Holds configuration for executing a dynamic query on an InputField to
 pull data for updating the UI

 
 There are two types of query types that can be configured and executed. The first is provided
 completely by the framework using the LookupService and will perform a query
 against the configured dataObjectClassName using the query parameters and return field mapping.
 The second type will invoke a method that will perform the query. This can be configured using the
 queryMethodToCall (if the method is on the view helper service), or using the queryMethodInvoker if
 the method is on another class or object.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="pager" type="pager-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Pager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Pager

The Pager widget is used to display a list of links horizontally in a page selection user interface.  The user can
 select a page to jump to, go to prev/next page, or go to the first or last page.  This widget needs to know
 the numberOfPages total, and the currentPage the user is on currently, so this widget must be fed this information
 from the code.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="image" type="image-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Image

Content element that renders a HTML &lt;IMG&gt; tag]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalCheckboxesControl" type="verticalCheckboxesControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.CheckboxGroupControl

Represents a group of HTML checkbox controls. Provides preset options for the
 user to choose by a series of checkbox controls. Only or more options can be
 select.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalCheckboxesControl" type="verticalCheckboxesControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.CheckboxGroupControl

Represents a group of HTML checkbox controls. Provides preset options for the
 user to choose by a series of checkbox controls. Only or more options can be
 select.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="iFrame" type="iFrame-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Iframe

Content element that encloses an iframe]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="accordionGroup" type="accordionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.AccordionGroup

Accordion group class used to stack groups by there header titles in an accordion layout.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="accordionSubSection" type="accordionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.AccordionGroup

Accordion group class used to stack groups by there header titles in an accordion layout.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="accordionSection" type="accordionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.AccordionGroup

Accordion group class used to stack groups by there header titles in an accordion layout.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureAccordionSection" type="accordionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.AccordionGroup

Accordion group class used to stack groups by there header titles in an accordion layout.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureAccordionSubSection" type="accordionGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.AccordionGroup

Accordion group class used to stack groups by there header titles in an accordion layout.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="cssGridLabelColumnLayout" type="cssGridLabelColumnLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLabelColumnLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.CssGridLabelColumnLayoutManager

A Css Grid Layout which only takes fields as its content and separates out the field's labels into
 separate columns

 This layout does not use the container's items' colspan property to influence column size.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="conditionalFilter" type="conditionalFilter-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.ELCollectionFilter" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.ELCollectionFilter

Collection filter that evaluates a configured el expression against each line]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tabs" type="tabs-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Tabs

Widget used for configuring tab options, use componentOptions for most options.
 See http://jqueryui.com/demos/tabs/ for usable options]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="space" type="space-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Space

Content element that renders a non-breaking space HTML &amp;nbsp; tag]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="action" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="buttonLarge" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="navigationButton" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="secondaryNavigationActionButton" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="navigationActionLink" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="secondaryButtonSmall" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="secondaryButton" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionLink" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="buttonSmall" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="button" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="buttonMini" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="secondaryButtonMini" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionImage" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="secondaryButtonLarge" type="action-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.Action

Field that presents an action that can be taken on the UI such as submitting the form or invoking a script.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="datePicker" type="datePicker-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.DatePicker

Used for rendering a calendar in the UI that can be used to selected dates
 for field values]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="accordion" type="accordion-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Accordion

Accordion widget class used to create an accordion based layout.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="workflowProperty" type="workflowProperty-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowProperty" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maskFormatteSubString" type="maskFormatteSubString-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterSubString" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lightBox" type="lightBox-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.LightBox

Used for rendering a lightbox in the UI to display action links in dialog popups.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lightBoxPost" type="lightBox-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.LightBox

Used for rendering a lightbox in the UI to display action links in dialog popups.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fixedPointPatternConstraint" type="fixedPointPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint

Validation pattern for matching fixed point numbers, optionally matching negative numbers

 
 Only allows a numeric value where the precision property represents the maximum number of
 total numbers allowed, and scale represents the minimum numbers after the decimal point.
 The decimal places are implied to be 0 if not included and still count towards total
 numbers allowed.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="cssGridSizes-bean" type="cssGridSizes-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridSizes" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.CssGridSizes

CssGridSizes are used by CssGridLayoutManagers to determine how much "column/cell" width an item will take up in a
 css grid layout.  It is important to note that sizes set will affect that screen size AND all screen sizes
 larger than that size unless those screen sizes also have a size explicitly set.  Each "row" is 12 across, so no
 sizes in this object are allowed to exceed this value.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stepProgressBar-bean" type="stepProgressBar-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.StepProgressBar" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.StepProgressBar

Element which shows a visual progress bar alongside a set of steps, to be used by wizard or multi-step
 processes, which reflects the current progress based on value of currentStep.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="documentValuePathGroup" type="documentValuePathGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="integerPatternConstraint" type="integerPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint

TODO Administrator don't forget to fill this in.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="keyValuesFinder" type="keyValuesFinder-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase

]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="textAreaControl" type="textAreaControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextAreaControl

Represents a HTML TextArea control. Generally used for values that are very
 large (such as a description)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="smallTextAreaControl" type="textAreaControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextAreaControl

Represents a HTML TextArea control. Generally used for values that are very
 large (such as a description)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="largeTextAreaControl" type="textAreaControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextAreaControl

Represents a HTML TextArea control. Generally used for values that are very
 large (such as a description)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="mediumTextAreaControl" type="textAreaControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextAreaControl

Represents a HTML TextArea control. Generally used for values that are very
 large (such as a description)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fieldGroup" type="fieldGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.FieldGroup

Field that contains a nested Group. Can be used to group
 together fields by providing a group without header and footer, or simply to
 nest full groups. The items getter/setter provided is for convenience and
 will set the items List in the nested Group]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalFieldGroup" type="fieldGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.FieldGroup

Field that contains a nested Group. Can be used to group
 together fields by providing a group without header and footer, or simply to
 nest full groups. The items getter/setter provided is for convenience and
 will set the items List in the nested Group]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalFieldGroup" type="fieldGroup-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.FieldGroup

Field that contains a nested Group. Can be used to group
 together fields by providing a group without header and footer, or simply to
 nest full groups. The items getter/setter provided is for convenience and
 will set the items List in the nested Group]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="tree" type="tree-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Tree

Widget component for rendering a Tree]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="labelSeparatorModifier" type="labelSeparatorModifier-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.modifier.LabelSeparateModifier

Pulls Label instances out of a contained field so they will
 be placed separately in the LayoutManager]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="optionGroupLabel-bean" type="optionGroupLabel-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.UifOptionGroupLabel" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.UifOptionGroupLabel

KeyValue that has an additional label property for hierarchical dropdowns.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionDefinition" type="collectionDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stateMapping" type="stateMapping-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="workflowStateMapping" type="stateMapping-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="componentConverterModifier" type="componentConverterModifier-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.modifier.ComponentConvertModifier

For a given Component instance converts all component properties
 of a certain type to instances of another configured Component.
 The conversion is performed recursively down all the component children

 
 Some example uses of this are converting all checkbox controls to radio group
 controls within a group and replacement of a widget with another
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="checkboxToRadioConverterModifier" type="componentConverterModifier-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.modifier.ComponentConvertModifier

For a given Component instance converts all component properties
 of a certain type to instances of another configured Component.
 The conversion is performed recursively down all the component children

 
 Some example uses of this are converting all checkbox controls to radio group
 controls within a group and replacement of a widget with another
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="alphaPatternConstraint" type="alphaPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint

Pattern for matching alpha characters]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="alphaWithBasicPunc" type="alphaPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint

Pattern for matching alpha characters]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="nodePrototype" type="nodePrototype-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.NodePrototype

Configures nodes for a org.kuali.rice.krad.uif.container.TreeGroup]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="charsetPatternConstraint" type="charsetPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint

Pattern for matching any character in the given list (String)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="documentView" type="documentView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.DocumentView

View type for KRAD documents.

 
 Provides commons configuration and default behavior applicable to documents
 in the KRAD module.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="quickFinder" type="quickFinder-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.QuickFinder

Widget for navigating to a lookup from a field (called a quickfinder).]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionQuickFinder" type="quickFinder-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.QuickFinder

Widget for navigating to a lookup from a field (called a quickfinder).]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="quickFinderByScript" type="quickFinder-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.QuickFinder

Widget for navigating to a lookup from a field (called a quickfinder).]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="data" type="data-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.DataFieldBase

Field that renders data from the application, such as the value of a data object property]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dataNoLabel" type="data-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.DataFieldBase

Field that renders data from the application, such as the value of a data object property]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dataLabelRight" type="data-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.DataFieldBase

Field that renders data from the application, such as the value of a data object property]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dataLabelTop" type="data-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.DataFieldBase

Field that renders data from the application, such as the value of a data object property]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="routingAttribute" type="routingAttribute-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="group" type="group-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="formFooter" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionVerticalBoxItem" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceVerticalSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="subSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="subSection2Col" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerUpperGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="cssGrid" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="listSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="subSection1Col" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureVerticalSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerLowerGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headerRightGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureHorizontalSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="grid" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceHorizontalSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceGridSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="subSection3Col" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="gridSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceVerticalSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="section3Col" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="section" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="list" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionGridItem" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="boxGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="listSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="collectionHorizontalBoxItem" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceVerticalGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceHorizontalGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureGridSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureListSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="section1Col" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="section2Col" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceGrid" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceGridSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="footer" type="footer-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureListSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalGroup" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="gridSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceHorizontalSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureHorizontalSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="disclosureVerticalSubSection" type="group-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.GroupBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.GroupBase

Container that holds a list of Field or other Group
 instances

 
 Groups can exist at different levels of the View, providing
 conceptual groupings such as the page, section, and group. In addition, other
 group types can be created to add behavior like collection support
 

 
 Group implementation has properties for defaulting the binding
 information (such as the parent object path and a binding prefix) for the
 fields it contains. During the phase these properties (if given) are set on
 the fields contained in the Group that implement
 DataBinding, unless they have already been set on the field.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="componentBase" type="componentBase-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.component.ComponentBase

Base implementation of Component which other component implementations should extend.

 
 Provides base component properties such as id and template. Also provides default implementation
 for the ScriptEventSupport and Ordered interfaces. By default no script
 events except the onDocumentReady are supported.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="spinnerControl" type="spinnerControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.SpinnerControl

Text control that as decorated with a spinner widget (allowing the control value to be modified using the
 spinner)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="mockView" type="mockView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.mock.MockView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.mock.MockView

View class for developing UI mocks.

 Automatically binds data binding components to a dummy map property on the mock form.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="checkboxControl" type="checkboxControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.CheckboxControl

Represents a HTML Checkbox control. Typically used for boolean attributes (where the
 value is either on/off, true/false)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fileControl" type="fileControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.FileControl

Represents a HTML File control, generally rendered as an input control with
 type 'file'. Allows user to upload a file to the application]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="growls" type="growls-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Growls

Growls sets up settings for growls global to the current view and its pages

 
 Some basic options of the plugin are exposed through this class, however additional options
 can be passed through setComponentOptions as usual. However, the header and theme option is set
 by the growl processing in PageGroup automatically. See the jquery jGrowl plugin for more details.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="numericPatternConstraint" type="numericPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint

Pattern for matching numeric characters, difference between NumericPatternConstraint and IntegerPatternConstraint
 is that a numeric pattern constraint is for matching numeric characters and can be mixed with other characters
 by setting allow flags on, while integer is for only positive/negative numbers]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="numericWithOperators" type="numericPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint

Pattern for matching numeric characters, difference between NumericPatternConstraint and IntegerPatternConstraint
 is that a numeric pattern constraint is for matching numeric characters and can be mixed with other characters
 by setting allow flags on, while integer is for only positive/negative numbers]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="breadcrumbItem" type="breadcrumbItem-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.BreadcrumbItem" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.BreadcrumbItem

BreadcrumbItem represents a single item in the breadcrumb list that is generated by the breadcrumbs widget.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="progressBarField-bean" type="progressBarField-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.ProgressBarField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.ProgressBarField

Field wrapper for the ProgressBar element]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="stepProgressBarField-bean" type="progressBarField-bean-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.ProgressBarField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.ProgressBarField

Field wrapper for the ProgressBar element]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="groupValidationMessages" type="groupValidationMessages-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.GroupValidationMessages

ValidationMessages for logic and options specific to groups.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="controlBase" type="controlBase-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.ControlBase

Base class for all Control implementations.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="multiFileUploadCollection" type="multiFileUploadCollection-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.MultiFileUploadCollection" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="transactionalDocumentView" type="transactionalDocumentView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.TransactionalDocumentView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.TransactionalDocumentView

View type for Transactional documents]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="breadcrumbOptions" type="breadcrumbOptions-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.BreadcrumbOptions" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.BreadcrumbOptions

BreadcrumbOptions represents the options for the current view breadcrumbs that are displayed.

 
 This class allows
 for complete override of all breadcrumbs, and ability to add breadcrumbs before the view and page breadcrumb items.
 Important note: breadcrumbOptions for preViewBreadcrumbs, prePageBreadcrumbs, and
 breadcrumbOverrides are inherited from the View if not explicitly set from the PageGroup level's breadcrumbOptions
 (if they contain a value at the view level and the property is null at the page level - default behavior).
 Explicitly providing an empty list or setting these properties at the PageGroup level will
 override this inheritance.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="cssGridLayoutBase" type="cssGridLayoutBase-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.CssGridLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.CssGridLayoutManagerBase

Css Grid Layout managers are a layout managers which creates div "rows" and "cells" to replicate a
 table look by using div elements for its items.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="workflowProperties" type="workflowProperties-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowProperties" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="navbar" type="navbar-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.NavigationBar" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.NavigationBar

Component that renders a navigation bar, including a branding and navigation group.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="componentSecurity" type="componentSecurity-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.component.ComponentSecurity

Component security is used to flag permissions that exist in KIM for various component state (like edit and view)

 
 In addition, properties such as additional role and permission details can be configured to use when
 checking the KIM permissions
 

 
 Security subclasses exist adding on flags apporiate for that component
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="metaTag" type="metaTag-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.MetaTag" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.MetaTag

Renders a meta tag in the head of the html document.

 The meta tag component can be used to create meta tags by defining the attributes:
 name, content and http_equiv]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="caseConstriant" type="caseConstriant-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint

CaseConstraint is imposed only when a certain condition is met

 For example, if the country attribute value is "USA",
 then a prerequisite constraint may be imposed that the 'State' attribute is non-null.

 
 This class is a direct copy of one that was in Kuali Student.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="compareFieldCreateModifier" type="compareFieldCreateModifier-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier

Generates Field instances to produce a comparison view among
 objects of the same type

 
 Modifier is initialized with a List of ComparableInfo instances.
 For each comparable info, a copy of the configured group field is made and
 adjusted to the binding object path for the comparable. The comparison fields
 are ordered based on the configured order property of the comparable. In
 addition, a HeaderField can be generated to label each group
 of comparison fields.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceCompareModifier" type="compareFieldCreateModifier-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier

Generates Field instances to produce a comparison view among
 objects of the same type

 
 Modifier is initialized with a List of ComparableInfo instances.
 For each comparable info, a copy of the configured group field is made and
 adjusted to the binding object path for the comparable. The comparison fields
 are ordered based on the configured order property of the comparable. In
 addition, a HeaderField can be generated to label each group
 of comparison fields.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="imageField" type="imageField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.ImageField

Field that wraps an image content element.

 
 Puts a &lt;DIV&gt; tag around an image element. This allows for labeling, styling, etc.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="locationSuggest" type="locationSuggest-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.LocationSuggest" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.LocationSuggest

LocationSuggest widget for providing suggestions that represent locations.  When the suggestion is clicked, the
 navigation occurs immediately.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="spinner" type="spinner-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Spinner

Widget that decorates a control transforming into a spinner

 
 Spinners allow the incrementing or decrementing of the controls value with an arrow up and down icon on
 the right side of the control. How the value is incremented, min/max values, and so on can be configured
 through the org.kuali.rice.krad.uif.component.Component#getTemplateOptions() property
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="supportAttributeDefinition" type="supportAttributeDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="attributeSecurity" type="attributeSecurity-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="bindingInfo" type="bindingInfo-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.component.BindingInfo

Provides binding configuration for an DataBinding component (attribute or
 collection)

 
 From the binding configuration the binding path is determined (if not
 manually set) and used to set the path in the UI or to get the value from the
 model
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionField" type="actionField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.ActionField

Field that encloses an @{link org.kuali.rice.krad.uif.element.Action} element]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionLinkField" type="actionField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.ActionField

Field that encloses an @{link org.kuali.rice.krad.uif.element.Action} element]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="view" type="view-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.FormView

Provides configuration for View instances that render an HTML form.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalRadioControl" type="verticalRadioControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.RadioGroupControl

Represents a group of HTML Radio controls. Provides preset options for the
 user to choose by a series of radio controls. Only one option can be selected]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalRadioControl" type="verticalRadioControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.RadioGroupControl

Represents a group of HTML Radio controls. Provides preset options for the
 user to choose by a series of radio controls. Only one option can be selected]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="linkField" type="linkField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.LinkField

Field that encloses a link element.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="richTable" type="richTable-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.RichTable

Decorates a HTML Table client side with various tools

 
 Decorations implemented depend on widget implementation. Examples are sorting, paging and
 skinning.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="pagedRichTable" type="richTable-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.RichTable

Decorates a HTML Table client side with various tools

 
 Decorations implemented depend on widget implementation. Examples are sorting, paging and
 skinning.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="scrollableRichTable" type="richTable-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.RichTable

Decorates a HTML Table client side with various tools

 
 Decorations implemented depend on widget implementation. Examples are sorting, paging and
 skinning.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="searchingTypeDefinition" type="searchingTypeDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="gridLayout" type="gridLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.GridLayoutManagerBase

Layout manager that organizes its components in a table based grid

 
 Items are laid out from left to right (with each item taking up one column)
 until the configured number of columns is reached. If the item count is
 greater than the number of columns, a new row will be created to render the
 remaining items (and so on until all items are placed). Labels for the fields
 can be pulled out (default) and rendered as a separate column. The manager
 also supports the column span and row span options for the field items. If
 not specified the default is 1.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="fourColumnGridLayout" type="gridLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.GridLayoutManagerBase

Layout manager that organizes its components in a table based grid

 
 Items are laid out from left to right (with each item taking up one column)
 until the configured number of columns is reached. If the item count is
 greater than the number of columns, a new row will be created to render the
 remaining items (and so on until all items are placed). Labels for the fields
 can be pulled out (default) and rendered as a separate column. The manager
 also supports the column span and row span options for the field items. If
 not specified the default is 1.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="sixColumnGridLayout" type="gridLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.GridLayoutManagerBase

Layout manager that organizes its components in a table based grid

 
 Items are laid out from left to right (with each item taking up one column)
 until the configured number of columns is reached. If the item count is
 greater than the number of columns, a new row will be created to render the
 remaining items (and so on until all items are placed). Labels for the fields
 can be pulled out (default) and rendered as a separate column. The manager
 also supports the column span and row span options for the field items. If
 not specified the default is 1.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="twoColumnGridLayout" type="gridLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManagerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.GridLayoutManagerBase

Layout manager that organizes its components in a table based grid

 
 Items are laid out from left to right (with each item taking up one column)
 until the configured number of columns is reached. If the item count is
 greater than the number of columns, a new row will be created to render the
 remaining items (and so on until all items are placed). Labels for the fields
 can be pulled out (default) and rendered as a separate column. The manager
 also supports the column span and row span options for the field items. If
 not specified the default is 1.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="primitiveAttributeDefinition" type="primitiveAttributeDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="mustOccurConstraint" type="mustOccurConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint

Must occur constraints are constraints that indicate some range of acceptable valid results. So a must occur
 constraint
 might indicate that between 1 and 3 prequisite constraints must be valid. For example, on a person object, it might
 be
 that one of three fields must be filled in:

 1. username
 2. email
 3. phone number

 By imposing a must occur constraint on the person object iself, and setting three prequisite constraints below it,
 with a min of 1
 and a max of 3, this requirement can be enforced.

 A more complicated example might be that a US address is only valid if it provides either:
 (a) a city and state, or
 (b) a postal code

 To enforce this, a single must occur constraint would have two children: (1) a prequisite constraint on postal code,
 and (2) a must occur constraint
 with two child prequisite constraints, on city and state, respectively. By setting min=1/max=2 at the top must occur
 constraint,
 and min=2/max=2 at the leaf constraint, this requirement can be enforced.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dropdownMenu" type="dropdownMenu-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ToggleMenu" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ToggleMenu

Renders a toggle menu (aka sub menu, dropdown menu) of items.

 The toggle menu component can be used to build context menus or full application menus. Essentially the
 component is configured by first setting the text that will appear as a link (optionally with a caret). When the
 user clicks the link, the items (#getMenuItems() will be presented.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="sidebarMenu" type="dropdownMenu-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ToggleMenu" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ToggleMenu

Renders a toggle menu (aka sub menu, dropdown menu) of items.

 The toggle menu component can be used to build context menus or full application menus. Essentially the
 component is configured by first setting the text that will appear as a link (optionally with a caret). When the
 user clicks the link, the items (#getMenuItems() will be presented.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="iframeView" type="iframeView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.IframeView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.IframeView

IframeView is a View component that shows another website's content in an iframe.

 This View will always have one page itself and will always contain an iframe component.  The location
 property allows ease of setting the url for the iframe.  If the site being shown in the iframe is a KRAD View
 itself, the default bean for this class will attempt to pass a url parameter notifying the View that it is being
 shown in an iframe; this can be used in SpringEL to invoke special logic (such as not rendering some components,
 like the app header)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="validCharactersPatternContraint" type="validCharactersPatternContraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersPatternConstraint

This abstract class extends from ValidCharactersConstraint. Its subclasses contain a regex that
 is built out with flags that can be turned off and on. All ValidCharactersPatternConstraints
 allow a certain set of characters to be repeated multiple times]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="remotableFieldsPlaceholder" type="remotableFieldsPlaceholder-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.RemoteFieldsHolder" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.RemoteFieldsHolder

A placeholder in the configuration for a Container list of items that will be invoked to
 retrieve a list of RemotableAttributeField instances which will then be inserted into the containers
 list at the position of the holder

 
 Since remotable fields are dynamic by nature, the individual fields cannot be configured initially with the
 container. Further more the properties for the field are constructed with code. This gives the ability to specify
 where that list of fields should be placed, along with configured on how to retrieve the remote fields.
 

 
 The fetching properties are used to configure what method to invoke that will return the list of remotable fields.
 Specifying the #getFetchingMethodToCall() only assumes the method is on the view helper service for the
 contained view. For invoking other classes, such as services or static classes, use  #getFetchingMethodInvoker()
 

 
 The list of remotable fields should bind to a Map property on the model. The #getPropertyName() and
 #getBindingInfo() properties specify the path to this property. The property names configured on the
 returned fields are assumed to be keys in that above configured map, with the corresponding map value giving the
 actual model value for the remote field.
 

 
 e.g. configuration
 {@code
 
 
 <bean parent="RemoteFieldsHolder" p:propertyName="remoteFieldValuesMap"
 p:fetchingMethodToCall="retrieveRemoteFields"/>
 ...
 }

 This example will invoke a method named 'retrieveRemoteFields' on the view helper service, which should return
 a list of RemotableAttributeField instances. The view, model instance, and parent container will be sent
 to the method as arguments.

 The returned fields will be translated to InputField instances that bind to a map property named
 'remoteFieldValuesMap' on the model.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="textControl" type="textControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextControlBase

Represents a HTML Text control, generally rendered as a input field of type
 'text'. This can display and receive a single value]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="largeTextControl" type="textControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextControlBase

Represents a HTML Text control, generally rendered as a input field of type
 'text'. This can display and receive a single value]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="smallTextControl" type="textControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextControlBase

Represents a HTML Text control, generally rendered as a input field of type
 'text'. This can display and receive a single value]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="currencyTextControl" type="textControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextControlBase

Represents a HTML Text control, generally rendered as a input field of type
 'text'. This can display and receive a single value]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dateControl" type="textControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextControlBase

Represents a HTML Text control, generally rendered as a input field of type
 'text'. This can display and receive a single value]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="mediumTextControl" type="textControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.TextControlBase

Represents a HTML Text control, generally rendered as a input field of type
 'text'. This can display and receive a single value]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="contentElement" type="contentElement-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ContentElementBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ContentElementBase

Base component class for content elements.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="mask" type="mask-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.Mask" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="theme" type="theme-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewTheme" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.ViewTheme

Holds a configuration of CSS and JS assets that provides the base for one or more views.

 
 The list of CSS and JS files that are sourced in for a view come from its theme, along with any
 additional files configured for the specific view. Generally an application will have one theme for the
 entire application.

 The theme has logic for 'dev' mode versus 'test/prod' mode. This is controlled through the
 rice.krad.dev.mode configuration variable. In development mode it will source in all the CSS
 and JS files individually (to allow for easier debugging). In non-development mode it will source in a
 minified file. The path for the minified files can be specified by setting #getMinCssFile() and
 #getMinScriptFile(). If not set, it will be formed by using the #getName(),
 #getMinVersionSuffix(), and min suffix (this is the file name generated by the theme builder). To
 indicate the min file should not be sourced in regardless of the environment, set the property
 #isIncludeMinFiles() to false

 The path to the minified file is determined by #getDirectory(). It this is not set, it is defaulted to
 be '/themes' plus the name of the theme (eg '/themes/kboot')
 

 
 There are two ways the theme can be configured, manual or by convention. If you want to manually configured the
 view theme, set #isUsesThemeBuilder() to false. For dev mode, you must then set the  #getMinCssSourceFiles() and #getMinScriptSourceFiles() lists to the theme files. For configuration
 by convention, only the theme #getName() is required. The directory will be assumed to be '/themes/{name}'.
 Furthermore the list of min CSS and JS files will be retrieved from the theme.properties file created by the
 theme builder
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="kbootTheme" type="theme-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewTheme" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.ViewTheme

Holds a configuration of CSS and JS assets that provides the base for one or more views.

 
 The list of CSS and JS files that are sourced in for a view come from its theme, along with any
 additional files configured for the specific view. Generally an application will have one theme for the
 entire application.

 The theme has logic for 'dev' mode versus 'test/prod' mode. This is controlled through the
 rice.krad.dev.mode configuration variable. In development mode it will source in all the CSS
 and JS files individually (to allow for easier debugging). In non-development mode it will source in a
 minified file. The path for the minified files can be specified by setting #getMinCssFile() and
 #getMinScriptFile(). If not set, it will be formed by using the #getName(),
 #getMinVersionSuffix(), and min suffix (this is the file name generated by the theme builder). To
 indicate the min file should not be sourced in regardless of the environment, set the property
 #isIncludeMinFiles() to false

 The path to the minified file is determined by #getDirectory(). It this is not set, it is defaulted to
 be '/themes' plus the name of the theme (eg '/themes/kboot')
 

 
 There are two ways the theme can be configured, manual or by convention. If you want to manually configured the
 view theme, set #isUsesThemeBuilder() to false. For dev mode, you must then set the  #getMinCssSourceFiles() and #getMinScriptSourceFiles() lists to the theme files. For configuration
 by convention, only the theme #getName() is required. The directory will be assumed to be '/themes/{name}'.
 Furthermore the list of min CSS and JS files will be retrieved from the theme.properties file created by the
 theme builder
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dialog" type="dialog-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.DialogGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.DialogGroup

Special type of group that presents the content in a modal dialog.

 A dialog group can be used for many different purposes. First it can be used to give a simple confirmation (
 a prompt with ok/cancel or yes/no options). The org.kuali.rice.krad.uif.element.Action component contains
 properties for adding a confirmation dialog. Next, a dialog can be used to prompt for a response or to gather
 addition data on the client. In this situation, the dialog is configured either in the view or external to the view,
 and the developers triggers the display of the dialog using the javascript method showDialog. See krad.modal.js
 for more information. Dialogs can also be triggered from a controller method (or other piece of server code). Again
 the dialog is configured with the view or external to the view, and the controller method triggers the show using
 the method org.kuali.rice.krad.web.controller.UifControllerBase#showDialog.

 A dialog is a group and can be configured like any other general group. For building basic dialogs, there are
 convenience properties that can be used. In addition, there are base beans provided with definitions for these
 properties. This includes a basic prompt message and responses. Note to have responses with different action properties,
 set the items of the dialog groups footer directly.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dialogOkCancelExpl" type="dialog-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.DialogGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.DialogGroup

Special type of group that presents the content in a modal dialog.

 A dialog group can be used for many different purposes. First it can be used to give a simple confirmation (
 a prompt with ok/cancel or yes/no options). The org.kuali.rice.krad.uif.element.Action component contains
 properties for adding a confirmation dialog. Next, a dialog can be used to prompt for a response or to gather
 addition data on the client. In this situation, the dialog is configured either in the view or external to the view,
 and the developers triggers the display of the dialog using the javascript method showDialog. See krad.modal.js
 for more information. Dialogs can also be triggered from a controller method (or other piece of server code). Again
 the dialog is configured with the view or external to the view, and the controller method triggers the show using
 the method org.kuali.rice.krad.web.controller.UifControllerBase#showDialog.

 A dialog is a group and can be configured like any other general group. For building basic dialogs, there are
 convenience properties that can be used. In addition, there are base beans provided with definitions for these
 properties. This includes a basic prompt message and responses. Note to have responses with different action properties,
 set the items of the dialog groups footer directly.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionConfirmation" type="dialog-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.DialogGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.DialogGroup

Special type of group that presents the content in a modal dialog.

 A dialog group can be used for many different purposes. First it can be used to give a simple confirmation (
 a prompt with ok/cancel or yes/no options). The org.kuali.rice.krad.uif.element.Action component contains
 properties for adding a confirmation dialog. Next, a dialog can be used to prompt for a response or to gather
 addition data on the client. In this situation, the dialog is configured either in the view or external to the view,
 and the developers triggers the display of the dialog using the javascript method showDialog. See krad.modal.js
 for more information. Dialogs can also be triggered from a controller method (or other piece of server code). Again
 the dialog is configured with the view or external to the view, and the controller method triggers the show using
 the method org.kuali.rice.krad.web.controller.UifControllerBase#showDialog.

 A dialog is a group and can be configured like any other general group. For building basic dialogs, there are
 convenience properties that can be used. In addition, there are base beans provided with definitions for these
 properties. This includes a basic prompt message and responses. Note to have responses with different action properties,
 set the items of the dialog groups footer directly.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dialogYesNo" type="dialog-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.DialogGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.DialogGroup

Special type of group that presents the content in a modal dialog.

 A dialog group can be used for many different purposes. First it can be used to give a simple confirmation (
 a prompt with ok/cancel or yes/no options). The org.kuali.rice.krad.uif.element.Action component contains
 properties for adding a confirmation dialog. Next, a dialog can be used to prompt for a response or to gather
 addition data on the client. In this situation, the dialog is configured either in the view or external to the view,
 and the developers triggers the display of the dialog using the javascript method showDialog. See krad.modal.js
 for more information. Dialogs can also be triggered from a controller method (or other piece of server code). Again
 the dialog is configured with the view or external to the view, and the controller method triggers the show using
 the method org.kuali.rice.krad.web.controller.UifControllerBase#showDialog.

 A dialog is a group and can be configured like any other general group. For building basic dialogs, there are
 convenience properties that can be used. In addition, there are base beans provided with definitions for these
 properties. This includes a basic prompt message and responses. Note to have responses with different action properties,
 set the items of the dialog groups footer directly.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dialogOkCancel" type="dialog-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.DialogGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.DialogGroup

Special type of group that presents the content in a modal dialog.

 A dialog group can be used for many different purposes. First it can be used to give a simple confirmation (
 a prompt with ok/cancel or yes/no options). The org.kuali.rice.krad.uif.element.Action component contains
 properties for adding a confirmation dialog. Next, a dialog can be used to prompt for a response or to gather
 addition data on the client. In this situation, the dialog is configured either in the view or external to the view,
 and the developers triggers the display of the dialog using the javascript method showDialog. See krad.modal.js
 for more information. Dialogs can also be triggered from a controller method (or other piece of server code). Again
 the dialog is configured with the view or external to the view, and the controller method triggers the show using
 the method org.kuali.rice.krad.web.controller.UifControllerBase#showDialog.

 A dialog is a group and can be configured like any other general group. For building basic dialogs, there are
 convenience properties that can be used. In addition, there are base beans provided with definitions for these
 properties. This includes a basic prompt message and responses. Note to have responses with different action properties,
 set the items of the dialog groups footer directly.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="actionConfirmationExpl" type="dialog-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.container.DialogGroup" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.container.DialogGroup

Special type of group that presents the content in a modal dialog.

 A dialog group can be used for many different purposes. First it can be used to give a simple confirmation (
 a prompt with ok/cancel or yes/no options). The org.kuali.rice.krad.uif.element.Action component contains
 properties for adding a confirmation dialog. Next, a dialog can be used to prompt for a response or to gather
 addition data on the client. In this situation, the dialog is configured either in the view or external to the view,
 and the developers triggers the display of the dialog using the javascript method showDialog. See krad.modal.js
 for more information. Dialogs can also be triggered from a controller method (or other piece of server code). Again
 the dialog is configured with the view or external to the view, and the controller method triggers the show using
 the method org.kuali.rice.krad.web.controller.UifControllerBase#showDialog.

 A dialog is a group and can be configured like any other general group. For building basic dialogs, there are
 convenience properties that can be used. In addition, there are base beans provided with definitions for these
 properties. This includes a basic prompt message and responses. Note to have responses with different action properties,
 set the items of the dialog groups footer directly.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="boxLayout" type="boxLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.BoxLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.BoxLayoutManager

Layout manager that organizes components in a single row (horizontal) or
 column (vertical)

 
 Although a table based template could be used, setup is done to also support
 a CSS based template. The items in the Container instance are
 rendered sequentially wrapping each one with a span element. The padding
 property can be configured to space the elements as needed. To achieve a
 vertical orientation, the span style is set to block. Additional styling can
 be set for the items by using the itemSpanStyle property.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="horizontalBoxLayout" type="boxLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.BoxLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.BoxLayoutManager

Layout manager that organizes components in a single row (horizontal) or
 column (vertical)

 
 Although a table based template could be used, setup is done to also support
 a CSS based template. The items in the Container instance are
 rendered sequentially wrapping each one with a span element. The padding
 property can be configured to space the elements as needed. To achieve a
 vertical orientation, the span style is set to block. Additional styling can
 be set for the items by using the itemSpanStyle property.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="verticalBoxLayout" type="boxLayout-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.layout.BoxLayoutManager" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.layout.BoxLayoutManager

Layout manager that organizes components in a single row (horizontal) or
 column (vertical)

 
 Although a table based template could be used, setup is done to also support
 a CSS based template. The items in the Container instance are
 rendered sequentially wrapping each one with a span element. The padding
 property can be configured to space the elements as needed. To achieve a
 vertical orientation, the span style is set to block. Additional styling can
 be set for the items by using the itemSpanStyle property.
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="historyEntry" type="historyEntry-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.HistoryEntry" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.HistoryEntry

A simple object that keeps track of various HistoryInformation

 TODO a variety of these settings are not used in the current implementation of breadcrumbs
 and history, they may be removed later if they prove unuseful in future changes]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="prerequisiteConstraint" type="prerequisiteConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint

Prerequisite constraints require that some other attribute be non-empty in order for the constraint to be valid.
 So, a 7-digit US phone number might have a prerequisite of an area code, or an address street2 might have a
 prerequisite that street1 is non-empty.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="inquiryView" type="inquiryView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.InquiryView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.InquiryView

Type of View that provides a read-only display of a record of
 data (object instance)

 
 The InquiryView provides the interface for the Inquiry
 framework. It works with the Inquirable service and inquiry
 controller. The view does render a form to support the configuration of
 actions to perform operations on the data.
 

 
 Inquiry views are primarily configured by the object class they are
 associated with. This provides the default dictionary information for the
 fields. If more than one inquiry view is needed for the same object class,
 the view name can be used to further identify an unique view
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="validationMessages" type="validationMessages-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ValidationMessages" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ValidationMessages

Field that displays error, warning, and info messages for the keys that are
 matched. By default, an ValidationMessages will match on id and bindingPath (if this
 ValidationMessages is for an InputField), but can be set to match on
 additionalKeys and nested components keys (of the its parentComponent).

 In addition, there are a variety of options which can be toggled to effect
 the display of these messages during both client and server side validation
 display. See documentation on each get method for more details on the effect
 of each option.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="viewAuthorizer" type="viewAuthorizer-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.view.ViewAuthorizerBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.view.ViewAuthorizerBase

Implementation of ViewAuthorizer that verifies authorization with KIM permission checks

 
 Each permission goes through one of the isAuthorized methods provided by
 org.kuali.rice.krad.bo.DataObjectAuthorizer, these in turn call #addPermissionDetails(Object, java.util.Map)
 and #addRoleQualification(Object, java.util.Map) for building the permission and role maps to send with
 the permission check. Subclasses can override these methods to add additional attributes
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="referenceDefinition" type="referenceDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.ReferenceDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="routingTypeDefinition" type="routingTypeDefinition-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingTypeDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="transactionalDocumentEntry" type="transactionalDocumentEntry-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.TransactionalDocumentEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="datePatternConstraint" type="datePatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.DatePatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.DatePatternConstraint

DatePatternConstraint constrains a field to only allow dates which are part of the formats
 defined in the system. Constraining a field all these formats is often not appropriate for
 fields, and you may want to constrain the input to a subset of the allowed formats in the system.
 This can be done by setting the allowed formats to this subset (see BasicDatePatternConstraint
 bean for example)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="basicDatePatternConstraint" type="datePatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.DatePatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.DatePatternConstraint

DatePatternConstraint constrains a field to only allow dates which are part of the formats
 defined in the system. Constraining a field all these formats is often not appropriate for
 fields, and you may want to constrain the input to a subset of the allowed formats in the system.
 This can be done by setting the allowed formats to this subset (see BasicDatePatternConstraint
 bean for example)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="scrollpane" type="scrollpane-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Scrollpane" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Scrollpane

Decorates a group with scroll functionality.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="configurationBasedRegexPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="emailAddressPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="monthPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="urlPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="timestampPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="yearPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="phoneNumberPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="timePatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="javaClassPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="zipcodePatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="noWhitespacePatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="time24HPatternConstraint" type="configurationBasedRegexPatternConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ConfigurationBasedRegexPatternConstraint

ConfigurationBasedRegexPatternConstraint uses a patternTypeKey to get the regex used for validation by key from
 the KualiConfigurationService]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="genericField" type="genericField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.GenericField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.GenericField

Field whose output is produced by invoking a method or template and has no
 properties (generic)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="customTemplateField" type="genericField-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.field.GenericField" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.field.GenericField

Field whose output is produced by invoking a method or template and has no
 properties (generic)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="suggest" type="suggest-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Suggest" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Suggest

Widget that provides dynamic select options to the user as they are entering the value (also known
 as auto-complete).

 Widget is backed by an org.kuali.rice.krad.uif.field.AttributeQuery that provides the configuration
 for executing a query server side that will retrieve the valid option values.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="lookupView" type="lookupView-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.lookup.LookupView" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.lookup.LookupView

View type for lookups.

 Supports doing a search against a data object class or performing a more advanced query. The view
 type is primarily made up of two groups, the search (or criteria) group and the results group. Many
 options are supported on the view to enable/disable certain features, like what actions are available
 on the search results.

 Works in conjunction with org.kuali.rice.krad.lookup.Lookupable which customizes the view and
 carries out the business functionality]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="inquiry" type="inquiry-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.widget.Inquiry" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.widget.Inquiry

Widget for rendering an Inquiry link or DirectInquiry action field

 
 The inquiry widget will render a button for the field value when
 that field is editable. When read only the widget will create a link on the display value.
 It points to the associated inquiry view for the field. The inquiry can be configured to point to a certain
 InquiryView, or the framework will attempt to associate the field with a inquiry based on
 its metadata (in particular its relationships in the model).
 ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="methodConfig" type="methodConfig-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.component.MethodInvokerConfig" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.component.MethodInvokerConfig

Extends MethodInvoker to add properties for specifying
 a method for invocation within the UIF]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="optionListControl" type="optionListControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.OptionListControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.OptionListControl

OptionListControl is used for listing out options from an option finder or options list.  This control can show all
 items in the options or it can show only the selected options (if backed by a propertyName).  One use case for this
 control is to use it in combination with UifKeyValueLocation to provide a list of locations retrieved through a
 KeyValuesFinder.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="workflowAttributeMetadata" type="workflowAttributeMetadata-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowAttributeMetadata" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="dropdownControl" type="dropdownControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.SelectControlBase

Represents a HTML Select control. Provides preset options for the User to
 choose from by a drop down]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="multiSelectControl" type="dropdownControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControlBase" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.SelectControlBase

Represents a HTML Select control. Provides preset options for the User to
 choose from by a drop down]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="maintenanceDocumentEntry" type="maintenanceDocumentEntry-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.MaintenanceDocumentEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="headLink" type="headLink-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.HeadLink" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.HeadLink

Renders a link tag in the head of the html document.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="keyValuePair" type="keyValuePair-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.UifKeyValue" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.UifKeyValue

Extension of key value for use within the UIF.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="viewHeader" type="viewHeader-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.element.ViewHeader" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.element.ViewHeader

The ViewHeader component represents the header for the view.

 This header has support for a "Unified" header in
 which both the page title and view title appear in its content.  An "area title" and "metadata" can also be set
 to provide context. ]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="validCharactersConstraint" type="validCharactersConstraint-mixedType">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint

This is a constraint that limits attribute values to some subset of valid characters or to match a particular
 regular
 expression.

 For example:
 - To limit to both upper and lower-case letters, value can be set to "[A-Za-z]*"
 - To limit to any character except carriage returns and line feeds, value can be set to "[^\n\r]*"]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="columnCalculation" type="columnCalculation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.ColumnCalculationInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.ColumnCalculationInfo

ColumnCalculationInfo is used to specify which columns and what types of calculations are performed on those columns
 of table collection.  This functionality can only be used when the dataTables plugin is being used
 (richTable.render="true" for TableLayoutManager)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="columnCalculationSum" type="columnCalculation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.ColumnCalculationInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.ColumnCalculationInfo

ColumnCalculationInfo is used to specify which columns and what types of calculations are performed on those columns
 of table collection.  This functionality can only be used when the dataTables plugin is being used
 (richTable.render="true" for TableLayoutManager)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="columnCalculationMax" type="columnCalculation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.ColumnCalculationInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.ColumnCalculationInfo

ColumnCalculationInfo is used to specify which columns and what types of calculations are performed on those columns
 of table collection.  This functionality can only be used when the dataTables plugin is being used
 (richTable.render="true" for TableLayoutManager)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="columnCalculationAverage" type="columnCalculation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.ColumnCalculationInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.ColumnCalculationInfo

ColumnCalculationInfo is used to specify which columns and what types of calculations are performed on those columns
 of table collection.  This functionality can only be used when the dataTables plugin is being used
 (richTable.render="true" for TableLayoutManager)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="columnCalculationMin" type="columnCalculation-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.util.ColumnCalculationInfo" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.util.ColumnCalculationInfo

ColumnCalculationInfo is used to specify which columns and what types of calculations are performed on those columns
 of table collection.  This functionality can only be used when the dataTables plugin is being used
 (richTable.render="true" for TableLayoutManager)]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="passwordControl" type="passwordControl-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.uif.control.PasswordControl" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.uif.control.PasswordControl

Represents a HTML password text control, rendered as a input field of type
 'password'. This can receive and display a mask for a single value.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="whenConstraint" type="whenConstraint-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint" xml:lang="en"><![CDATA[Backing Class: org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint

WhenConstraint is a child of a CaseConstraint

 It provides a specific additional constraint that should be processed when
 the condition itself is true.

 So a case constraint on country, might have a when constraint with value='USA', and another with value='Canada'.
 Each of these
 WhenConstraint's would define a constraint of their own that would only be processed when the country was
 USA, or when the country
 was Canada.

 A WhenConstraint either specifies an attribute path whose value it then provides or a constraint.
 The parent @{CaseConstraint} is defined on the field on which the constraints are desired to take effect.]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:element name="workflowAttributes" type="workflowAttributes-type">
    <xsd:annotation>
      <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowAttributes" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>
